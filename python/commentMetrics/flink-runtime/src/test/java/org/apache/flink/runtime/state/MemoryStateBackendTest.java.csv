# id;timestamp;commentText;codeText;commentWords;codeWords
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1494657469;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forFullCheckpoint())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationProxy<?> mockProxy = mock(TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,full,checkpoint,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1495466666;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forFullCheckpoint())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,full,checkpoint,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1506610974;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forFullCheckpoint())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,full,checkpoint,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1509118643;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpoint())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1516295283;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpoint())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = abstractStateBackend.createStreamFactory(new JobID(), "testOperator")__		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,abstract,state,backend,create,stream,factory,new,job,id,test,operator,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		OperatorStateBackend operatorStateBackend = abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<OperatorStateHandle> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())__		OperatorStateHandle stateHandle = FutureUtil.runIfNotDoneAndGet(runnableFuture)___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(Collections.singletonList(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,operator,state,handle,state,handle,future,util,run,if,not,done,and,get,runnable,future,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,collections,singleton,list,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1519568061;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtil.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			_			TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_					mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__			doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__			PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,util,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1525657109;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtil.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			env = new DummyEnvironment(_				new ArtificialCNFExceptionThrowingClassLoader(_					getClass().getClassLoader(),_					Collections.singleton(JavaSerializer.class.getName())))___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,util,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,env,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,java,serializer,class,get,name,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1525661782;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtil.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			env = new DummyEnvironment(_				new ArtificialCNFExceptionThrowingClassLoader(_					getClass().getClassLoader(),_					Collections.singleton(JavaSerializer.class.getName())))___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,util,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,env,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,java,serializer,class,get,name,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1533224436;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtil.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			env = new DummyEnvironment(_				new ArtificialCNFExceptionThrowingClassLoader(_					getClass().getClassLoader(),_					Collections.singleton(JavaSerializer.class.getName())))___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore operator state"))__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,util,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,env,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,java,serializer,class,get,name,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,operator,state,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1540907751;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtil.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			env = new DummyEnvironment(_				new ArtificialCNFExceptionThrowingClassLoader(_					getClass().getClassLoader(),_					Collections.singleton(JavaSerializer.class.getName())))___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (Exception expected) {_			Assert.assertTrue(ExceptionUtils.findThrowable(expected, ClassNotFoundException.class).isPresent())__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,util,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,env,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,java,serializer,class,get,name,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,exception,expected,assert,assert,true,exception,utils,find,throwable,expected,class,not,found,exception,class,is,present,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1547722029;Verifies that the operator state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testOperatorStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		DummyEnvironment env = new DummyEnvironment()__		AbstractStateBackend abstractStateBackend = new MemoryStateBackend(4096)___		OperatorStateBackend operatorStateBackend =_			abstractStateBackend.createOperatorStateBackend(env, "test-op-name")___		_		ListStateDescriptor<Serializable> stateDescriptor1 = new ListStateDescriptor<>("test1", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor2 = new ListStateDescriptor<>("test2", new JavaSerializer<>())__		ListStateDescriptor<Serializable> stateDescriptor3 = new ListStateDescriptor<>("test3", new JavaSerializer<>())__		ListState<Serializable> listState1 = operatorStateBackend.getListState(stateDescriptor1)__		ListState<Serializable> listState2 = operatorStateBackend.getListState(stateDescriptor2)__		ListState<Serializable> listState3 = operatorStateBackend.getUnionListState(stateDescriptor3)___		listState1.add(42)__		listState1.add(4711)___		listState2.add(7)__		listState2.add(13)__		listState2.add(23)___		listState3.add(17)__		listState3.add(18)__		listState3.add(19)__		listState3.add(20)___		CheckpointStreamFactory streamFactory = new MemCheckpointStreamFactory(MemoryStateBackend.DEFAULT_MAX_STATE_SIZE)___		RunnableFuture<SnapshotResult<OperatorStateHandle>> runnableFuture =_			operatorStateBackend.snapshot(1, 1, streamFactory, CheckpointOptions.forCheckpointWithDefaultLocation())___		SnapshotResult<OperatorStateHandle> snapshotResult = FutureUtils.runIfNotDoneAndGet(runnableFuture)__		OperatorStateHandle stateHandle = snapshotResult.getJobManagerOwnedSnapshot()___		try {__			operatorStateBackend.close()__			operatorStateBackend.dispose()___			env = new DummyEnvironment(_				new ArtificialCNFExceptionThrowingClassLoader(_					getClass().getClassLoader(),_					Collections.singleton(JavaSerializer.class.getName())))___			operatorStateBackend = abstractStateBackend.createOperatorStateBackend(_				env,_				"testOperator")___			operatorStateBackend.restore(StateObjectCollection.singleton(stateHandle))___			fail("The operator state restore should have failed if the previous state serializer could not be loaded.")__		} catch (Exception expected) {_			Assert.assertTrue(ExceptionUtils.findThrowable(expected, ClassNotFoundException.class).isPresent())__		} finally {_			stateHandle.discardState()__		}_	};verifies,that,the,operator,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,operator,state,restore,fails,if,serializer,deserialization,fails,throws,exception,dummy,environment,env,new,dummy,environment,abstract,state,backend,abstract,state,backend,new,memory,state,backend,4096,operator,state,backend,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,op,name,list,state,descriptor,serializable,state,descriptor1,new,list,state,descriptor,test1,new,java,serializer,list,state,descriptor,serializable,state,descriptor2,new,list,state,descriptor,test2,new,java,serializer,list,state,descriptor,serializable,state,descriptor3,new,list,state,descriptor,test3,new,java,serializer,list,state,serializable,list,state1,operator,state,backend,get,list,state,state,descriptor1,list,state,serializable,list,state2,operator,state,backend,get,list,state,state,descriptor2,list,state,serializable,list,state3,operator,state,backend,get,union,list,state,state,descriptor3,list,state1,add,42,list,state1,add,4711,list,state2,add,7,list,state2,add,13,list,state2,add,23,list,state3,add,17,list,state3,add,18,list,state3,add,19,list,state3,add,20,checkpoint,stream,factory,stream,factory,new,mem,checkpoint,stream,factory,memory,state,backend,runnable,future,snapshot,result,operator,state,handle,runnable,future,operator,state,backend,snapshot,1,1,stream,factory,checkpoint,options,for,checkpoint,with,default,location,snapshot,result,operator,state,handle,snapshot,result,future,utils,run,if,not,done,and,get,runnable,future,operator,state,handle,state,handle,snapshot,result,get,job,manager,owned,snapshot,try,operator,state,backend,close,operator,state,backend,dispose,env,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,java,serializer,class,get,name,operator,state,backend,abstract,state,backend,create,operator,state,backend,env,test,operator,operator,state,backend,restore,state,object,collection,singleton,state,handle,fail,the,operator,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,exception,expected,assert,assert,true,exception,utils,find,throwable,expected,class,not,found,exception,class,is,present,finally,state,handle,discard,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1494657469;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forFullCheckpoint()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationProxy<?> mockProxy = mock(TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,full,checkpoint,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1495466666;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forFullCheckpoint()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,full,checkpoint,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1506610974;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forFullCheckpoint()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,full,checkpoint,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1509118643;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpoint()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1516295283;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpoint()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1517489695;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		Environment env = mock(Environment.class)__		when(env.getExecutionConfig()).thenReturn(new ExecutionConfig())__		when(env.getUserClassLoader()).thenReturn(OperatorStateBackendTest.class.getClassLoader())___		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, env)___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,environment,env,mock,environment,class,when,env,get,execution,config,then,return,new,execution,config,when,env,get,user,class,loader,then,return,operator,state,backend,test,class,get,class,loader,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,env,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1519568061;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		_		TypeSerializerSerializationUtil.TypeSerializerSerializationProxy<?> mockProxy =_				mock(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class)__		doThrow(new IOException()).when(mockProxy).read(any(DataInputViewStreamWrapper.class))__		PowerMockito.whenNew(TypeSerializerSerializationUtil.TypeSerializerSerializationProxy.class).withAnyArguments().thenReturn(mockProxy)___		try {_			restoreKeyedBackend(IntSerializer.INSTANCE, snapshot, new DummyEnvironment())___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,type,serializer,serialization,util,type,serializer,serialization,proxy,mock,proxy,mock,type,serializer,serialization,util,type,serializer,serialization,proxy,class,do,throw,new,ioexception,when,mock,proxy,read,any,data,input,view,stream,wrapper,class,power,mockito,when,new,type,serializer,serialization,util,type,serializer,serialization,proxy,class,with,any,arguments,then,return,mock,proxy,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1525657109;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		try {_			restoreKeyedBackend(_				IntSerializer.INSTANCE,_				snapshot,_				new DummyEnvironment(_					new ArtificialCNFExceptionThrowingClassLoader(_						getClass().getClassLoader(),_						Collections.singleton(StringSerializer.class.getName()))))___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,string,serializer,class,get,name,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1525661782;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(((HeapKeyedStateBackend<Integer>) backend).snapshot(_			682375462378L,_			2,_			streamFactory,_			CheckpointOptions.forCheckpointWithDefaultLocation()))___		backend.dispose()___		__		try {_			restoreKeyedBackend(_				IntSerializer.INSTANCE,_				snapshot,_				new DummyEnvironment(_					new ArtificialCNFExceptionThrowingClassLoader(_						getClass().getClassLoader(),_						Collections.singleton(StringSerializer.class.getName()))))___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,backend,dispose,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,string,serializer,class,get,name,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1533224436;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numKeyValueStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(_			((HeapKeyedStateBackend<Integer>) backend).snapshot(_				682375462378L,_				2,_				streamFactory,_				CheckpointOptions.forCheckpointWithDefaultLocation()),_			sharedStateRegistry)___		backend.dispose()___		__		try {_			restoreKeyedBackend(_				IntSerializer.INSTANCE,_				snapshot,_				new DummyEnvironment(_					new ArtificialCNFExceptionThrowingClassLoader(_						getClass().getClassLoader(),_						Collections.singleton(StringSerializer.class.getName()))))___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (IOException expected) {_			Assert.assertTrue(expected.getMessage().contains("Unable to restore keyed state"))__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,shared,state,registry,shared,state,registry,new,shared,state,registry,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,key,value,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,shared,state,registry,backend,dispose,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,string,serializer,class,get,name,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,ioexception,expected,assert,assert,true,expected,get,message,contains,unable,to,restore,keyed,state
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1540907751;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numKeyValueStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(_			((HeapKeyedStateBackend<Integer>) backend).snapshot(_				682375462378L,_				2,_				streamFactory,_				CheckpointOptions.forCheckpointWithDefaultLocation()),_			sharedStateRegistry)___		backend.dispose()___		__		try {_			restoreKeyedBackend(_				IntSerializer.INSTANCE,_				snapshot,_				new DummyEnvironment(_					new ArtificialCNFExceptionThrowingClassLoader(_						getClass().getClassLoader(),_						Collections.singleton(StringSerializer.class.getName()))))___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (Exception expected) {_			Assert.assertTrue(ExceptionUtils.findThrowable(expected, ClassNotFoundException.class).isPresent())__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,shared,state,registry,shared,state,registry,new,shared,state,registry,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,key,value,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,shared,state,registry,backend,dispose,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,string,serializer,class,get,name,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,exception,expected,assert,assert,true,exception,utils,find,throwable,expected,class,not,found,exception,class,is,present
MemoryStateBackendTest -> @Test 	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception;1547722029;Verifies that memory-backed keyed state backend fails with appropriate error and message if_previous serializer can not be restored.;@Test_	public void testKeyedStateRestoreFailsIfSerializerDeserializationFails() throws Exception {_		CheckpointStreamFactory streamFactory = createStreamFactory()__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		KeyedStateBackend<Integer> backend = createKeyedBackend(IntSerializer.INSTANCE)___		ValueStateDescriptor<String> kvId = new ValueStateDescriptor<>("id", String.class, null)__		kvId.initializeSerializerUnlessSet(new ExecutionConfig())___		HeapKeyedStateBackend<Integer> heapBackend = (HeapKeyedStateBackend<Integer>) backend___		assertEquals(0, heapBackend.numKeyValueStateEntries())___		ValueState<String> state = backend.getPartitionedState(VoidNamespace.INSTANCE, VoidNamespaceSerializer.INSTANCE, kvId)___		_		backend.setCurrentKey(0)__		state.update("hello")__		state.update("ciao")___		KeyedStateHandle snapshot = runSnapshot(_			((HeapKeyedStateBackend<Integer>) backend).snapshot(_				682375462378L,_				2,_				streamFactory,_				CheckpointOptions.forCheckpointWithDefaultLocation()),_			sharedStateRegistry)___		backend.dispose()___		__		try {_			restoreKeyedBackend(_				IntSerializer.INSTANCE,_				snapshot,_				new DummyEnvironment(_					new ArtificialCNFExceptionThrowingClassLoader(_						getClass().getClassLoader(),_						Collections.singleton(StringSerializer.class.getName()))))___			fail("The keyed state restore should have failed if the previous state serializer could not be loaded.")__		} catch (Exception expected) {_			Assert.assertTrue(ExceptionUtils.findThrowable(expected, ClassNotFoundException.class).isPresent())__		}_	};verifies,that,memory,backed,keyed,state,backend,fails,with,appropriate,error,and,message,if,previous,serializer,can,not,be,restored;test,public,void,test,keyed,state,restore,fails,if,serializer,deserialization,fails,throws,exception,checkpoint,stream,factory,stream,factory,create,stream,factory,shared,state,registry,shared,state,registry,new,shared,state,registry,keyed,state,backend,integer,backend,create,keyed,backend,int,serializer,instance,value,state,descriptor,string,kv,id,new,value,state,descriptor,id,string,class,null,kv,id,initialize,serializer,unless,set,new,execution,config,heap,keyed,state,backend,integer,heap,backend,heap,keyed,state,backend,integer,backend,assert,equals,0,heap,backend,num,key,value,state,entries,value,state,string,state,backend,get,partitioned,state,void,namespace,instance,void,namespace,serializer,instance,kv,id,backend,set,current,key,0,state,update,hello,state,update,ciao,keyed,state,handle,snapshot,run,snapshot,heap,keyed,state,backend,integer,backend,snapshot,682375462378l,2,stream,factory,checkpoint,options,for,checkpoint,with,default,location,shared,state,registry,backend,dispose,try,restore,keyed,backend,int,serializer,instance,snapshot,new,dummy,environment,new,artificial,cnfexception,throwing,class,loader,get,class,get,class,loader,collections,singleton,string,serializer,class,get,name,fail,the,keyed,state,restore,should,have,failed,if,the,previous,state,serializer,could,not,be,loaded,catch,exception,expected,assert,assert,true,exception,utils,find,throwable,expected,class,not,found,exception,class,is,present
