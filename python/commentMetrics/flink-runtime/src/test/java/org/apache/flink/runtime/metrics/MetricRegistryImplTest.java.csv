# id;timestamp;commentText;codeText;commentWords;codeWords
MetricRegistryImplTest -> @Test 	public void testScopeConfig();1509547920;Verifies that the scope configuration is properly extracted.;@Test_	public void testScopeConfig() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.SCOPE_NAMING_TM, "A")__		config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B")__		config.setString(MetricOptions.SCOPE_NAMING_TASK, "C")__		config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D")___		ScopeFormats scopeConfig = ScopeFormats.fromConfig(config)___		assertEquals("A", scopeConfig.getTaskManagerFormat().format())__		assertEquals("B", scopeConfig.getTaskManagerJobFormat().format())__		assertEquals("C", scopeConfig.getTaskFormat().format())__		assertEquals("D", scopeConfig.getOperatorFormat().format())__	};verifies,that,the,scope,configuration,is,properly,extracted;test,public,void,test,scope,config,configuration,config,new,configuration,config,set,string,metric,options,a,config,set,string,metric,options,b,config,set,string,metric,options,c,config,set,string,metric,options,d,scope,formats,scope,config,scope,formats,from,config,config,assert,equals,a,scope,config,get,task,manager,format,format,assert,equals,b,scope,config,get,task,manager,job,format,format,assert,equals,c,scope,config,get,task,format,format,assert,equals,d,scope,config,get,operator,format,format
MetricRegistryImplTest -> @Test 	public void testScopeConfig();1513102155;Verifies that the scope configuration is properly extracted.;@Test_	public void testScopeConfig() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.SCOPE_NAMING_TM, "A")__		config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B")__		config.setString(MetricOptions.SCOPE_NAMING_TASK, "C")__		config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D")___		ScopeFormats scopeConfig = ScopeFormats.fromConfig(config)___		assertEquals("A", scopeConfig.getTaskManagerFormat().format())__		assertEquals("B", scopeConfig.getTaskManagerJobFormat().format())__		assertEquals("C", scopeConfig.getTaskFormat().format())__		assertEquals("D", scopeConfig.getOperatorFormat().format())__	};verifies,that,the,scope,configuration,is,properly,extracted;test,public,void,test,scope,config,configuration,config,new,configuration,config,set,string,metric,options,a,config,set,string,metric,options,b,config,set,string,metric,options,c,config,set,string,metric,options,d,scope,formats,scope,config,scope,formats,from,config,config,assert,equals,a,scope,config,get,task,manager,format,format,assert,equals,b,scope,config,get,task,manager,job,format,format,assert,equals,c,scope,config,get,task,format,format,assert,equals,d,scope,config,get,operator,format,format
MetricRegistryImplTest -> @Test 	public void testScopeConfig();1519406529;Verifies that the scope configuration is properly extracted.;@Test_	public void testScopeConfig() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.SCOPE_NAMING_TM, "A")__		config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B")__		config.setString(MetricOptions.SCOPE_NAMING_TASK, "C")__		config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D")___		ScopeFormats scopeConfig = ScopeFormats.fromConfig(config)___		assertEquals("A", scopeConfig.getTaskManagerFormat().format())__		assertEquals("B", scopeConfig.getTaskManagerJobFormat().format())__		assertEquals("C", scopeConfig.getTaskFormat().format())__		assertEquals("D", scopeConfig.getOperatorFormat().format())__	};verifies,that,the,scope,configuration,is,properly,extracted;test,public,void,test,scope,config,configuration,config,new,configuration,config,set,string,metric,options,a,config,set,string,metric,options,b,config,set,string,metric,options,c,config,set,string,metric,options,d,scope,formats,scope,config,scope,formats,from,config,config,assert,equals,a,scope,config,get,task,manager,format,format,assert,equals,b,scope,config,get,task,manager,job,format,format,assert,equals,c,scope,config,get,task,format,format,assert,equals,d,scope,config,get,operator,format,format
MetricRegistryImplTest -> @Test 	public void testScopeConfig();1549787706;Verifies that the scope configuration is properly extracted.;@Test_	public void testScopeConfig() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.SCOPE_NAMING_TM, "A")__		config.setString(MetricOptions.SCOPE_NAMING_TM_JOB, "B")__		config.setString(MetricOptions.SCOPE_NAMING_TASK, "C")__		config.setString(MetricOptions.SCOPE_NAMING_OPERATOR, "D")___		ScopeFormats scopeConfig = ScopeFormats.fromConfig(config)___		assertEquals("A", scopeConfig.getTaskManagerFormat().format())__		assertEquals("B", scopeConfig.getTaskManagerJobFormat().format())__		assertEquals("C", scopeConfig.getTaskFormat().format())__		assertEquals("D", scopeConfig.getOperatorFormat().format())__	};verifies,that,the,scope,configuration,is,properly,extracted;test,public,void,test,scope,config,configuration,config,new,configuration,config,set,string,metric,options,a,config,set,string,metric,options,b,config,set,string,metric,options,c,config,set,string,metric,options,d,scope,formats,scope,config,scope,formats,from,config,config,assert,equals,a,scope,config,get,task,manager,format,format,assert,equals,b,scope,config,get,task,manager,job,format,format,assert,equals,c,scope,config,get,task,format,format,assert,equals,d,scope,config,get,operator,format,format
MetricRegistryImplTest -> @Test 	public void testMultipleReporterInstantiation() throws Exception;1519406529;Verifies that multiple reporters are instantiated correctly.;@Test_	public void testMultipleReporterInstantiation() throws Exception {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter11.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter12.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter13.class.getName())___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		assertTrue(metricRegistry.getReporters().size() == 3)___		Assert.assertTrue(TestReporter11.wasOpened)__		Assert.assertTrue(TestReporter12.wasOpened)__		Assert.assertTrue(TestReporter13.wasOpened)___		metricRegistry.shutdown().get()__	};verifies,that,multiple,reporters,are,instantiated,correctly;test,public,void,test,multiple,reporter,instantiation,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter11,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter12,class,get,name,config,set,string,config,constants,test3,config,constants,test,reporter13,class,get,name,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,3,assert,assert,true,test,reporter11,was,opened,assert,assert,true,test,reporter12,was,opened,assert,assert,true,test,reporter13,was,opened,metric,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testMultipleReporterInstantiation() throws Exception;1549787706;Verifies that multiple reporters are instantiated correctly.;@Test_	public void testMultipleReporterInstantiation() throws Exception {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter11.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter12.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter13.class.getName())___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		assertTrue(metricRegistry.getReporters().size() == 3)___		Assert.assertTrue(TestReporter11.wasOpened)__		Assert.assertTrue(TestReporter12.wasOpened)__		Assert.assertTrue(TestReporter13.wasOpened)___		metricRegistry.shutdown().get()__	};verifies,that,multiple,reporters,are,instantiated,correctly;test,public,void,test,multiple,reporter,instantiation,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter11,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter12,class,get,name,config,set,string,config,constants,test3,config,constants,test,reporter13,class,get,name,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,3,assert,assert,true,test,reporter11,was,opened,assert,assert,true,test,reporter12,was,opened,assert,assert,true,test,reporter13,was,opened,metric,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testReporterNotifications();1509547920;Verifies that reporters are notified of added/removed metrics.;@Test_	public void testReporterNotifications() {_		Configuration config = new Configuration()__		config.setString(MetricOptions.REPORTERS_LIST, "test1,test2")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter6.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		TaskManagerMetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")__		root.counter("rootCounter")___		assertTrue(TestReporter6.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.addedMetricName)___		assertTrue(TestReporter7.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.addedMetricName)___		root.close()___		assertTrue(TestReporter6.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.removedMetricName)___		assertTrue(TestReporter7.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.removedMetricName)___		registry.shutdown()__	};verifies,that,reporters,are,notified,of,added,removed,metrics;test,public,void,test,reporter,notifications,configuration,config,new,configuration,config,set,string,metric,options,test1,test2,config,set,string,config,constants,test1,config,constants,test,reporter6,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter7,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,root,new,task,manager,metric,group,registry,host,id,root,counter,root,counter,assert,true,test,reporter6,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,added,metric,name,assert,true,test,reporter7,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,added,metric,name,root,close,assert,true,test,reporter6,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,removed,metric,name,assert,true,test,reporter7,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,removed,metric,name,registry,shutdown
MetricRegistryImplTest -> @Test 	public void testReporterNotifications();1513102155;Verifies that reporters are notified of added/removed metrics.;@Test_	public void testReporterNotifications() {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter6.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		TaskManagerMetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")__		root.counter("rootCounter")___		assertTrue(TestReporter6.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.addedMetricName)___		assertTrue(TestReporter7.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.addedMetricName)___		root.close()___		assertTrue(TestReporter6.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.removedMetricName)___		assertTrue(TestReporter7.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.removedMetricName)___		registry.shutdown()__	};verifies,that,reporters,are,notified,of,added,removed,metrics;test,public,void,test,reporter,notifications,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter6,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter7,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,root,new,task,manager,metric,group,registry,host,id,root,counter,root,counter,assert,true,test,reporter6,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,added,metric,name,assert,true,test,reporter7,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,added,metric,name,root,close,assert,true,test,reporter6,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,removed,metric,name,assert,true,test,reporter7,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,removed,metric,name,registry,shutdown
MetricRegistryImplTest -> @Test 	public void testQueryActorShutdown() throws Exception;1509547920;Tests that the query actor will be stopped when the MetricRegistry is shut down.;@Test_	public void testQueryActorShutdown() throws Exception {_		final FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration())___		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()___		registry.startQueryService(actorSystem, null)___		ActorRef queryServiceActor = registry.getQueryService()___		registry.shutdown()___		try {_			Await.result(actorSystem.actorSelection(queryServiceActor.path()).resolveOne(timeout), timeout)___			fail("The query actor should be terminated resulting in a ActorNotFound exception.")__		} catch (ActorNotFound e) {_			_		}_	};tests,that,the,query,actor,will,be,stopped,when,the,metric,registry,is,shut,down;test,public,void,test,query,actor,shutdown,throws,exception,final,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,default,metric,registry,configuration,final,actor,system,actor,system,akka,utils,create,default,actor,system,registry,start,query,service,actor,system,null,actor,ref,query,service,actor,registry,get,query,service,registry,shutdown,try,await,result,actor,system,actor,selection,query,service,actor,path,resolve,one,timeout,timeout,fail,the,query,actor,should,be,terminated,resulting,in,a,actor,not,found,exception,catch,actor,not,found,e
MetricRegistryImplTest -> @Test 	public void testQueryActorShutdown() throws Exception;1513102155;Tests that the query actor will be stopped when the MetricRegistry is shut down.;@Test_	public void testQueryActorShutdown() throws Exception {_		final FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration())___		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()___		registry.startQueryService(actorSystem, null)___		ActorRef queryServiceActor = registry.getQueryService()___		registry.shutdown()___		try {_			Await.result(actorSystem.actorSelection(queryServiceActor.path()).resolveOne(timeout), timeout)___			fail("The query actor should be terminated resulting in a ActorNotFound exception.")__		} catch (ActorNotFound e) {_			_		}_	};tests,that,the,query,actor,will,be,stopped,when,the,metric,registry,is,shut,down;test,public,void,test,query,actor,shutdown,throws,exception,final,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,default,metric,registry,configuration,final,actor,system,actor,system,akka,utils,create,default,actor,system,registry,start,query,service,actor,system,null,actor,ref,query,service,actor,registry,get,query,service,registry,shutdown,try,await,result,actor,system,actor,selection,query,service,actor,path,resolve,one,timeout,timeout,fail,the,query,actor,should,be,terminated,resulting,in,a,actor,not,found,exception,catch,actor,not,found,e
MetricRegistryImplTest -> @Test 	public void testQueryActorShutdown() throws Exception;1519406529;Tests that the query actor will be stopped when the MetricRegistry is shut down.;@Test_	public void testQueryActorShutdown() throws Exception {_		final FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration())___		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()___		registry.startQueryService(actorSystem, null)___		ActorRef queryServiceActor = registry.getQueryService()___		registry.shutdown().get()___		try {_			Await.result(actorSystem.actorSelection(queryServiceActor.path()).resolveOne(timeout), timeout)___			fail("The query actor should be terminated resulting in a ActorNotFound exception.")__		} catch (ActorNotFound e) {_			_		}_	};tests,that,the,query,actor,will,be,stopped,when,the,metric,registry,is,shut,down;test,public,void,test,query,actor,shutdown,throws,exception,final,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,default,metric,registry,configuration,final,actor,system,actor,system,akka,utils,create,default,actor,system,registry,start,query,service,actor,system,null,actor,ref,query,service,actor,registry,get,query,service,registry,shutdown,get,try,await,result,actor,system,actor,selection,query,service,actor,path,resolve,one,timeout,timeout,fail,the,query,actor,should,be,terminated,resulting,in,a,actor,not,found,exception,catch,actor,not,found,e
MetricRegistryImplTest -> @Test 	public void testQueryActorShutdown() throws Exception;1549787706;Tests that the query actor will be stopped when the MetricRegistry is shut down.;@Test_	public void testQueryActorShutdown() throws Exception {_		final FiniteDuration timeout = new FiniteDuration(10L, TimeUnit.SECONDS)___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.defaultMetricRegistryConfiguration())___		final ActorSystem actorSystem = AkkaUtils.createDefaultActorSystem()___		registry.startQueryService(actorSystem, null)___		ActorRef queryServiceActor = registry.getQueryService()___		registry.shutdown().get()___		try {_			Await.result(actorSystem.actorSelection(queryServiceActor.path()).resolveOne(timeout), timeout)___			fail("The query actor should be terminated resulting in a ActorNotFound exception.")__		} catch (ActorNotFound e) {_			_		}_	};tests,that,the,query,actor,will,be,stopped,when,the,metric,registry,is,shut,down;test,public,void,test,query,actor,shutdown,throws,exception,final,finite,duration,timeout,new,finite,duration,10l,time,unit,seconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,default,metric,registry,configuration,final,actor,system,actor,system,akka,utils,create,default,actor,system,registry,start,query,service,actor,system,null,actor,ref,query,service,actor,registry,get,query,service,registry,shutdown,get,try,await,result,actor,system,actor,selection,query,service,actor,path,resolve,one,timeout,timeout,fail,the,query,actor,should,be,terminated,resulting,in,a,actor,not,found,exception,catch,actor,not,found,e
MetricRegistryImplTest -> @Test 	public void testReporterNotifications() throws Exception;1519406529;Verifies that reporters are notified of added/removed metrics.;@Test_	public void testReporterNotifications() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter6.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		TaskManagerMetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")__		root.counter("rootCounter")___		assertTrue(TestReporter6.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.addedMetricName)___		assertTrue(TestReporter7.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.addedMetricName)___		root.close()___		assertTrue(TestReporter6.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.removedMetricName)___		assertTrue(TestReporter7.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.removedMetricName)___		registry.shutdown().get()__	};verifies,that,reporters,are,notified,of,added,removed,metrics;test,public,void,test,reporter,notifications,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter6,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter7,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,root,new,task,manager,metric,group,registry,host,id,root,counter,root,counter,assert,true,test,reporter6,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,added,metric,name,assert,true,test,reporter7,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,added,metric,name,root,close,assert,true,test,reporter6,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,removed,metric,name,assert,true,test,reporter7,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,removed,metric,name,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testReporterNotifications() throws Exception;1549787706;Verifies that reporters are notified of added/removed metrics.;@Test_	public void testReporterNotifications() throws Exception {_		Configuration config = new Configuration()__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter6.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter7.class.getName())___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		TaskManagerMetricGroup root = new TaskManagerMetricGroup(registry, "host", "id")__		root.counter("rootCounter")___		assertTrue(TestReporter6.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.addedMetricName)___		assertTrue(TestReporter7.addedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.addedMetricName)___		root.close()___		assertTrue(TestReporter6.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter6.removedMetricName)___		assertTrue(TestReporter7.removedMetric instanceof Counter)__		assertEquals("rootCounter", TestReporter7.removedMetricName)___		registry.shutdown().get()__	};verifies,that,reporters,are,notified,of,added,removed,metrics;test,public,void,test,reporter,notifications,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter6,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter7,class,get,name,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,task,manager,metric,group,root,new,task,manager,metric,group,registry,host,id,root,counter,root,counter,assert,true,test,reporter6,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,added,metric,name,assert,true,test,reporter7,added,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,added,metric,name,root,close,assert,true,test,reporter6,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter6,removed,metric,name,assert,true,test,reporter7,removed,metric,instanceof,counter,assert,equals,root,counter,test,reporter7,removed,metric,name,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testMultipleReporterInstantiation();1509547920;Verifies that multiple reporters are instantiated correctly.;@Test_	public void testMultipleReporterInstantiation() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.REPORTERS_LIST, "test1, test2,test3")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter11.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter12.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter13.class.getName())___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		assertTrue(metricRegistry.getReporters().size() == 3)___		Assert.assertTrue(TestReporter11.wasOpened)__		Assert.assertTrue(TestReporter12.wasOpened)__		Assert.assertTrue(TestReporter13.wasOpened)___		metricRegistry.shutdown()__	};verifies,that,multiple,reporters,are,instantiated,correctly;test,public,void,test,multiple,reporter,instantiation,configuration,config,new,configuration,config,set,string,metric,options,test1,test2,test3,config,set,string,config,constants,test1,config,constants,test,reporter11,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter12,class,get,name,config,set,string,config,constants,test3,config,constants,test,reporter13,class,get,name,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,3,assert,assert,true,test,reporter11,was,opened,assert,assert,true,test,reporter12,was,opened,assert,assert,true,test,reporter13,was,opened,metric,registry,shutdown
MetricRegistryImplTest -> @Test 	public void testMultipleReporterInstantiation();1513102155;Verifies that multiple reporters are instantiated correctly.;@Test_	public void testMultipleReporterInstantiation() {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test1." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter11.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test2." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter12.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test3." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter13.class.getName())___		MetricRegistryImpl metricRegistry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		assertTrue(metricRegistry.getReporters().size() == 3)___		Assert.assertTrue(TestReporter11.wasOpened)__		Assert.assertTrue(TestReporter12.wasOpened)__		Assert.assertTrue(TestReporter13.wasOpened)___		metricRegistry.shutdown()__	};verifies,that,multiple,reporters,are,instantiated,correctly;test,public,void,test,multiple,reporter,instantiation,configuration,config,new,configuration,config,set,string,config,constants,test1,config,constants,test,reporter11,class,get,name,config,set,string,config,constants,test2,config,constants,test,reporter12,class,get,name,config,set,string,config,constants,test3,config,constants,test,reporter13,class,get,name,metric,registry,impl,metric,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,assert,true,metric,registry,get,reporters,size,3,assert,assert,true,test,reporter11,was,opened,assert,assert,true,test,reporter12,was,opened,assert,assert,true,test,reporter13,was,opened,metric,registry,shutdown
MetricRegistryImplTest -> @Test 	public void testReporterArgumentForwarding();1509547920;Verifies that configured arguments are properly forwarded to the reporter.;@Test_	public void testReporterArgumentForwarding() {_		Configuration config = new Configuration()___		config.setString(MetricOptions.REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter2.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg2", "world")___		new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).shutdown()___		Assert.assertEquals("hello", TestReporter2.mc.getString("arg1", null))__		Assert.assertEquals("world", TestReporter2.mc.getString("arg2", null))__	};verifies,that,configured,arguments,are,properly,forwarded,to,the,reporter;test,public,void,test,reporter,argument,forwarding,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,test,reporter2,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,arg2,world,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,shutdown,assert,assert,equals,hello,test,reporter2,mc,get,string,arg1,null,assert,assert,equals,world,test,reporter2,mc,get,string,arg2,null
MetricRegistryImplTest -> @Test 	public void testReporterArgumentForwarding();1513102155;Verifies that configured arguments are properly forwarded to the reporter.;@Test_	public void testReporterArgumentForwarding() {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter2.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg2", "world")___		new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config)).shutdown()___		Assert.assertEquals("hello", TestReporter2.mc.getString("arg1", null))__		Assert.assertEquals("world", TestReporter2.mc.getString("arg2", null))__	};verifies,that,configured,arguments,are,properly,forwarded,to,the,reporter;test,public,void,test,reporter,argument,forwarding,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,test,reporter2,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,arg2,world,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,shutdown,assert,assert,equals,hello,test,reporter2,mc,get,string,arg1,null,assert,assert,equals,world,test,reporter2,mc,get,string,arg2,null
MetricRegistryImplTest -> @Test 	public void testReporterScheduling() throws Exception;1519406529;Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.;@Test_	public void testReporterScheduling() throws Exception {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter3.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "50 MILLISECONDS")___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		long start = System.currentTimeMillis()___		_		TestReporter3.reportCount = 0___		for (int x = 0_ x < 10_ x++) {_			Thread.sleep(100)__			int reportCount = TestReporter3.reportCount__			long curT = System.currentTimeMillis()__			_			long maxAllowedReports = (curT - start) / 50 + 2__			Assert.assertTrue("Too many reports were triggered.", maxAllowedReports >= reportCount)__		}_		Assert.assertTrue("No report was triggered.", TestReporter3.reportCount > 0)___		registry.shutdown().get()__	};verifies,that,reporters,implementing,the,scheduled,interface,are,regularly,called,to,report,the,metrics;test,public,void,test,reporter,scheduling,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,test,reporter3,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,config,constants,50,milliseconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,long,start,system,current,time,millis,test,reporter3,report,count,0,for,int,x,0,x,10,x,thread,sleep,100,int,report,count,test,reporter3,report,count,long,cur,t,system,current,time,millis,long,max,allowed,reports,cur,t,start,50,2,assert,assert,true,too,many,reports,were,triggered,max,allowed,reports,report,count,assert,assert,true,no,report,was,triggered,test,reporter3,report,count,0,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testReporterScheduling() throws Exception;1549787706;Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.;@Test_	public void testReporterScheduling() throws Exception {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter3.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "50 MILLISECONDS")___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		long start = System.currentTimeMillis()___		_		TestReporter3.reportCount = 0___		for (int x = 0_ x < 10_ x++) {_			Thread.sleep(100)__			int reportCount = TestReporter3.reportCount__			long curT = System.currentTimeMillis()__			_			long maxAllowedReports = (curT - start) / 50 + 2__			Assert.assertTrue("Too many reports were triggered.", maxAllowedReports >= reportCount)__		}_		Assert.assertTrue("No report was triggered.", TestReporter3.reportCount > 0)___		registry.shutdown().get()__	};verifies,that,reporters,implementing,the,scheduled,interface,are,regularly,called,to,report,the,metrics;test,public,void,test,reporter,scheduling,throws,exception,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,test,reporter3,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,config,constants,50,milliseconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,long,start,system,current,time,millis,test,reporter3,report,count,0,for,int,x,0,x,10,x,thread,sleep,100,int,report,count,test,reporter3,report,count,long,cur,t,system,current,time,millis,long,max,allowed,reports,cur,t,start,50,2,assert,assert,true,too,many,reports,were,triggered,max,allowed,reports,report,count,assert,assert,true,no,report,was,triggered,test,reporter3,report,count,0,registry,shutdown,get
MetricRegistryImplTest -> @Test 	public void testReporterScheduling() throws InterruptedException;1509547920;Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.__@throws InterruptedException;@Test_	public void testReporterScheduling() throws InterruptedException {_		Configuration config = new Configuration()___		config.setString(MetricOptions.REPORTERS_LIST, "test")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter3.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "50 MILLISECONDS")___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		long start = System.currentTimeMillis()___		_		TestReporter3.reportCount = 0___		for (int x = 0_ x < 10_ x++) {_			Thread.sleep(100)__			int reportCount = TestReporter3.reportCount__			long curT = System.currentTimeMillis()__			_			long maxAllowedReports = (curT - start) / 50 + 2__			Assert.assertTrue("Too many reports were triggered.", maxAllowedReports >= reportCount)__		}_		Assert.assertTrue("No report was triggered.", TestReporter3.reportCount > 0)___		registry.shutdown()__	};verifies,that,reporters,implementing,the,scheduled,interface,are,regularly,called,to,report,the,metrics,throws,interrupted,exception;test,public,void,test,reporter,scheduling,throws,interrupted,exception,configuration,config,new,configuration,config,set,string,metric,options,test,config,set,string,config,constants,test,config,constants,test,reporter3,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,config,constants,50,milliseconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,long,start,system,current,time,millis,test,reporter3,report,count,0,for,int,x,0,x,10,x,thread,sleep,100,int,report,count,test,reporter3,report,count,long,cur,t,system,current,time,millis,long,max,allowed,reports,cur,t,start,50,2,assert,assert,true,too,many,reports,were,triggered,max,allowed,reports,report,count,assert,assert,true,no,report,was,triggered,test,reporter3,report,count,0,registry,shutdown
MetricRegistryImplTest -> @Test 	public void testReporterScheduling() throws InterruptedException;1513102155;Verifies that reporters implementing the Scheduled interface are regularly called to report the metrics.__@throws InterruptedException;@Test_	public void testReporterScheduling() throws InterruptedException {_		Configuration config = new Configuration()___		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, TestReporter3.class.getName())__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test.arg1", "hello")__		config.setString(ConfigConstants.METRICS_REPORTER_PREFIX + "test." + ConfigConstants.METRICS_REPORTER_INTERVAL_SUFFIX, "50 MILLISECONDS")___		MetricRegistryImpl registry = new MetricRegistryImpl(MetricRegistryConfiguration.fromConfiguration(config))___		long start = System.currentTimeMillis()___		_		TestReporter3.reportCount = 0___		for (int x = 0_ x < 10_ x++) {_			Thread.sleep(100)__			int reportCount = TestReporter3.reportCount__			long curT = System.currentTimeMillis()__			_			long maxAllowedReports = (curT - start) / 50 + 2__			Assert.assertTrue("Too many reports were triggered.", maxAllowedReports >= reportCount)__		}_		Assert.assertTrue("No report was triggered.", TestReporter3.reportCount > 0)___		registry.shutdown()__	};verifies,that,reporters,implementing,the,scheduled,interface,are,regularly,called,to,report,the,metrics,throws,interrupted,exception;test,public,void,test,reporter,scheduling,throws,interrupted,exception,configuration,config,new,configuration,config,set,string,config,constants,test,config,constants,test,reporter3,class,get,name,config,set,string,config,constants,test,arg1,hello,config,set,string,config,constants,test,config,constants,50,milliseconds,metric,registry,impl,registry,new,metric,registry,impl,metric,registry,configuration,from,configuration,config,long,start,system,current,time,millis,test,reporter3,report,count,0,for,int,x,0,x,10,x,thread,sleep,100,int,report,count,test,reporter3,report,count,long,cur,t,system,current,time,millis,long,max,allowed,reports,cur,t,start,50,2,assert,assert,true,too,many,reports,were,triggered,max,allowed,reports,report,count,assert,assert,true,no,report,was,triggered,test,reporter3,report,count,0,registry,shutdown
