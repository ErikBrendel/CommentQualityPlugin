# id;timestamp;commentText;codeText;commentWords;codeWords
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1517914184;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState<>())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState<>())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1522337739;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1522681180;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1539149027;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1548755874;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testKvStateRegistryListenerNotification();1550652777;Tests that {@link KvStateRegistryListener} only receive the notifications which_are destined for them.;@Test_	public void testKvStateRegistryListenerNotification() {_		final JobID jobId1 = new JobID()__		final JobID jobId2 = new JobID()___		final KvStateRegistry kvStateRegistry = new KvStateRegistry()___		final ArrayDeque<JobID> registeredNotifications1 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications1 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener1 = new TestingKvStateRegistryListener(_			registeredNotifications1,_			deregisteredNotifications1)___		final ArrayDeque<JobID> registeredNotifications2 = new ArrayDeque<>(2)__		final ArrayDeque<JobID> deregisteredNotifications2 = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener listener2 = new TestingKvStateRegistryListener(_			registeredNotifications2,_			deregisteredNotifications2)___		kvStateRegistry.registerListener(jobId1, listener1)__		kvStateRegistry.registerListener(jobId2, listener2)___		final JobVertexID jobVertexId = new JobVertexID()__		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "foobar"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(registeredNotifications1.poll(), equalTo(jobId1))__		assertThat(registeredNotifications2.isEmpty(), is(true))___		final JobVertexID jobVertexId2 = new JobVertexID()__		final KeyGroupRange keyGroupRange2 = new KeyGroupRange(0, 1)__		final String registrationName2 = "barfoo"__		final KvStateID kvStateID2 = kvStateRegistry.registerKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			new DummyKvState())___		assertThat(registeredNotifications2.poll(), equalTo(jobId2))__		assertThat(registeredNotifications1.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId1,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(deregisteredNotifications1.poll(), equalTo(jobId1))__		assertThat(deregisteredNotifications2.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId2,_			jobVertexId2,_			keyGroupRange2,_			registrationName2,_			kvStateID2)___		assertThat(deregisteredNotifications2.poll(), equalTo(jobId2))__		assertThat(deregisteredNotifications1.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,only,receive,the,notifications,which,are,destined,for,them;test,public,void,test,kv,state,registry,listener,notification,final,job,id,job,id1,new,job,id,final,job,id,job,id2,new,job,id,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,registered,notifications1,new,array,deque,2,final,array,deque,job,id,deregistered,notifications1,new,array,deque,2,final,testing,kv,state,registry,listener,listener1,new,testing,kv,state,registry,listener,registered,notifications1,deregistered,notifications1,final,array,deque,job,id,registered,notifications2,new,array,deque,2,final,array,deque,job,id,deregistered,notifications2,new,array,deque,2,final,testing,kv,state,registry,listener,listener2,new,testing,kv,state,registry,listener,registered,notifications2,deregistered,notifications2,kv,state,registry,register,listener,job,id1,listener1,kv,state,registry,register,listener,job,id2,listener2,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,foobar,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,registered,notifications1,poll,equal,to,job,id1,assert,that,registered,notifications2,is,empty,is,true,final,job,vertex,id,job,vertex,id2,new,job,vertex,id,final,key,group,range,key,group,range2,new,key,group,range,0,1,final,string,registration,name2,barfoo,final,kv,state,id,kv,state,id2,kv,state,registry,register,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,new,dummy,kv,state,assert,that,registered,notifications2,poll,equal,to,job,id2,assert,that,registered,notifications1,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id1,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,deregistered,notifications1,poll,equal,to,job,id1,assert,that,deregistered,notifications2,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id2,job,vertex,id2,key,group,range2,registration,name2,kv,state,id2,assert,that,deregistered,notifications2,poll,equal,to,job,id2,assert,that,deregistered,notifications1,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testPreFlip6CodePathPreference();1517914184;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testPreFlip6CodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,pre,flip6code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testPreFlip6CodePathPreference();1522337739;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testPreFlip6CodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,pre,flip6code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testLegacyCodePathPreference();1522681180;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testLegacyCodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,legacy,code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testLegacyCodePathPreference();1539149027;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testLegacyCodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,legacy,code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testLegacyCodePathPreference();1548755874;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testLegacyCodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,legacy,code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
KvStateRegistryTest -> @Test 	public void testLegacyCodePathPreference();1550652777;Tests that {@link KvStateRegistryListener} registered under {@link HighAvailabilityServices#DEFAULT_JOB_ID}_will be used for all notifications.;@Test_	public void testLegacyCodePathPreference() {_		final KvStateRegistry kvStateRegistry = new KvStateRegistry()__		final ArrayDeque<JobID> stateRegistrationNotifications = new ArrayDeque<>(2)__		final ArrayDeque<JobID> stateDeregistrationNotifications = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener testingListener = new TestingKvStateRegistryListener(_			stateRegistrationNotifications,_			stateDeregistrationNotifications)___		final ArrayDeque<JobID> anotherQueue = new ArrayDeque<>(2)__		final TestingKvStateRegistryListener anotherListener = new TestingKvStateRegistryListener(_			anotherQueue,_			anotherQueue)___		final JobID jobId = new JobID()___		kvStateRegistry.registerListener(HighAvailabilityServices.DEFAULT_JOB_ID, testingListener)__		kvStateRegistry.registerListener(jobId, anotherListener)___		final JobVertexID jobVertexId = new JobVertexID()___		final KeyGroupRange keyGroupRange = new KeyGroupRange(0, 1)__		final String registrationName = "registrationName"__		final KvStateID kvStateID = kvStateRegistry.registerKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			new DummyKvState())___		assertThat(stateRegistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))___		kvStateRegistry.unregisterKvState(_			jobId,_			jobVertexId,_			keyGroupRange,_			registrationName,_			kvStateID)___		assertThat(stateDeregistrationNotifications.poll(), equalTo(jobId))__		_		assertThat(anotherQueue.isEmpty(), is(true))__	};tests,that,link,kv,state,registry,listener,registered,under,link,high,availability,services,will,be,used,for,all,notifications;test,public,void,test,legacy,code,path,preference,final,kv,state,registry,kv,state,registry,new,kv,state,registry,final,array,deque,job,id,state,registration,notifications,new,array,deque,2,final,array,deque,job,id,state,deregistration,notifications,new,array,deque,2,final,testing,kv,state,registry,listener,testing,listener,new,testing,kv,state,registry,listener,state,registration,notifications,state,deregistration,notifications,final,array,deque,job,id,another,queue,new,array,deque,2,final,testing,kv,state,registry,listener,another,listener,new,testing,kv,state,registry,listener,another,queue,another,queue,final,job,id,job,id,new,job,id,kv,state,registry,register,listener,high,availability,services,testing,listener,kv,state,registry,register,listener,job,id,another,listener,final,job,vertex,id,job,vertex,id,new,job,vertex,id,final,key,group,range,key,group,range,new,key,group,range,0,1,final,string,registration,name,registration,name,final,kv,state,id,kv,state,id,kv,state,registry,register,kv,state,job,id,job,vertex,id,key,group,range,registration,name,new,dummy,kv,state,assert,that,state,registration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true,kv,state,registry,unregister,kv,state,job,id,job,vertex,id,key,group,range,registration,name,kv,state,id,assert,that,state,deregistration,notifications,poll,equal,to,job,id,assert,that,another,queue,is,empty,is,true
