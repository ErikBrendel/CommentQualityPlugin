# id;timestamp;commentText;codeText;commentWords;codeWords
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1482522858;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1482522861;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1482522861;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1482522862;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1482522862;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testRequestSlotWithFreeSlot();1489060856;Tests that there are some free slots when we request, and the request is fulfilled immediately;@Test_	public void testRequestSlotWithFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)__		assertEquals(1, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertEquals(0, slotManager.getAllocatedContainers().size())__	};tests,that,there,are,some,free,slots,when,we,request,and,the,request,is,fulfilled,immediately;test,public,void,test,request,slot,with,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,assert,equals,1,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,equals,0,slot,manager,get,allocated,containers,size
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1493386068;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1493386106;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1493386106;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1501760738;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1504525441;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1506417942;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.isAllocated())__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,is,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1508576514;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1508597556;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1508597556;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1508743918;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1510063665;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1510063666;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1515177485;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1515481550;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1517241957;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1521804757;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1522681180;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1525452496;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1526387042;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1526494919;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1527173115;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1530472204;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1530472204;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1537281140;Tests that freeing a slot will correctly reset the slot and mark it as a free slot;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1537281162;Tests that freeing a slot will correctly reset the slot and mark it as a free slot.;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1538127492;Tests that freeing a slot will correctly reset the slot and mark it as a free slot.;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFreeSlot() throws Exception;1538127495;Tests that freeing a slot will correctly reset the slot and mark it as a free slot.;@Test_	public void testFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			_			slotManager.freeSlot(slotId, new AllocationID())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())__		}_	};tests,that,freeing,a,slot,will,correctly,reset,the,slot,and,mark,it,as,a,free,slot;test,public,void,test,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,executor,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,new,allocation,id,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1493386068;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1493386106;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1493386106;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1501760738;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1504525441;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1506417942;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1508576514;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1508597556;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1508597556;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1508743918;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1510063665;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1510063666;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1515177485;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1515481550;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1517241957;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1521804757;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1522681180;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1525452496;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1526387042;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1526494919;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1527173115;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1530472204;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1530472204;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1537281140;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1537281162;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1538127492;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception;1538127495;Tests that if we have received a slot report with some allocated slots, then we don't accept_slot requests with allocated allocation ids.;@Test_	public void testDuplicatePendingSlotRequestAfterSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile, jobId, allocationId)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertFalse(slotManager.registerSlotRequest(slotRequest))__		}_	};tests,that,if,we,have,received,a,slot,report,with,some,allocated,slots,then,we,don,t,accept,slot,requests,with,allocated,allocation,ids;test,public,void,test,duplicate,pending,slot,request,after,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,job,id,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,false,slot,manager,register,slot,request,slot,request
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1493386068;Tests that slots are updated with respect to the latest incoming slot report. This means that_slot for which not report has been received will be removed and those for which a report was_received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotID slotId3 = new SlotID(resourceId, 2)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)__		final SlotStatus slotStatus3 = new SlotStatus(slotId3, resourceProfile)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus3))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNull(slotManager.getSlot(slotId1))___			assertNotNull(slotManager.getSlot(slotId3))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slot,for,which,not,report,has,been,received,will,be,removed,and,those,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,id,slot,id3,new,slot,id,resource,id,2,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,status,slot,status3,new,slot,status,slot,id3,resource,profile,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status3,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id3,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1493386106;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.isFree())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,is,free,assert,true,slot2,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1493386106;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.isFree())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,is,free,assert,true,slot2,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1501760738;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.isFree())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,is,free,assert,true,slot2,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1504525441;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.isFree())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,is,free,assert,true,slot2,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1506417942;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.isFree())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			_			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,is,free,assert,true,slot2,is,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1508576514;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1508597556;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1508597556;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1508743918;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1510063665;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1510063666;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1515177485;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1515481550;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1517241957;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1521804757;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1522681180;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1525452496;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1526387042;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1526494919;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1527173115;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1530472204;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1530472204;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1537281140;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)____		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1537281162;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1538127492;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testUpdateSlotReport() throws Exception;1538127495;Tests that slots are updated with respect to the latest incoming slot report. This means that_slots for which a report was received are updated accordingly.;@Test_	public void testUpdateSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)___		final SlotStatus newSlotStatus2 = new SlotStatus(slotId2, resourceProfile, jobId, allocationId)___		final SlotReport slotReport1 = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))__		final SlotReport slotReport2 = new SlotReport(Arrays.asList(newSlotStatus2, slotStatus1))___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			slotManager.registerTaskManager(taskManagerConnection, slotReport1)___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertTrue(slot1.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), slotReport2))___			assertTrue(2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))___			_			assertEquals(allocationId, slotManager.getSlot(slotId2).getAllocationId())__		}_	};tests,that,slots,are,updated,with,respect,to,the,latest,incoming,slot,report,this,means,that,slots,for,which,a,report,was,received,are,updated,accordingly;test,public,void,test,update,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,status,new,slot,status2,new,slot,status,slot,id2,resource,profile,job,id,allocation,id,final,slot,report,slot,report1,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,report,slot,report2,new,slot,report,arrays,as,list,new,slot,status2,slot,status1,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,slot,manager,register,task,manager,task,manager,connection,slot,report1,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,2,slot,manager,get,number,registered,slots,assert,true,slot1,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,report,slot,status,task,manager,connection,get,instance,id,slot,report2,assert,true,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2,assert,equals,allocation,id,slot,manager,get,slot,slot,id2,get,allocation,id
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1493386068;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1493386106;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1493386106;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1501760738;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1504525441;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1506417942;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1508576514;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1508597556;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1508597556;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1508743918;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1510063665;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1510063666;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1515177485;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1515481550;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1517241957;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1521804757;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1522681180;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1525452496;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1526387042;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1526494919;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1527173115;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1530472204;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1530472204;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1537281140;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1537281162;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1538127492;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception;1538127495;Tests that duplicate slot requests (requests with an already registered allocation id) are_also detected after a pending slot request has been fulfilled but not yet freed.;@Test_	public void testDuplicatePendingSlotRequestAfterSuccessfulAllocation() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final AtomicInteger allocateResourceCalls = new AtomicInteger(0)__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(resourceProfile -> allocateResourceCalls.incrementAndGet())_			.build()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile1)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		assertThat(allocateResourceCalls.get(), is(0))__	};tests,that,duplicate,slot,requests,requests,with,an,already,registered,allocation,id,are,also,detected,after,a,pending,slot,request,has,been,fulfilled,but,not,yet,freed;test,public,void,test,duplicate,pending,slot,request,after,successful,allocation,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,atomic,integer,allocate,resource,calls,new,atomic,integer,0,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,allocate,resource,calls,increment,and,get,build,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile1,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,false,slot,manager,register,slot,request,slot,request2,assert,that,allocate,resource,calls,get,is,0
SlotManagerTest -> @Test 	public void testExistingEmptySlotAdjustedToInUse();1482522858;Tests that we had a free slot, and it's reported in-use by TaskManager;@Test_	public void testExistingEmptySlotAdjustedToInUse() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorGateway)___		ResourceSlot slot = new ResourceSlot(slotID, DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), DEFAULT_TESTING_PROFILE,_			new JobID(), new AllocationID())__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))__	};tests,that,we,had,a,free,slot,and,it,s,reported,in,use,by,task,manager;test,public,void,test,existing,empty,slot,adjusted,to,in,use,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,resource,slot,slot,new,resource,slot,slot,id,task,executor,gateway,slot,manager,add,free,slot,slot,slot,status,slot,status,new,slot,status,slot,get,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id
SlotManagerTest -> @Test 	public void testExistingEmptySlotAdjustedToInUse();1482522861;Tests that we had a free slot, and it's reported in-use by TaskManager;@Test_	public void testExistingEmptySlotAdjustedToInUse() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorGateway)___		ResourceSlot slot = new ResourceSlot(slotID, DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), DEFAULT_TESTING_PROFILE,_			new JobID(), new AllocationID())__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))__	};tests,that,we,had,a,free,slot,and,it,s,reported,in,use,by,task,manager;test,public,void,test,existing,empty,slot,adjusted,to,in,use,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,resource,slot,slot,new,resource,slot,slot,id,task,executor,gateway,slot,manager,add,free,slot,slot,slot,status,slot,status,new,slot,status,slot,get,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1482522858;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorGateway)___		ResourceSlot slot = new ResourceSlot(slotID, DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), slot.getResourceProfile())__		slotManager.updateSlotStatus(slotStatus)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,resource,slot,slot,new,resource,slot,slot,id,task,executor,gateway,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,status,slot,status,new,slot,status,slot,get,slot,id,slot,get,resource,profile,slot,manager,update,slot,status,slot,status,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1482522861;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorGateway)___		ResourceSlot slot = new ResourceSlot(slotID, DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), slot.getResourceProfile())__		slotManager.updateSlotStatus(slotStatus)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,resource,slot,slot,new,resource,slot,slot,id,task,executor,gateway,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,status,slot,status,new,slot,status,slot,get,slot,id,slot,get,resource,profile,slot,manager,update,slot,status,slot,status,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1482522861;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request_This can only occur after reconnect of the TaskExecutor.;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		SlotStatus slot = new SlotStatus(slotID, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(slot)__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slotID)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request,this,can,only,occur,after,reconnect,of,the,task,executor;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,status,slot,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,slot,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1482522862;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request_This can only occur after reconnect of the TaskExecutor.;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		SlotStatus slot = new SlotStatus(slotID, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(slot)__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slotID)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request,this,can,only,occur,after,reconnect,of,the,task,executor;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,status,slot,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,slot,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1482522862;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request_This can only occur after reconnect of the TaskExecutor.;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		SlotStatus slot = new SlotStatus(slotID, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(slot)__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slotID)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request,this,can,only,occur,after,reconnect,of,the,task,executor;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,status,slot,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,slot,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther();1489060856;Tests that we did some allocation but failed / rejected by TaskManager, and slot is occupied by another request_This can only occur after reconnect of the TaskExecutor.;@Test_	public void testSlotAllocationFailedAtTaskManagerOccupiedByOther() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final SlotID slotID = SlotID.generate()__		SlotStatus slot = new SlotStatus(slotID, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(slot)__		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		slotManager.registerTaskExecutor(slotID.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.handleSlotRequestFailedAtTaskManager(request, slotID)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,and,slot,is,occupied,by,another,request,this,can,only,occur,after,reconnect,of,the,task,executor;test,public,void,test,slot,allocation,failed,at,task,manager,occupied,by,other,testing,slot,manager,slot,manager,new,testing,slot,manager,final,slot,id,slot,id,slot,id,generate,slot,status,slot,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,slot,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testRequestNewResources() throws Exception;1538127492;Tests that we only request new resources/containers once we have assigned_all pending task manager slots.;@Test_	public void testRequestNewResources() throws Exception {_		final int numberSlots = 2__		final AtomicInteger resourceRequests = new AtomicInteger(0)__		final TestingResourceActions testingResourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(_				convert(ignored -> {_					resourceRequests.incrementAndGet()__					return numberSlots__				}))_			.build()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			testingResourceActions)) {__			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(1))___			_			_			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(1))___			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(2))___			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(2))__		}_	};tests,that,we,only,request,new,resources,containers,once,we,have,assigned,all,pending,task,manager,slots;test,public,void,test,request,new,resources,throws,exception,final,int,number,slots,2,final,atomic,integer,resource,requests,new,atomic,integer,0,final,testing,resource,actions,testing,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,ignored,resource,requests,increment,and,get,return,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,testing,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,1,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,1,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,2,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,2
SlotManagerTest -> @Test 	public void testRequestNewResources() throws Exception;1538127495;Tests that we only request new resources/containers once we have assigned_all pending task manager slots.;@Test_	public void testRequestNewResources() throws Exception {_		final int numberSlots = 2__		final AtomicInteger resourceRequests = new AtomicInteger(0)__		final TestingResourceActions testingResourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(_				convert(ignored -> {_					resourceRequests.incrementAndGet()__					return numberSlots__				}))_			.build()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			testingResourceActions)) {__			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(1))___			_			_			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(1))___			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(2))___			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))__			assertThat(resourceRequests.get(), is(2))__		}_	};tests,that,we,only,request,new,resources,containers,once,we,have,assigned,all,pending,task,manager,slots;test,public,void,test,request,new,resources,throws,exception,final,int,number,slots,2,final,atomic,integer,resource,requests,new,atomic,integer,0,final,testing,resource,actions,testing,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,ignored,resource,requests,increment,and,get,return,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,testing,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,1,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,1,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,2,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,resource,requests,get,is,2
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1493386068;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1493386106;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1493386106;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1501760738;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1504525441;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1506417942;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.isFree())__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,is,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1508576514;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1508597556;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1508597556;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1508743918;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1510063665;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1510063666;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1515177485;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1515481550;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1517241957;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1521804757;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1522681180;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1525452496;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1526387042;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1526494919;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1527173115;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1530472204;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1530472204;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1537281140;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1537281162;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1538127492;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		verify(resourceManagerActions, never()).allocateResource(any(ResourceProfile.class))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,verify,resource,manager,actions,never,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception;1538127495;Tests that an already registered allocation id can be reused after the initial slot request_has been freed.;@Test_	public void testAcceptingDuplicateSlotRequestAfterAllocationRelease() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final AtomicInteger allocateResourceCalls = new AtomicInteger(0)__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(resourceProfile -> allocateResourceCalls.incrementAndGet())_			.build()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()___		final ResourceID resourceID = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final SlotStatus slotStatus = new SlotStatus(slotId, new ResourceProfile(2.0, 2))__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)__			assertTrue(slotManager.registerSlotRequest(slotRequest1))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			_			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__			assertNull(slot.getAllocationId())___			assertTrue(slotManager.registerSlotRequest(slotRequest2))___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}__		_		_		assertThat(allocateResourceCalls.get(), is(0))__	};tests,that,an,already,registered,allocation,id,can,be,reused,after,the,initial,slot,request,has,been,freed;test,public,void,test,accepting,duplicate,slot,request,after,allocation,release,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,atomic,integer,allocate,resource,calls,new,atomic,integer,0,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,allocate,resource,calls,increment,and,get,build,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,new,resource,profile,2,0,2,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,slot,manager,register,slot,request,slot,request1,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,get,state,task,manager,slot,state,free,assert,null,slot,get,allocation,id,assert,true,slot,manager,register,slot,request,slot,request2,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id,assert,that,allocate,resource,calls,get,is,0
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1493386068;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1493386106;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1493386106;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1501760738;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1504525441;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1506417942;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1508576514;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1508597556;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1508597556;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1508743918;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1510063665;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1510063666;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1515177485;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1515481550;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1517241957;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1521804757;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1522681180;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1525452496;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1526387042;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1526494919;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1527173115;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1530472204;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1530472204;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1537281140;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1537281162;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1538127492;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)__		doThrow(new ResourceManagerException("Test exception")).when(resourceManagerActions).allocateResource(any(ResourceProfile.class))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,do,throw,new,resource,manager,exception,test,exception,when,resource,manager,actions,allocate,resource,any,resource,profile,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testSlotRequestWithResourceAllocationFailure() throws Exception;1538127495;Tests that the slot request fails if we cannot allocate more resources.;@Test_	public void testSlotRequestWithResourceAllocationFailure() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(value -> {_				throw new ResourceManagerException("Test exception")__			})_			.build()___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			fail("The slot request should have failed with a ResourceManagerException.")___		} catch (ResourceManagerException e) {_			_		}_	};tests,that,the,slot,request,fails,if,we,cannot,allocate,more,resources;test,public,void,test,slot,request,with,resource,allocation,failure,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,function,value,throw,new,resource,manager,exception,test,exception,build,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,fail,the,slot,request,should,have,failed,with,a,resource,manager,exception,catch,resource,manager,exception,e
SlotManagerTest -> @Test 	public void testExistingEmptySlotUpdateStatus();1482522858;Tests that we had a free slot, and it's confirmed by SlotReport;@Test_	public void testExistingEmptySlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,had,a,free,slot,and,it,s,confirmed,by,slot,report;test,public,void,test,existing,empty,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,gateway,slot,manager,add,free,slot,slot,slot,status,slot,status,new,slot,status,slot,get,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testExistingEmptySlotUpdateStatus();1482522861;Tests that we had a free slot, and it's confirmed by SlotReport;@Test_	public void testExistingEmptySlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotStatus slotStatus = new SlotStatus(slot.getSlotId(), DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,had,a,free,slot,and,it,s,confirmed,by,slot,report;test,public,void,test,existing,empty,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,gateway,slot,manager,add,free,slot,slot,slot,status,slot,status,new,slot,status,slot,get,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1493386068;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1493386106;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1493386106;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1501760738;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1504525441;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1506417942;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1508576514;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1508597556;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1508597556;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1508743918;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1510063665;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1510063666;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1515177485;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1515481550;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1517241957;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1521804757;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1522681180;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1525452496;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1526387042;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1526494919;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1527173115;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1530472204;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1530472204;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1537281140;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1537281162;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1538127492;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testReceivingUnknownSlotReport() throws Exception;1538127495;Tests that the slot manager ignores slot reports of unknown origin (not registered_task managers).;@Test_	public void testReceivingUnknownSlotReport() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final InstanceID unknownInstanceID = new InstanceID()__		final SlotID unknownSlotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile unknownResourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus unknownSlotStatus = new SlotStatus(unknownSlotId, unknownResourceProfile)__		final SlotReport unknownSlotReport = new SlotReport(unknownSlotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			assertTrue(0 == slotManager.getNumberRegisteredSlots())___			_			assertFalse(slotManager.reportSlotStatus(unknownInstanceID, unknownSlotReport))___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__		}_	};tests,that,the,slot,manager,ignores,slot,reports,of,unknown,origin,not,registered,task,managers;test,public,void,test,receiving,unknown,slot,report,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,instance,id,unknown,instance,id,new,instance,id,final,slot,id,unknown,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,unknown,resource,profile,new,resource,profile,1,0,1,final,slot,status,unknown,slot,status,new,slot,status,unknown,slot,id,unknown,resource,profile,final,slot,report,unknown,slot,report,new,slot,report,unknown,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,0,slot,manager,get,number,registered,slots,assert,false,slot,manager,report,slot,status,unknown,instance,id,unknown,slot,report,assert,true,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1493386068;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resourc_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			verify(mainThreadExecutor, timeout(allocationTimeout * 10L)).execute(runnableArgumentCaptor.capture())___			_			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))__		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resourc,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,timeout,allocation,timeout,10l,execute,runnable,argument,captor,capture,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1493386106;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resourc_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			verify(mainThreadExecutor, timeout(allocationTimeout * 10L)).execute(runnableArgumentCaptor.capture())___			_			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))__		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resourc,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,timeout,allocation,timeout,10l,execute,runnable,argument,captor,capture,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1493386106;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1501760738;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1504525441;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1506417942;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1508576514;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1508597556;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1508597556;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1508743918;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1510063665;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1510063666;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1515177485;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1515481550;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1517241957;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1521804757;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1522681180;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1525452496;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1526387042;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1526494919;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1527173115;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1530472204;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1530472204;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1537281140;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1537281162;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					try {_						assertTrue(slotManager.registerSlotRequest(slotRequest))__					} catch (Exception e) {_						atomicException.compareAndSet(null, e)__					}_				}_			})___			verify(resourceManagerActions, timeout(100L * allocationTimeout).times(1)).notifyAllocationFailure(_				eq(jobId),_				eq(allocationId),_				any(TimeoutException.class))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,new,runnable,override,public,void,run,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,verify,resource,manager,actions,timeout,100l,allocation,timeout,times,1,notify,allocation,failure,eq,job,id,eq,allocation,id,any,timeout,exception,class,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1538127492;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final CompletableFuture<Tuple2<JobID, AllocationID>> failedAllocationFuture = new CompletableFuture<>()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(tuple3 -> failedAllocationFuture.complete(Tuple2.of(tuple3.f0, tuple3.f1)))_			.build()__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(() -> {_				try {_					assertTrue(slotManager.registerSlotRequest(slotRequest))__				} catch (Exception e) {_					atomicException.compareAndSet(null, e)__				}_			})___			assertThat(failedAllocationFuture.get(), is(equalTo(Tuple2.of(jobId, allocationId))))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,completable,future,tuple2,job,id,allocation,id,failed,allocation,future,new,completable,future,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,failed,allocation,future,complete,tuple2,of,tuple3,f0,tuple3,f1,build,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,assert,that,failed,allocation,future,get,is,equal,to,tuple2,of,job,id,allocation,id,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testSlotRequestTimeout() throws Exception;1538127495;Tests that slot requests time out after the specified request timeout. If a slot request_times out, then the request is cancelled, removed from the slot manager and the resource_manager is notified about the failed allocation.;@Test_	public void testSlotRequestTimeout() throws Exception {_		final long allocationTimeout = 50L___		final CompletableFuture<Tuple2<JobID, AllocationID>> failedAllocationFuture = new CompletableFuture<>()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(tuple3 -> failedAllocationFuture.complete(Tuple2.of(tuple3.f0, tuple3.f1)))_			.build()__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(allocationTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			final AtomicReference<Exception> atomicException = new AtomicReference<>(null)___			mainThreadExecutor.execute(() -> {_				try {_					assertTrue(slotManager.registerSlotRequest(slotRequest))__				} catch (Exception e) {_					atomicException.compareAndSet(null, e)__				}_			})___			assertThat(failedAllocationFuture.get(), is(equalTo(Tuple2.of(jobId, allocationId))))___			if (atomicException.get() != null) {_				throw atomicException.get()__			}_		}_	};tests,that,slot,requests,time,out,after,the,specified,request,timeout,if,a,slot,request,times,out,then,the,request,is,cancelled,removed,from,the,slot,manager,and,the,resource,manager,is,notified,about,the,failed,allocation;test,public,void,test,slot,request,timeout,throws,exception,final,long,allocation,timeout,50l,final,completable,future,tuple2,job,id,allocation,id,failed,allocation,future,new,completable,future,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,failed,allocation,future,complete,tuple2,of,tuple3,f0,tuple3,f1,build,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,time,milliseconds,allocation,timeout,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,final,atomic,reference,exception,atomic,exception,new,atomic,reference,null,main,thread,executor,execute,try,assert,true,slot,manager,register,slot,request,slot,request,catch,exception,e,atomic,exception,compare,and,set,null,e,assert,that,failed,allocation,future,get,is,equal,to,tuple2,of,job,id,allocation,id,if,atomic,exception,get,null,throw,atomic,exception,get
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1517241957;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final ResourceID taskManagerId = ResourceID.generate()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,task,manager,id,resource,id,generate,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1521804757;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final ResourceID taskManagerId = ResourceID.generate()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,task,manager,id,resource,id,generate,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1522681180;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final ResourceID taskManagerId = ResourceID.generate()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,task,manager,id,resource,id,generate,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1525452496;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1526387042;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1526494919;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1527173115;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1530472204;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1530472204;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1537281140;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1537281162;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1538127492;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = new TestingResourceActionsBuilder().build()__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,new,testing,resource,actions,builder,build,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testReportAllocatedSlot() throws Exception;1538127495;Tests that free slots which are reported as allocated won't be considered for fulfilling_other pending slot requests.__<p>See: FLINK-8505;@Test_	public void testReportAllocatedSlot() throws Exception {_		final ResourceID taskManagerId = ResourceID.generate()__		final ResourceActions resourceActions = new TestingResourceActionsBuilder().build()__		final TestingTaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskManagerId, taskExecutorGateway)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(ResourceManagerId.generate(), Executors.directExecutor(), resourceActions)___			_			final SlotID slotId = new SlotID(taskManagerId, 0)__			final SlotStatus initialSlotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN)__			final SlotReport initialSlotReport = new SlotReport(initialSlotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(equalTo(1)))___			_			final SlotStatus slotStatus = new SlotStatus(_				slotId,_				ResourceProfile.UNKNOWN,_				new JobID(),_				new AllocationID())__			final SlotReport slotReport = new SlotReport(_				slotStatus)___			slotManager.reportSlotStatus(_				taskExecutorConnection.getInstanceID(),_				slotReport)___			_			final AllocationID allocationId = new AllocationID()__			final SlotRequest slotRequest = new SlotRequest(_				new JobID(),_				allocationId,_				ResourceProfile.UNKNOWN,_				"foobar")___			_			slotManager.registerSlotRequest(slotRequest)___			assertThat(slotManager.getSlotRequest(allocationId).isAssigned(), is(false))__		}_	};tests,that,free,slots,which,are,reported,as,allocated,won,t,be,considered,for,fulfilling,other,pending,slot,requests,p,see,flink,8505;test,public,void,test,report,allocated,slot,throws,exception,final,resource,id,task,manager,id,resource,id,generate,final,resource,actions,resource,actions,new,testing,resource,actions,builder,build,final,testing,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,manager,id,task,executor,gateway,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,generate,executors,direct,executor,resource,actions,final,slot,id,slot,id,new,slot,id,task,manager,id,0,final,slot,status,initial,slot,status,new,slot,status,slot,id,resource,profile,unknown,final,slot,report,initial,slot,report,new,slot,report,initial,slot,status,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,that,slot,manager,get,number,registered,slots,is,equal,to,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,new,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,report,slot,status,task,executor,connection,get,instance,id,slot,report,final,allocation,id,allocation,id,new,allocation,id,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,assert,that,slot,manager,get,slot,request,allocation,id,is,assigned,is,false
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1527173115;Testst that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), new TestingResourceActions())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};testst,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1530472204;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), new TestingResourceActions())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1530472204;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_			new TestingResourceActionsBuilder().createTestingResourceActions())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,create,testing,resource,actions,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1537281140;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_			new TestingResourceActionsBuilder().createTestingResourceActions())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,create,testing,resource,actions,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1537281162;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_			new TestingResourceActionsBuilder().createTestingResourceActions())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,create,testing,resource,actions,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1538127492;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_			new TestingResourceActionsBuilder().build())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,build,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testSlotRequestFailure() throws Exception;1538127495;Tests that the SlotManager retries allocating a slot if the TaskExecutor#requestSlot call_fails.;@Test_	public void testSlotRequestFailure() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_			new TestingResourceActionsBuilder().build())) {__			final SlotRequest slotRequest = new SlotRequest(new JobID(), new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_					requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__					try {_						return responseQueue.take()__					} catch (InterruptedException ignored) {_						return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__					}_				})_				.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			_			firstManualSlotRequestResponse.completeExceptionally(new SlotAllocationException("Test exception"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			assertThat(secondRequest.f2, equalTo(firstRequest.f2))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(secondRequest.f2))__		}_	};tests,that,the,slot,manager,retries,allocating,a,slot,if,the,task,executor,request,slot,call,fails;test,public,void,test,slot,request,failure,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,build,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,first,manual,slot,request,response,complete,exceptionally,new,slot,allocation,exception,test,exception,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,assert,that,second,request,f2,equal,to,first,request,f2,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,second,request,f2
SlotManagerTest -> @Test 	public void testOnlyFreeSlotsCanFulfillPendingTaskManagerSlot() throws Exception;1538127492;Tests that only free slots can fulfill/complete a pending task manager slot.;@Test_	public void testOnlyFreeSlotsCanFulfillPendingTaskManagerSlot() throws Exception {_		final int numberSlots = 1__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))___			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final SlotID slotId = new SlotID(taskExecutorConnection.getResourceID(), 0)__			final SlotStatus slotStatus = new SlotStatus(slotId, ResourceProfile.UNKNOWN, jobId, new AllocationID())__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))__		}_	};tests,that,only,free,slots,can,fulfill,complete,a,pending,task,manager,slot;test,public,void,test,only,free,slots,can,fulfill,pending,task,manager,slot,throws,exception,final,int,number,slots,1,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,slot,id,slot,id,new,slot,id,task,executor,connection,get,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,1,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1
SlotManagerTest -> @Test 	public void testOnlyFreeSlotsCanFulfillPendingTaskManagerSlot() throws Exception;1538127495;Tests that only free slots can fulfill/complete a pending task manager slot.;@Test_	public void testOnlyFreeSlotsCanFulfillPendingTaskManagerSlot() throws Exception {_		final int numberSlots = 1__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))___			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final SlotID slotId = new SlotID(taskExecutorConnection.getResourceID(), 0)__			final SlotStatus slotStatus = new SlotStatus(slotId, ResourceProfile.UNKNOWN, jobId, new AllocationID())__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))__		}_	};tests,that,only,free,slots,can,fulfill,complete,a,pending,task,manager,slot;test,public,void,test,only,free,slots,can,fulfill,pending,task,manager,slot,throws,exception,final,int,number,slots,1,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,slot,id,slot,id,new,slot,id,task,executor,connection,get,resource,id,0,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,unknown,job,id,new,allocation,id,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,1,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1493386068;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1493386106;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1493386106;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1501760738;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1504525441;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1506417942;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.isAllocated())__			assertTrue(slot2.isFree())___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.isFree())__			assertTrue(slot2.hasPendingSlotRequest())___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,is,allocated,assert,true,slot2,is,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,is,free,assert,true,slot2,has,pending,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1508576514;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1508597556;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1508597556;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1508743918;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1510063665;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1510063666;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1515177485;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1515481550;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1517241957;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1521804757;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1522681180;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1525452496;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1526387042;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1526494919;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1527173115;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1530472204;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1530472204;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1537281140;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1537281162;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1538127492;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTaskManagerUnregistration() throws Exception;1538127495;Tests that un-registration of task managers will free and remove all registered slots.;@Test_	public void testTaskManagerUnregistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final JobID jobId = new JobID()___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setRequestSlotFunction(tuple5 -> {_				assertThat(tuple5.f4, is(equalTo(resourceManagerId)))__				return new CompletableFuture<>()__			})_			.createTestingTaskExecutorGateway()___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final AllocationID allocationId1 = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile, jobId, allocationId1)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			allocationId2,_			resourceProfile,_			"foobar")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			TaskManagerSlot slot1 = slotManager.getSlot(slotId1)__			TaskManagerSlot slot2 = slotManager.getSlot(slotId2)___			assertTrue(slot1.getState() == TaskManagerSlot.State.ALLOCATED)__			assertTrue(slot2.getState() == TaskManagerSlot.State.FREE)___			assertTrue(slotManager.registerSlotRequest(slotRequest))___			assertFalse(slot2.getState() == TaskManagerSlot.State.FREE)__			assertTrue(slot2.getState() == TaskManagerSlot.State.PENDING)___			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId2)___			assertTrue("The pending slot request should have been assigned to slot 2", pendingSlotRequest.isAssigned())___			slotManager.unregisterTaskManager(taskManagerConnection.getInstanceID())___			assertTrue(0 == slotManager.getNumberRegisteredSlots())__			assertFalse(pendingSlotRequest.isAssigned())__		}_	};tests,that,un,registration,of,task,managers,will,free,and,remove,all,registered,slots;test,public,void,test,task,manager,unregistration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,assert,that,tuple5,f4,is,equal,to,resource,manager,id,return,new,completable,future,create,testing,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,allocation,id,allocation,id1,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,job,id,allocation,id1,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id2,resource,profile,foobar,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,task,manager,slot,slot1,slot,manager,get,slot,slot,id1,task,manager,slot,slot2,slot,manager,get,slot,slot,id2,assert,true,slot1,get,state,task,manager,slot,state,allocated,assert,true,slot2,get,state,task,manager,slot,state,free,assert,true,slot,manager,register,slot,request,slot,request,assert,false,slot2,get,state,task,manager,slot,state,free,assert,true,slot2,get,state,task,manager,slot,state,pending,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id2,assert,true,the,pending,slot,request,should,have,been,assigned,to,slot,2,pending,slot,request,is,assigned,slot,manager,unregister,task,manager,task,manager,connection,get,instance,id,assert,true,0,slot,manager,get,number,registered,slots,assert,false,pending,slot,request,is,assigned
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1493386068;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 123456L___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(leaderId, Executors.directExecutor(), resourceManagerActions)___			slotManager.registerSlotRequest(slotRequest)___			slotManager.registerTaskManager(taskManagerConnection, initialSlotReport)___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			assertFalse(slotManager.hasTimeoutRegistered(taskManagerConnection.getInstanceID()))___			SlotID slotId = slotIdArgumentCaptor.getValue()__			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slotManager.hasTimeoutRegistered(taskManagerConnection.getInstanceID()))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			_			_			verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), eq(taskManagerTimeout), eq(TimeUnit.MILLISECONDS))___			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,123456l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,leader,id,executors,direct,executor,resource,manager,actions,slot,manager,register,slot,request,slot,request,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,assert,false,slot,manager,has,timeout,registered,task,manager,connection,get,instance,id,slot,id,slot,id,slot,id,argument,captor,get,value,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,manager,has,timeout,registered,task,manager,connection,get,instance,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,eq,task,manager,timeout,eq,time,unit,milliseconds,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1493386106;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 123456L___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(leaderId, Executors.directExecutor(), resourceManagerActions)___			slotManager.registerSlotRequest(slotRequest)___			slotManager.registerTaskManager(taskManagerConnection, initialSlotReport)___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			assertFalse(slotManager.hasTimeoutRegistered(taskManagerConnection.getInstanceID()))___			SlotID slotId = slotIdArgumentCaptor.getValue()__			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			slotManager.freeSlot(slotId, allocationId)___			assertTrue(slotManager.hasTimeoutRegistered(taskManagerConnection.getInstanceID()))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			_			_			verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), eq(taskManagerTimeout), eq(TimeUnit.MILLISECONDS))___			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,123456l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,leader,id,executors,direct,executor,resource,manager,actions,slot,manager,register,slot,request,slot,request,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,assert,false,slot,manager,has,timeout,registered,task,manager,connection,get,instance,id,slot,id,slot,id,slot,id,argument,captor,get,value,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,slot,manager,free,slot,slot,id,allocation,id,assert,true,slot,manager,has,timeout,registered,task,manager,connection,get,instance,id,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,eq,task,manager,timeout,eq,time,unit,milliseconds,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1493386106;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			FlinkFuture.supplyAsync(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					slotManager.registerSlotRequest(slotRequest)___					return null__				}_			}, mainThreadExecutor)_			.thenAccept(new AcceptFunction<Void>() {_				@Override_				public void accept(Void value) {_					slotManager.registerTaskManager(taskManagerConnection, initialSlotReport)__				}_			})___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			Future<Boolean> idleFuture = FlinkFuture.supplyAsync(new Callable<Boolean>() {_				@Override_				public Boolean call() throws Exception {_					return slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID())__				}_			}, mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			Future<TaskManagerSlot> slotFuture = FlinkFuture.supplyAsync(new Callable<TaskManagerSlot>() {_				@Override_				public TaskManagerSlot call() throws Exception {_					return slotManager.getSlot(slotId)__				}_			}, mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			Future<Boolean> idleFuture2 = FlinkFuture.supplyAsync(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					slotManager.freeSlot(slotId, allocationId)___					return null__				}_			}, mainThreadExecutor)_			.thenApply(new ApplyFunction<Void, Boolean>() {_				@Override_				public Boolean apply(Void value) {_					return slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID())__				}_			})___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,slot,manager,register,slot,request,slot,request,return,null,main,thread,executor,then,accept,new,accept,function,void,override,public,void,accept,void,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,future,boolean,idle,future,flink,future,supply,async,new,callable,boolean,override,public,boolean,call,throws,exception,return,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,future,task,manager,slot,slot,future,flink,future,supply,async,new,callable,task,manager,slot,override,public,task,manager,slot,call,throws,exception,return,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,future,boolean,idle,future2,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,slot,manager,free,slot,slot,id,allocation,id,return,null,main,thread,executor,then,apply,new,apply,function,void,boolean,override,public,boolean,apply,void,value,return,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1501760738;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new FlinkFutureException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,flink,future,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1504525441;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new FlinkFutureException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,flink,future,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1506417942;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1508576514;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1508597556;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1508597556;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1508743918;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1510063665;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1510063666;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1515177485;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1515481550;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1517241957;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1521804757;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1522681180;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1525452496;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1526387042;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1526494919;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1527173115;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1530472204;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1530472204;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1537281140;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1537281162;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			verify(resourceManagerActions, timeout(verifyTimeout).times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,verify,resource,manager,actions,timeout,verify,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1538127492;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L__		final long verifyTimeout = taskManagerTimeout * 10L___		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final CompletableFuture<InstanceID> releasedResourceFuture = new CompletableFuture<>()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setReleaseResourceConsumer((instanceID, e) -> releasedResourceFuture.complete(instanceID))_			.build()__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenAccept((Object value) -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			ArgumentCaptor<SlotID> slotIdArgumentCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, timeout(verifyTimeout)).requestSlot(_				slotIdArgumentCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			final SlotID slotId = slotIdArgumentCaptor.getValue()___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			assertThat(releasedResourceFuture.get(), is(equalTo(taskManagerConnection.getInstanceID())))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,long,verify,timeout,task,manager,timeout,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,completable,future,instance,id,released,resource,future,new,completable,future,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,release,resource,consumer,instance,id,e,released,resource,future,complete,instance,id,build,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,accept,object,value,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,argument,captor,slot,id,slot,id,argument,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,timeout,verify,timeout,request,slot,slot,id,argument,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,final,slot,id,slot,id,slot,id,argument,captor,get,value,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,assert,that,released,resource,future,get,is,equal,to,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTimeoutForUnusedTaskManager() throws Exception;1538127495;Tests that formerly used task managers can again timeout after all of their slots have_been freed.;@Test_	public void testTimeoutForUnusedTaskManager() throws Exception {_		final long taskManagerTimeout = 50L___		final CompletableFuture<InstanceID> releasedResourceFuture = new CompletableFuture<>()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setReleaseResourceConsumer((instanceID, e) -> releasedResourceFuture.complete(instanceID))_			.build()__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ScheduledExecutor scheduledExecutor = TestingUtils.defaultScheduledExecutor()___		final ResourceID resourceId = ResourceID.generate()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		final CompletableFuture<SlotID> requestedSlotFuture = new CompletableFuture<>()__		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setRequestSlotFunction(tuple5 -> {_				requestedSlotFuture.complete(tuple5.f0)__				return CompletableFuture.completedFuture(Acknowledge.get())__			})_			.createTestingTaskExecutorGateway()___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport initialSlotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.of(taskManagerTimeout, TimeUnit.MILLISECONDS))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture.supplyAsync(_				() -> {_					try {_						return slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new CompletionException(e)__					}_				},_				mainThreadExecutor)_			.thenRun(() -> slotManager.registerTaskManager(taskManagerConnection, initialSlotReport))___			final SlotID slotId = requestedSlotFuture.get()___			CompletableFuture<Boolean> idleFuture = CompletableFuture.supplyAsync(_				() -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()),_				mainThreadExecutor)___			_			assertFalse(idleFuture.get())___			CompletableFuture<TaskManagerSlot> slotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(slotId),_				mainThreadExecutor)___			TaskManagerSlot slot = slotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			CompletableFuture<Boolean> idleFuture2 = CompletableFuture.runAsync(_				() -> slotManager.freeSlot(slotId, allocationId),_				mainThreadExecutor)_			.thenApply((Object value) -> slotManager.isTaskManagerIdle(taskManagerConnection.getInstanceID()))___			assertTrue(idleFuture2.get())___			assertThat(releasedResourceFuture.get(), is(equalTo(taskManagerConnection.getInstanceID())))__		}_	};tests,that,formerly,used,task,managers,can,again,timeout,after,all,of,their,slots,have,been,freed;test,public,void,test,timeout,for,unused,task,manager,throws,exception,final,long,task,manager,timeout,50l,final,completable,future,instance,id,released,resource,future,new,completable,future,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,release,resource,consumer,instance,id,e,released,resource,future,complete,instance,id,build,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,scheduled,executor,scheduled,executor,testing,utils,default,scheduled,executor,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,slot,id,requested,slot,future,new,completable,future,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,requested,slot,future,complete,tuple5,f0,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,initial,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,of,task,manager,timeout,time,unit,milliseconds,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,supply,async,try,return,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,completion,exception,e,main,thread,executor,then,run,slot,manager,register,task,manager,task,manager,connection,initial,slot,report,final,slot,id,slot,id,requested,slot,future,get,completable,future,boolean,idle,future,completable,future,supply,async,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,main,thread,executor,assert,false,idle,future,get,completable,future,task,manager,slot,slot,future,completable,future,supply,async,slot,manager,get,slot,slot,id,main,thread,executor,task,manager,slot,slot,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,completable,future,boolean,idle,future2,completable,future,run,async,slot,manager,free,slot,slot,id,allocation,id,main,thread,executor,then,apply,object,value,slot,manager,is,task,manager,idle,task,manager,connection,get,instance,id,assert,true,idle,future2,get,assert,that,released,resource,future,get,is,equal,to,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception;1537281140;Tests that pending request is removed if task executor reports a slot with its allocation id.;@Test_	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_				new TestingResourceActionsBuilder().createTestingResourceActions())) {__			final JobID jobID = new JobID()__			final SlotRequest slotRequest1 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest1)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_					.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_						requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__						try {_							return responseQueue.take()__						} catch (InterruptedException ignored) {_							return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__						}_					})_					.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			final SlotRequest slotRequest2 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest2)___			_			firstManualSlotRequestResponse.completeExceptionally(new TimeoutException("Test exception to fail first allocation"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			_			secondManualSlotRequestResponse.completeExceptionally(new SlotOccupiedException("Test exception", slotRequest1.getAllocationId(), jobID))___			assertThat(firstRequest.f2, equalTo(slotRequest1.getAllocationId()))__			assertThat(secondRequest.f2, equalTo(slotRequest2.getAllocationId()))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(firstRequest.f2))___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__		}_	};tests,that,pending,request,is,removed,if,task,executor,reports,a,slot,with,its,allocation,id;test,public,void,test,slot,request,removed,if,tmreport,allocation,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,create,testing,resource,actions,final,job,id,job,id,new,job,id,final,slot,request,slot,request1,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request1,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,final,slot,request,slot,request2,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request2,first,manual,slot,request,response,complete,exceptionally,new,timeout,exception,test,exception,to,fail,first,allocation,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,second,manual,slot,request,response,complete,exceptionally,new,slot,occupied,exception,test,exception,slot,request1,get,allocation,id,job,id,assert,that,first,request,f2,equal,to,slot,request1,get,allocation,id,assert,that,second,request,f2,equal,to,slot,request2,get,allocation,id,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,first,request,f2,assert,that,slot,manager,get,number,registered,slots,is,1
SlotManagerTest -> @Test 	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception;1537281162;Tests that pending request is removed if task executor reports a slot with its allocation id.;@Test_	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_				new TestingResourceActionsBuilder().createTestingResourceActions())) {__			final JobID jobID = new JobID()__			final SlotRequest slotRequest1 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest1)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_					.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_						requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__						try {_							return responseQueue.take()__						} catch (InterruptedException ignored) {_							return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__						}_					})_					.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			final SlotRequest slotRequest2 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest2)___			_			firstManualSlotRequestResponse.completeExceptionally(new TimeoutException("Test exception to fail first allocation"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			_			secondManualSlotRequestResponse.completeExceptionally(new SlotOccupiedException("Test exception", slotRequest1.getAllocationId(), jobID))___			assertThat(firstRequest.f2, equalTo(slotRequest1.getAllocationId()))__			assertThat(secondRequest.f2, equalTo(slotRequest2.getAllocationId()))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(firstRequest.f2))___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__		}_	};tests,that,pending,request,is,removed,if,task,executor,reports,a,slot,with,its,allocation,id;test,public,void,test,slot,request,removed,if,tmreport,allocation,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,create,testing,resource,actions,final,job,id,job,id,new,job,id,final,slot,request,slot,request1,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request1,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,final,slot,request,slot,request2,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request2,first,manual,slot,request,response,complete,exceptionally,new,timeout,exception,test,exception,to,fail,first,allocation,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,second,manual,slot,request,response,complete,exceptionally,new,slot,occupied,exception,test,exception,slot,request1,get,allocation,id,job,id,assert,that,first,request,f2,equal,to,slot,request1,get,allocation,id,assert,that,second,request,f2,equal,to,slot,request2,get,allocation,id,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,first,request,f2,assert,that,slot,manager,get,number,registered,slots,is,1
SlotManagerTest -> @Test 	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception;1538127492;Tests that pending request is removed if task executor reports a slot with its allocation id.;@Test_	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_				new TestingResourceActionsBuilder().build())) {__			final JobID jobID = new JobID()__			final SlotRequest slotRequest1 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest1)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_					.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_						requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__						try {_							return responseQueue.take()__						} catch (InterruptedException ignored) {_							return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__						}_					})_					.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			final SlotRequest slotRequest2 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest2)___			_			firstManualSlotRequestResponse.completeExceptionally(new TimeoutException("Test exception to fail first allocation"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			_			secondManualSlotRequestResponse.completeExceptionally(new SlotOccupiedException("Test exception", slotRequest1.getAllocationId(), jobID))___			assertThat(firstRequest.f2, equalTo(slotRequest1.getAllocationId()))__			assertThat(secondRequest.f2, equalTo(slotRequest2.getAllocationId()))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(firstRequest.f2))___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__		}_	};tests,that,pending,request,is,removed,if,task,executor,reports,a,slot,with,its,allocation,id;test,public,void,test,slot,request,removed,if,tmreport,allocation,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,build,final,job,id,job,id,new,job,id,final,slot,request,slot,request1,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request1,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,final,slot,request,slot,request2,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request2,first,manual,slot,request,response,complete,exceptionally,new,timeout,exception,test,exception,to,fail,first,allocation,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,second,manual,slot,request,response,complete,exceptionally,new,slot,occupied,exception,test,exception,slot,request1,get,allocation,id,job,id,assert,that,first,request,f2,equal,to,slot,request1,get,allocation,id,assert,that,second,request,f2,equal,to,slot,request2,get,allocation,id,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,first,request,f2,assert,that,slot,manager,get,number,registered,slots,is,1
SlotManagerTest -> @Test 	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception;1538127495;Tests that pending request is removed if task executor reports a slot with its allocation id.;@Test_	public void testSlotRequestRemovedIfTMReportAllocation() throws Exception {_		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(),_				new TestingResourceActionsBuilder().build())) {__			final JobID jobID = new JobID()__			final SlotRequest slotRequest1 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest1)___			final BlockingQueue<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestSlotQueue = new ArrayBlockingQueue<>(1)__			final BlockingQueue<CompletableFuture<Acknowledge>> responseQueue = new ArrayBlockingQueue<>(1)___			final TestingTaskExecutorGateway testingTaskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_					.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> {_						requestSlotQueue.offer(slotIDJobIDAllocationIDStringResourceManagerIdTuple5)__						try {_							return responseQueue.take()__						} catch (InterruptedException ignored) {_							return FutureUtils.completedExceptionally(new FlinkException("Response queue was interrupted."))__						}_					})_					.createTestingTaskExecutorGateway()___			final ResourceID taskExecutorResourceId = ResourceID.generate()__			final TaskExecutorConnection taskExecutionConnection = new TaskExecutorConnection(taskExecutorResourceId, testingTaskExecutorGateway)__			final SlotReport slotReport = new SlotReport(new SlotStatus(new SlotID(taskExecutorResourceId, 0), ResourceProfile.UNKNOWN))___			final CompletableFuture<Acknowledge> firstManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(firstManualSlotRequestResponse)___			slotManager.registerTaskManager(taskExecutionConnection, slotReport)___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> firstRequest = requestSlotQueue.take()___			final CompletableFuture<Acknowledge> secondManualSlotRequestResponse = new CompletableFuture<>()__			responseQueue.offer(secondManualSlotRequestResponse)___			final SlotRequest slotRequest2 = new SlotRequest(jobID, new AllocationID(), ResourceProfile.UNKNOWN, "foobar")__			slotManager.registerSlotRequest(slotRequest2)___			_			firstManualSlotRequestResponse.completeExceptionally(new TimeoutException("Test exception to fail first allocation"))___			final Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId> secondRequest = requestSlotQueue.take()___			_			secondManualSlotRequestResponse.completeExceptionally(new SlotOccupiedException("Test exception", slotRequest1.getAllocationId(), jobID))___			assertThat(firstRequest.f2, equalTo(slotRequest1.getAllocationId()))__			assertThat(secondRequest.f2, equalTo(slotRequest2.getAllocationId()))__			assertThat(secondRequest.f0, equalTo(firstRequest.f0))___			secondManualSlotRequestResponse.complete(Acknowledge.get())___			final TaskManagerSlot slot = slotManager.getSlot(secondRequest.f0)__			assertThat(slot.getState(), equalTo(TaskManagerSlot.State.ALLOCATED))__			assertThat(slot.getAllocationId(), equalTo(firstRequest.f2))___			assertThat(slotManager.getNumberRegisteredSlots(), is(1))__		}_	};tests,that,pending,request,is,removed,if,task,executor,reports,a,slot,with,its,allocation,id;test,public,void,test,slot,request,removed,if,tmreport,allocation,throws,exception,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,builder,build,final,job,id,job,id,new,job,id,final,slot,request,slot,request1,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request1,final,blocking,queue,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,slot,queue,new,array,blocking,queue,1,final,blocking,queue,completable,future,acknowledge,response,queue,new,array,blocking,queue,1,final,testing,task,executor,gateway,testing,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,request,slot,queue,offer,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,try,return,response,queue,take,catch,interrupted,exception,ignored,return,future,utils,completed,exceptionally,new,flink,exception,response,queue,was,interrupted,create,testing,task,executor,gateway,final,resource,id,task,executor,resource,id,resource,id,generate,final,task,executor,connection,task,execution,connection,new,task,executor,connection,task,executor,resource,id,testing,task,executor,gateway,final,slot,report,slot,report,new,slot,report,new,slot,status,new,slot,id,task,executor,resource,id,0,resource,profile,unknown,final,completable,future,acknowledge,first,manual,slot,request,response,new,completable,future,response,queue,offer,first,manual,slot,request,response,slot,manager,register,task,manager,task,execution,connection,slot,report,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,first,request,request,slot,queue,take,final,completable,future,acknowledge,second,manual,slot,request,response,new,completable,future,response,queue,offer,second,manual,slot,request,response,final,slot,request,slot,request2,new,slot,request,job,id,new,allocation,id,resource,profile,unknown,foobar,slot,manager,register,slot,request,slot,request2,first,manual,slot,request,response,complete,exceptionally,new,timeout,exception,test,exception,to,fail,first,allocation,final,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,second,request,request,slot,queue,take,second,manual,slot,request,response,complete,exceptionally,new,slot,occupied,exception,test,exception,slot,request1,get,allocation,id,job,id,assert,that,first,request,f2,equal,to,slot,request1,get,allocation,id,assert,that,second,request,f2,equal,to,slot,request2,get,allocation,id,assert,that,second,request,f0,equal,to,first,request,f0,second,manual,slot,request,response,complete,acknowledge,get,final,task,manager,slot,slot,slot,manager,get,slot,second,request,f0,assert,that,slot,get,state,equal,to,task,manager,slot,state,allocated,assert,that,slot,get,allocation,id,equal,to,first,request,f2,assert,that,slot,manager,get,number,registered,slots,is,1
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1482522858;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1482522861;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1482522861;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1482522862;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1482522862;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlot();1489060856;Tests that a new slot appeared in SlotReport, but we have no pending request;@Test_	public void testNewlyAppearedFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__	};tests,that,a,new,slot,appeared,in,slot,report,but,we,have,no,pending,request;test,public,void,test,newly,appeared,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1493386068;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotID slotId3 = new SlotID(resourceId, 2)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		_		final Executor mainThreadExecutorMock = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutorMock, resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(slotId3, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			_			slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport)___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__			verify(mainThreadExecutorMock).execute(runnableArgumentCaptor.capture())___			Runnable requestFailureRunnable = runnableArgumentCaptor.getValue()___			requestFailureRunnable.run()___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			verify(mainThreadExecutorMock, times(2)).execute(runnableArgumentCaptor.capture())__			Runnable requestSuccessRunnable = runnableArgumentCaptor.getValue()___			requestSuccessRunnable.run()___			final SlotID requestedSlotId = slotIdCaptor.getValue()___			assertEquals(slotId3, requestedSlotId)___			TaskManagerSlot slot = slotManager.getSlot(requestedSlotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,id,slot,id3,new,slot,id,resource,id,2,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,mock,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,mock,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,slot,id3,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,mock,execute,runnable,argument,captor,capture,runnable,request,failure,runnable,runnable,argument,captor,get,value,request,failure,runnable,run,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,verify,main,thread,executor,mock,times,2,execute,runnable,argument,captor,capture,runnable,request,success,runnable,runnable,argument,captor,get,value,request,success,runnable,run,final,slot,id,requested,slot,id,slot,id,captor,get,value,assert,equals,slot,id3,requested,slot,id,task,manager,slot,slot,slot,manager,get,slot,requested,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1493386106;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		_		final Executor mainThreadExecutorMock = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutorMock, resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotID requestedSlotdId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotdId.equals(slotId1) ? slotId2 : slotId1___			assertTrue(slotManager.getSlot(freeSlotId).isFree())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			_			slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport)___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__			verify(mainThreadExecutorMock).execute(runnableArgumentCaptor.capture())___			Runnable requestFailureRunnable = runnableArgumentCaptor.getValue()___			requestFailureRunnable.run()___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			verify(mainThreadExecutorMock, times(2)).execute(runnableArgumentCaptor.capture())__			Runnable requestSuccessRunnable = runnableArgumentCaptor.getValue()___			requestSuccessRunnable.run()___			final SlotID requestedSlotId = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId)___			TaskManagerSlot slot = slotManager.getSlot(requestedSlotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,mock,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,mock,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,id,requested,slotd,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slotd,id,equals,slot,id1,slot,id2,slot,id1,assert,true,slot,manager,get,slot,free,slot,id,is,free,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,mock,execute,runnable,argument,captor,capture,runnable,request,failure,runnable,runnable,argument,captor,get,value,request,failure,runnable,run,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,verify,main,thread,executor,mock,times,2,execute,runnable,argument,captor,capture,runnable,request,success,runnable,runnable,argument,captor,get,value,request,success,runnable,run,final,slot,id,requested,slot,id,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id,task,manager,slot,slot,slot,manager,get,slot,requested,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1493386106;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 1000L__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			Future<Void> registrationFuture = FlinkFuture.supplyAsync(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				}_			}, mainThreadExecutor)_			.thenAccept(new AcceptFunction<Void>() {_				@Override_				public void accept(Void value) {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				}_			})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			Future<Boolean> freeSlotFuture = FlinkFuture.supplyAsync(new Callable<Boolean>() {_				@Override_				public Boolean call() throws Exception {_					return slotManager.getSlot(freeSlotId).isFree()__				}_			}, mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			FlinkFuture.supplyAsync(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					_					slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport)___					return null__				}_			}, mainThreadExecutor)___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			Future<TaskManagerSlot> requestedSlotFuture = FlinkFuture.supplyAsync(new Callable<TaskManagerSlot>() {_				@Override_				public TaskManagerSlot call() throws Exception {_					return slotManager.getSlot(requestedSlotId2)__				}_			}, mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,1000l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,future,void,registration,future,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,new,accept,function,void,override,public,void,accept,void,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,future,boolean,free,slot,future,flink,future,supply,async,new,callable,boolean,override,public,boolean,call,throws,exception,return,slot,manager,get,slot,free,slot,id,is,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,flink,future,supply,async,new,callable,void,override,public,void,call,throws,exception,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,return,null,main,thread,executor,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,future,task,manager,slot,requested,slot,future,flink,future,supply,async,new,callable,task,manager,slot,override,public,task,manager,slot,call,throws,exception,return,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1501760738;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 1000L__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).isFree(),_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,1000l,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,is,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1504525441;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 1000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).isFree(),_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,1000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,is,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1506417942;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 1000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).isFree(),_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,1000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,is,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1508576514;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1508597556;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1508597556;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1508743918;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1510063665;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1510063666;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1515177485;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1515481550;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1517241957;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1521804757;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1522681180;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1525452496;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1526387042;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1526494919;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1527173115;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1530472204;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1530472204;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1537281140;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1537281162;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1538127492;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testSlotReportWhileActiveSlotRequest() throws Exception;1538127495;Tests that pending slot requests are rejected if a slot report with a different allocation_is received.;@Test_	@SuppressWarnings("unchecked")_	public void testSlotReportWhileActiveSlotRequest() throws Exception {_		final long verifyTimeout = 10000L__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, CompletableFuture.completedFuture(Acknowledge.get()))___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime())) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			CompletableFuture<Void> registrationFuture = CompletableFuture.supplyAsync(_				() -> {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)___					return null__				},_				mainThreadExecutor)_			.thenAccept(_				(Object value) -> {_					try {_						slotManager.registerSlotRequest(slotRequest)__					} catch (SlotManagerException e) {_						throw new RuntimeException("Could not register slots.", e)__					}_				})___			_			registrationFuture.get()___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId = slotIdCaptor.getValue()__			final SlotID freeSlotId = requestedSlotId.equals(slotId1) ? slotId2 : slotId1___			CompletableFuture<Boolean> freeSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(freeSlotId).getState() == TaskManagerSlot.State.FREE,_				mainThreadExecutor)___			assertTrue(freeSlotFuture.get())___			final SlotStatus newSlotStatus1 = new SlotStatus(slotIdCaptor.getValue(), resourceProfile, new JobID(), new AllocationID())__			final SlotStatus newSlotStatus2 = new SlotStatus(freeSlotId, resourceProfile)__			final SlotReport newSlotReport = new SlotReport(Arrays.asList(newSlotStatus1, newSlotStatus2))___			CompletableFuture<Boolean> reportSlotStatusFuture = CompletableFuture.supplyAsync(_				_				() -> slotManager.reportSlotStatus(taskManagerConnection.getInstanceID(), newSlotReport),_				mainThreadExecutor)___			assertTrue(reportSlotStatusFuture.get())___			verify(taskExecutorGateway, timeout(verifyTimeout).times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			final SlotID requestedSlotId2 = slotIdCaptor.getValue()___			assertEquals(slotId2, requestedSlotId2)___			CompletableFuture<TaskManagerSlot> requestedSlotFuture = CompletableFuture.supplyAsync(_				() -> slotManager.getSlot(requestedSlotId2),_				mainThreadExecutor)___			TaskManagerSlot slot = requestedSlotFuture.get()___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,rejected,if,a,slot,report,with,a,different,allocation,is,received;test,suppress,warnings,unchecked,public,void,test,slot,report,while,active,slot,request,throws,exception,final,long,verify,timeout,10000l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,completable,future,completed,future,acknowledge,get,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,final,executor,main,thread,executor,testing,utils,default,executor,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,testing,utils,infinite,time,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,completable,future,void,registration,future,completable,future,supply,async,slot,manager,register,task,manager,task,manager,connection,slot,report,return,null,main,thread,executor,then,accept,object,value,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,throw,new,runtime,exception,could,not,register,slots,e,registration,future,get,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id,slot,id,captor,get,value,final,slot,id,free,slot,id,requested,slot,id,equals,slot,id1,slot,id2,slot,id1,completable,future,boolean,free,slot,future,completable,future,supply,async,slot,manager,get,slot,free,slot,id,get,state,task,manager,slot,state,free,main,thread,executor,assert,true,free,slot,future,get,final,slot,status,new,slot,status1,new,slot,status,slot,id,captor,get,value,resource,profile,new,job,id,new,allocation,id,final,slot,status,new,slot,status2,new,slot,status,free,slot,id,resource,profile,final,slot,report,new,slot,report,new,slot,report,arrays,as,list,new,slot,status1,new,slot,status2,completable,future,boolean,report,slot,status,future,completable,future,supply,async,slot,manager,report,slot,status,task,manager,connection,get,instance,id,new,slot,report,main,thread,executor,assert,true,report,slot,status,future,get,verify,task,executor,gateway,timeout,verify,timeout,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,final,slot,id,requested,slot,id2,slot,id,captor,get,value,assert,equals,slot,id2,requested,slot,id2,completable,future,task,manager,slot,requested,slot,future,completable,future,supply,async,slot,manager,get,slot,requested,slot,id2,main,thread,executor,task,manager,slot,slot,requested,slot,future,get,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1482522858;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1482522861;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1482522861;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1482522862;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1482522862;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots);1489060856;Choose slot randomly if it matches requirement__@param request   The slot request_@param freeSlots All slots which can be used_@return The chosen slot or null if cannot find a match;@Override_		protected ResourceSlot chooseSlotToUse(SlotRequest request, Map<SlotID, ResourceSlot> freeSlots) {_			for (ResourceSlot slot : freeSlots.values()) {_				if (slot.isMatchingRequirement(request.getResourceProfile())) {_					return slot__				}_			}_			return null__		};choose,slot,randomly,if,it,matches,requirement,param,request,the,slot,request,param,free,slots,all,slots,which,can,be,used,return,the,chosen,slot,or,null,if,cannot,find,a,match;override,protected,resource,slot,choose,slot,to,use,slot,request,request,map,slot,id,resource,slot,free,slots,for,resource,slot,slot,free,slots,values,if,slot,is,matching,requirement,request,get,resource,profile,return,slot,return,null
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1482522858;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1482522861;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1482522861;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1482522862;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1482522862;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutSuitableSlot();1489060856;Tests that there are some free slots when we request, but none of them are suitable;@Test_	public void testRequestSlotWithoutSuitableSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 2)__		assertEquals(2, slotManager.getFreeSlotCount())___		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(2, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,some,free,slots,when,we,request,but,none,of,them,are,suitable;test,public,void,test,request,slot,without,suitable,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,2,assert,equals,2,slot,manager,get,free,slot,count,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,2,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1508597556;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 3L)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,3l,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1508597556;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 3L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,3l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1508743918;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1510063665;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1510063666;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1515177485;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1515481550;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1517241957;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1521804757;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1522681180;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(ResourceID.generate(), 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,generate,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1525452496;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1526387042;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1526494919;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1527173115;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1530472204;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1530472204;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1537281140;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1537281162;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__<p>See FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,p,see,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1538127492;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__<p>See FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,p,see,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception;1538127495;Tests that a task manager timeout does not remove the slots from the SlotManager._A timeout should only trigger the {@link ResourceActions#releaseResource(InstanceID, Exception)}_callback. The receiver of the callback can then decide what to do with the TaskManager.__<p>See FLINK-7793;@Test_	public void testTaskManagerTimeoutDoesNotRemoveSlots() throws Exception {_		final Time taskManagerTimeout = Time.milliseconds(10L)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final ResourceActions resourceActions = mock(ResourceActions.class)__		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)__		final SlotStatus slotStatus = new SlotStatus(_			new SlotID(resourceID, 0),_			new ResourceProfile(1.0, 1))__		final SlotReport initialSlotReport = new SlotReport(slotStatus)___		try (final SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			taskManagerTimeout)) {__			slotManager.start(resourceManagerId, Executors.directExecutor(), resourceActions)___			slotManager.registerTaskManager(taskExecutorConnection, initialSlotReport)___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			_			verify(resourceActions, timeout(taskManagerTimeout.toMilliseconds() * 20L).atLeast(1)).releaseResource(eq(taskExecutorConnection.getInstanceID()), any(Exception.class))___			assertEquals(1, slotManager.getNumberRegisteredSlots())___			slotManager.unregisterTaskManager(taskExecutorConnection.getInstanceID())___			assertEquals(0, slotManager.getNumberRegisteredSlots())__		}_	};tests,that,a,task,manager,timeout,does,not,remove,the,slots,from,the,slot,manager,a,timeout,should,only,trigger,the,link,resource,actions,release,resource,instance,id,exception,callback,the,receiver,of,the,callback,can,then,decide,what,to,do,with,the,task,manager,p,see,flink,7793;test,public,void,test,task,manager,timeout,does,not,remove,slots,throws,exception,final,time,task,manager,timeout,time,milliseconds,10l,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,resource,actions,resource,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,new,resource,profile,1,0,1,final,slot,report,initial,slot,report,new,slot,report,slot,status,try,final,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,task,manager,timeout,slot,manager,start,resource,manager,id,executors,direct,executor,resource,actions,slot,manager,register,task,manager,task,executor,connection,initial,slot,report,assert,equals,1,slot,manager,get,number,registered,slots,verify,resource,actions,timeout,task,manager,timeout,to,milliseconds,20l,at,least,1,release,resource,eq,task,executor,connection,get,instance,id,any,exception,class,assert,equals,1,slot,manager,get,number,registered,slots,slot,manager,unregister,task,manager,task,executor,connection,get,instance,id,assert,equals,0,slot,manager,get,number,registered,slots
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1493386068;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1493386106;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1493386106;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1501760738;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1504525441;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1506417942;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1508576514;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1508597556;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1508597556;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1508743918;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1510063665;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1510063666;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1515177485;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1515481550;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1517241957;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1521804757;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1522681180;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1525452496;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1526387042;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1526494919;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1527173115;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1530472204;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1530472204;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1537281140;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.",2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1537281162;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1538127492;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testTaskManagerRegistration() throws Exception;1538127495;Tests that we can register task manager and their slots at the slot manager.;@Test_	public void testTaskManagerRegistration() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			assertTrue("The number registered slots does not equal the expected number.", 2 == slotManager.getNumberRegisteredSlots())___			assertNotNull(slotManager.getSlot(slotId1))__			assertNotNull(slotManager.getSlot(slotId2))__		}_	};tests,that,we,can,register,task,manager,and,their,slots,at,the,slot,manager;test,public,void,test,task,manager,registration,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,true,the,number,registered,slots,does,not,equal,the,expected,number,2,slot,manager,get,number,registered,slots,assert,not,null,slot,manager,get,slot,slot,id1,assert,not,null,slot,manager,get,slot,slot,id2
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1493386068;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1493386106;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1493386106;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1501760738;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {__		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1504525441;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1506417942;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1508576514;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1508597556;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1508597556;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1508743918;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1510063665;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1510063666;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1515177485;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1515481550;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1517241957;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1521804757;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1522681180;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1525452496;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1526387042;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1526494919;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1527173115;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1530472204;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1530472204;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1537281140;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1537281162;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		verify(resourceManagerActions, times(1)).allocateResource(any(ResourceProfile.class))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,verify,resource,manager,actions,times,1,allocate,resource,any,resource,profile,class
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1538127492;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final AtomicInteger numberAllocateResourceFunctionCalls = new AtomicInteger(0)__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(resourceProfile -> numberAllocateResourceFunctionCalls.incrementAndGet())_			.build()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		assertThat(numberAllocateResourceFunctionCalls.get(), is(1))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,atomic,integer,number,allocate,resource,function,calls,new,atomic,integer,0,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,number,allocate,resource,function,calls,increment,and,get,build,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,assert,that,number,allocate,resource,function,calls,get,is,1
SlotManagerTest -> @Test 	public void testDuplicatePendingSlotRequest() throws Exception;1538127495;Tests that a second pending slot request is detected as a duplicate if the allocation ids are_the same.;@Test_	public void testDuplicatePendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final AtomicInteger numberAllocateResourceFunctionCalls = new AtomicInteger(0)__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(resourceProfile -> numberAllocateResourceFunctionCalls.incrementAndGet())_			.build()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile1 = new ResourceProfile(1.0, 2)__		final ResourceProfile resourceProfile2 = new ResourceProfile(2.0, 1)__		final SlotRequest slotRequest1 = new SlotRequest(new JobID(), allocationId, resourceProfile1, "foobar")__		final SlotRequest slotRequest2 = new SlotRequest(new JobID(), allocationId, resourceProfile2, "barfoo")___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			assertTrue(slotManager.registerSlotRequest(slotRequest1))__			assertFalse(slotManager.registerSlotRequest(slotRequest2))__		}__		_		_		assertThat(numberAllocateResourceFunctionCalls.get(), is(1))__	};tests,that,a,second,pending,slot,request,is,detected,as,a,duplicate,if,the,allocation,ids,are,the,same;test,public,void,test,duplicate,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,atomic,integer,number,allocate,resource,function,calls,new,atomic,integer,0,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,resource,profile,number,allocate,resource,function,calls,increment,and,get,build,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile1,new,resource,profile,1,0,2,final,resource,profile,resource,profile2,new,resource,profile,2,0,1,final,slot,request,slot,request1,new,slot,request,new,job,id,allocation,id,resource,profile1,foobar,final,slot,request,slot,request2,new,slot,request,new,job,id,allocation,id,resource,profile2,barfoo,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,slot,manager,register,slot,request,slot,request1,assert,false,slot,manager,register,slot,request,slot,request2,assert,that,number,allocate,resource,function,calls,get,is,1
SlotManagerTest -> @Test 	public void testTimeoutForRejectedSlotRequest() throws Exception;1493386068;Tests that the slot manager re-registers a timeout for a rejected slot request.;@Test_	public void testTimeoutForRejectedSlotRequest() throws Exception {__		final long slotRequestTimeout = 1337L__		final ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceId, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		CompletableFuture<Acknowledge> requestFuture = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(requestFuture)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			Time.milliseconds(slotRequestTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, Executors.directExecutor(), resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			verify(taskExecutorGateway).requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			requestFuture.completeExceptionally(new SlotOccupiedException("Slot is already occupied", allocationId2))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__			verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), eq(slotRequestTimeout), eq(TimeUnit.MILLISECONDS))___			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions).notifyAllocationFailure(eq(jobId), eq(allocationId), any(Exception.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId2, slot.getAllocationId())__		}_	};tests,that,the,slot,manager,re,registers,a,timeout,for,a,rejected,slot,request;test,public,void,test,timeout,for,rejected,slot,request,throws,exception,final,long,slot,request,timeout,1337l,final,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,completable,future,acknowledge,request,future,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,request,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,time,milliseconds,slot,request,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,executors,direct,executor,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,request,future,complete,exceptionally,new,slot,occupied,exception,slot,is,already,occupied,allocation,id2,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,eq,slot,request,timeout,eq,time,unit,milliseconds,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,notify,allocation,failure,eq,job,id,eq,allocation,id,any,exception,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id2,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testTimeoutForRejectedSlotRequest() throws Exception;1493386106;Tests that the slot manager re-registers a timeout for a rejected slot request.;@Test_	public void testTimeoutForRejectedSlotRequest() throws Exception {__		final long slotRequestTimeout = 1337L__		final ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceId, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final AllocationID allocationId2 = new AllocationID()__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")___		CompletableFuture<Acknowledge> requestFuture = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(requestFuture)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = new SlotManager(_			scheduledExecutor,_			TestingUtils.infiniteTime(),_			Time.milliseconds(slotRequestTimeout),_			TestingUtils.infiniteTime())) {__			slotManager.start(leaderId, Executors.directExecutor(), resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			verify(taskExecutorGateway).requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			requestFuture.completeExceptionally(new SlotOccupiedException("Slot is already occupied", allocationId2))___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)__			verify(scheduledExecutor).schedule(runnableArgumentCaptor.capture(), eq(slotRequestTimeout), eq(TimeUnit.MILLISECONDS))___			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions).notifyAllocationFailure(eq(jobId), eq(allocationId), any(Exception.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertTrue(slot.isAllocated())__			assertEquals(allocationId2, slot.getAllocationId())__		}_	};tests,that,the,slot,manager,re,registers,a,timeout,for,a,rejected,slot,request;test,public,void,test,timeout,for,rejected,slot,request,throws,exception,final,long,slot,request,timeout,1337l,final,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,allocation,id,allocation,id2,new,allocation,id,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,completable,future,acknowledge,request,future,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,request,future,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,new,slot,manager,scheduled,executor,testing,utils,infinite,time,time,milliseconds,slot,request,timeout,testing,utils,infinite,time,slot,manager,start,leader,id,executors,direct,executor,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,request,future,complete,exceptionally,new,slot,occupied,exception,slot,is,already,occupied,allocation,id2,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,scheduled,executor,schedule,runnable,argument,captor,capture,eq,slot,request,timeout,eq,time,unit,milliseconds,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,notify,allocation,failure,eq,job,id,eq,allocation,id,any,exception,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,allocated,assert,equals,allocation,id2,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotAdjustedToEmpty();1482522858;Tests that we had a slot in-use, but it's empty according to the SlotReport;@Test_	public void testExistingInUseSlotAdjustedToEmpty() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))____		_		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,had,a,slot,in,use,but,it,s,empty,according,to,the,slot,report;test,public,void,test,existing,in,use,slot,adjusted,to,empty,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotAdjustedToEmpty();1482522861;Tests that we had a slot in-use, but it's empty according to the SlotReport;@Test_	public void testExistingInUseSlotAdjustedToEmpty() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))____		_		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))__	};tests,that,we,had,a,slot,in,use,but,it,s,empty,according,to,the,slot,report;test,public,void,test,existing,in,use,slot,adjusted,to,empty,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1493386068;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1493386106;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1493386106;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1501760738;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1504525441;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1506417942;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1508576514;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1508597556;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1508597556;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1508743918;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1510063665;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1510063666;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1515177485;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1515481550;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1517241957;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1521804757;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1522681180;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1525452496;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1526387042;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1526494919;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1527173115;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1530472204;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1530472204;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1537281140;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1537281162;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1538127492;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			_			final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__			when(taskExecutorGateway.requestSlot(_				eq(slotId),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testSlotRequestWithFreeSlot() throws Exception;1538127495;Tests that a slot request which can be fulfilled will trigger a slot allocation.;@Test_	public void testSlotRequestWithFreeSlot() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder().build()___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			final CompletableFuture<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestFuture = new CompletableFuture<>()__			_			final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_				.setRequestSlotFunction(tuple5 -> {_					requestFuture.complete(Tuple5.of(tuple5.f0, tuple5.f1, tuple5.f2, tuple5.f3, tuple5.f4))__					return CompletableFuture.completedFuture(Acknowledge.get())__				})_				.createTestingTaskExecutorGateway()___			final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___			final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__			final SlotReport slotReport = new SlotReport(slotStatus)___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			assertThat(requestFuture.get(), is(equalTo(Tuple5.of(slotId, jobId, allocationId, targetAddress, resourceManagerId))))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,a,slot,request,which,can,be,fulfilled,will,trigger,a,slot,allocation;test,public,void,test,slot,request,with,free,slot,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,build,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,final,completable,future,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,future,new,completable,future,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,request,future,complete,tuple5,of,tuple5,f0,tuple5,f1,tuple5,f2,tuple5,f3,tuple5,f4,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,assert,that,request,future,get,is,equal,to,tuple5,of,slot,id,job,id,allocation,id,target,address,resource,manager,id,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1482522858;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1482522861;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1482522861;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1482522862;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1482522862;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testDuplicatedSlotRequest();1489060856;Tests that we send duplicated slot request;@Test_	public void testDuplicatedSlotRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 1)___		SlotRequest request1 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE)___		slotManager.requestSlot(request1)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request2)__		slotManager.requestSlot(request1)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,we,send,duplicated,slot,request;test,public,void,test,duplicated,slot,request,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,1,slot,request,request1,new,slot,request,new,job,id,new,allocation,id,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request1,slot,manager,request,slot,request2,slot,manager,request,slot,request2,slot,manager,request,slot,request1,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1493386068;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture2 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,flink,completable,future,acknowledge,slot,request,future2,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1493386106;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture2 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,flink,completable,future,acknowledge,slot,request,future2,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1493386106;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture1 = new FlinkCompletableFuture<>()__		final FlinkCompletableFuture<Acknowledge> slotRequestFuture2 = new FlinkCompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,flink,completable,future,acknowledge,slot,request,future1,new,flink,completable,future,final,flink,completable,future,acknowledge,slot,request,future2,new,flink,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1501760738;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(UUID.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(leaderId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,uuid,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1504525441;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1506417942;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.isAllocated())__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.isFree())__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,is,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,is,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1508576514;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1508597556;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1508597556;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1508743918;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1510063665;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1510063666;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1515177485;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1515481550;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1517241957;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1521804757;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1522681180;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final ResourceID resourceId = ResourceID.generate()__		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1525452496;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1526387042;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1526494919;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1527173115;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1530472204;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1530472204;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1537281140;Tests that a slot request is retried if it times out on the task manager side;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1537281162;Tests that a slot request is retried if it times out on the task manager side.;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1538127492;Tests that a slot request is retried if it times out on the task manager side.;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	@SuppressWarnings("unchecked") 	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception;1538127495;Tests that a slot request is retried if it times out on the task manager side.;@Test_	@SuppressWarnings("unchecked")_	public void testTaskManagerSlotRequestTimeoutHandling() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)___		final JobID jobId = new JobID()__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(jobId, allocationId, resourceProfile, "foobar")__		final CompletableFuture<Acknowledge> slotRequestFuture1 = new CompletableFuture<>()__		final CompletableFuture<Acknowledge> slotRequestFuture2 = new CompletableFuture<>()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			eq(allocationId),_			anyString(),_			any(ResourceManagerId.class),_			any(Time.class))).thenReturn(slotRequestFuture1, slotRequestFuture2)___		final ResourceID resourceId = ResourceID.generate()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceId, taskExecutorGateway)___		final SlotID slotId1 = new SlotID(resourceId, 0)__		final SlotID slotId2 = new SlotID(resourceId, 1)__		final SlotStatus slotStatus1 = new SlotStatus(slotId1, resourceProfile)__		final SlotStatus slotStatus2 = new SlotStatus(slotId2, resourceProfile)__		final SlotReport slotReport = new SlotReport(Arrays.asList(slotStatus1, slotStatus2))___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			slotManager.registerSlotRequest(slotRequest)___			ArgumentCaptor<SlotID> slotIdCaptor = ArgumentCaptor.forClass(SlotID.class)___			verify(taskExecutorGateway, times(1)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			TaskManagerSlot failedSlot = slotManager.getSlot(slotIdCaptor.getValue())___			_			slotRequestFuture1.completeExceptionally(new SlotAllocationException("Test exception."))___			verify(taskExecutorGateway, times(2)).requestSlot(_				slotIdCaptor.capture(),_				eq(jobId),_				eq(allocationId),_				anyString(),_				eq(resourceManagerId),_				any(Time.class))___			_			slotRequestFuture2.complete(Acknowledge.get())___			TaskManagerSlot slot = slotManager.getSlot(slotIdCaptor.getValue())___			assertTrue(slot.getState() == TaskManagerSlot.State.ALLOCATED)__			assertEquals(allocationId, slot.getAllocationId())___			if (!failedSlot.getSlotId().equals(slot.getSlotId())) {_				assertTrue(failedSlot.getState() == TaskManagerSlot.State.FREE)__			}_		}_	};tests,that,a,slot,request,is,retried,if,it,times,out,on,the,task,manager,side;test,suppress,warnings,unchecked,public,void,test,task,manager,slot,request,timeout,handling,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,job,id,job,id,new,job,id,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,foobar,final,completable,future,acknowledge,slot,request,future1,new,completable,future,final,completable,future,acknowledge,slot,request,future2,new,completable,future,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,eq,allocation,id,any,string,any,resource,manager,id,class,any,time,class,then,return,slot,request,future1,slot,request,future2,final,resource,id,resource,id,resource,id,generate,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id1,new,slot,id,resource,id,0,final,slot,id,slot,id2,new,slot,id,resource,id,1,final,slot,status,slot,status1,new,slot,status,slot,id1,resource,profile,final,slot,status,slot,status2,new,slot,status,slot,id2,resource,profile,final,slot,report,slot,report,new,slot,report,arrays,as,list,slot,status1,slot,status2,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,slot,manager,register,slot,request,slot,request,argument,captor,slot,id,slot,id,captor,argument,captor,for,class,slot,id,class,verify,task,executor,gateway,times,1,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,task,manager,slot,failed,slot,slot,manager,get,slot,slot,id,captor,get,value,slot,request,future1,complete,exceptionally,new,slot,allocation,exception,test,exception,verify,task,executor,gateway,times,2,request,slot,slot,id,captor,capture,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,slot,request,future2,complete,acknowledge,get,task,manager,slot,slot,slot,manager,get,slot,slot,id,captor,get,value,assert,true,slot,get,state,task,manager,slot,state,allocated,assert,equals,allocation,id,slot,get,allocation,id,if,failed,slot,get,slot,id,equals,slot,get,slot,id,assert,true,failed,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1493386068;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			verify(mainThreadExecutor, timeout(tmTimeout * 10L)).execute(runnableArgumentCaptor.capture())___			_			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,timeout,tm,timeout,10l,execute,runnable,argument,captor,capture,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1493386106;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 50L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = mock(Executor.class)___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			ArgumentCaptor<Runnable> runnableArgumentCaptor = ArgumentCaptor.forClass(Runnable.class)___			verify(mainThreadExecutor, timeout(tmTimeout * 10L)).execute(runnableArgumentCaptor.capture())___			_			Runnable timeoutRunnable = runnableArgumentCaptor.getValue()___			timeoutRunnable.run()___			verify(resourceManagerActions, times(1)).releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,50l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,mock,executor,class,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,argument,captor,runnable,runnable,argument,captor,argument,captor,for,class,runnable,class,verify,main,thread,executor,timeout,tm,timeout,10l,execute,runnable,argument,captor,capture,runnable,timeout,runnable,runnable,argument,captor,get,value,timeout,runnable,run,verify,resource,manager,actions,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1493386106;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1501760738;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final UUID leaderId = UUID.randomUUID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(leaderId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,uuid,leader,id,uuid,random,uuid,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,leader,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1504525441;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1506417942;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1508576514;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1508597556;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1508597556;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1508743918;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1510063665;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1510063666;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1515177485;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1515481550;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1517241957;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1521804757;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1522681180;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1525452496;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1526387042;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1526494919;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1527173115;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1530472204;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1530472204;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1537281140;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1537281162;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1538127492;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 500L___		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(new Runnable() {_				@Override_				public void run() {_					slotManager.registerTaskManager(taskManagerConnection, slotReport)__				}_			})___			verify(resourceManagerActions, timeout(100L * tmTimeout).times(1))_				.releaseResource(eq(taskManagerConnection.getInstanceID()), any(Exception.class))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,500l,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,new,runnable,override,public,void,run,slot,manager,register,task,manager,task,manager,connection,slot,report,verify,resource,manager,actions,timeout,100l,tm,timeout,times,1,release,resource,eq,task,manager,connection,get,instance,id,any,exception,class
SlotManagerTest -> @Test 	public void testTaskManagerTimeout() throws Exception;1538127495;Tests that idle task managers time out after the configured timeout. A timed out task manager_will be removed from the slot manager and the resource manager will be notified about the_timeout.;@Test_	public void testTaskManagerTimeout() throws Exception {_		final long tmTimeout = 10L___		final CompletableFuture<InstanceID> releaseFuture = new CompletableFuture<>()__		final ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setReleaseResourceConsumer((instanceID, e) -> releaseFuture.complete(instanceID))_			.build()__		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotID slotId = new SlotID(resourceID, 0)__		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final Executor mainThreadExecutor = TestingUtils.defaultExecutor()___		try (SlotManager slotManager = new SlotManager(_			TestingUtils.defaultScheduledExecutor(),_			TestingUtils.infiniteTime(),_			TestingUtils.infiniteTime(),_			Time.milliseconds(tmTimeout))) {__			slotManager.start(resourceManagerId, mainThreadExecutor, resourceManagerActions)___			mainThreadExecutor.execute(() -> slotManager.registerTaskManager(taskManagerConnection, slotReport))___			assertThat(releaseFuture.get(), is(equalTo(taskManagerConnection.getInstanceID())))__		}_	};tests,that,idle,task,managers,time,out,after,the,configured,timeout,a,timed,out,task,manager,will,be,removed,from,the,slot,manager,and,the,resource,manager,will,be,notified,about,the,timeout;test,public,void,test,task,manager,timeout,throws,exception,final,long,tm,timeout,10l,final,completable,future,instance,id,release,future,new,completable,future,final,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,release,resource,consumer,instance,id,e,release,future,complete,instance,id,build,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,id,slot,id,new,slot,id,resource,id,0,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,executor,main,thread,executor,testing,utils,default,executor,try,slot,manager,slot,manager,new,slot,manager,testing,utils,default,scheduled,executor,testing,utils,infinite,time,testing,utils,infinite,time,time,milliseconds,tm,timeout,slot,manager,start,resource,manager,id,main,thread,executor,resource,manager,actions,main,thread,executor,execute,slot,manager,register,task,manager,task,manager,connection,slot,report,assert,that,release,future,get,is,equal,to,task,manager,connection,get,instance,id
SlotManagerTest -> @Test 	public void testRegistrationOfDifferentSlot() throws Exception;1538127492;Tests that a different slot can fulfill a pending slot request. If the_pending slot request has a pending task manager slot assigned, it should_be freed.;@Test_	public void testRegistrationOfDifferentSlot() throws Exception {_		final int numberSlots = 1__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			final ResourceProfile requestedSlotProfile = new ResourceProfile(1.0, 1)___			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId, requestedSlotProfile)), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))___			final int numberOfferedSlots = 1__			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final ResourceProfile offeredSlotProfile = new ResourceProfile(2.0, 2)__			final SlotReport slotReport = createSlotReport(taskExecutorConnection.getResourceID(), numberOfferedSlots, offeredSlotProfile)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(numberOfferedSlots))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(0))__		}_	};tests,that,a,different,slot,can,fulfill,a,pending,slot,request,if,the,pending,slot,request,has,a,pending,task,manager,slot,assigned,it,should,be,freed;test,public,void,test,registration,of,different,slot,throws,exception,final,int,number,slots,1,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,final,resource,profile,requested,slot,profile,new,resource,profile,1,0,1,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,requested,slot,profile,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,final,int,number,offered,slots,1,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,resource,profile,offered,slot,profile,new,resource,profile,2,0,2,final,slot,report,slot,report,create,slot,report,task,executor,connection,get,resource,id,number,offered,slots,offered,slot,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,number,offered,slots,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,0
SlotManagerTest -> @Test 	public void testRegistrationOfDifferentSlot() throws Exception;1538127495;Tests that a different slot can fulfill a pending slot request. If the_pending slot request has a pending task manager slot assigned, it should_be freed.;@Test_	public void testRegistrationOfDifferentSlot() throws Exception {_		final int numberSlots = 1__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			final ResourceProfile requestedSlotProfile = new ResourceProfile(1.0, 1)___			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId, requestedSlotProfile)), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))___			final int numberOfferedSlots = 1__			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final ResourceProfile offeredSlotProfile = new ResourceProfile(2.0, 2)__			final SlotReport slotReport = createSlotReport(taskExecutorConnection.getResourceID(), numberOfferedSlots, offeredSlotProfile)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(numberOfferedSlots))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(0))__		}_	};tests,that,a,different,slot,can,fulfill,a,pending,slot,request,if,the,pending,slot,request,has,a,pending,task,manager,slot,assigned,it,should,be,freed;test,public,void,test,registration,of,different,slot,throws,exception,final,int,number,slots,1,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,final,resource,profile,requested,slot,profile,new,resource,profile,1,0,1,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,requested,slot,profile,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,final,int,number,offered,slots,1,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,resource,profile,offered,slot,profile,new,resource,profile,2,0,2,final,slot,report,slot,report,create,slot,report,task,executor,connection,get,resource,id,number,offered,slots,offered,slot,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,number,offered,slots,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,0
SlotManagerTest -> @Test 	public void testMultipleSlotRequestsWithOneSlot();1482522861;Tests multiple slot requests with one slots.;@Test_	public void testMultipleSlotRequestsWithOneSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final AllocationID allocationID = new AllocationID()___		SlotRequest request1 = new SlotRequest(new JobID(), allocationID, DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		final ResourceID resourceID = ResourceID.generate()__		final SlotStatus slotStatus = new SlotStatus(new SlotID(resourceID, 0), DEFAULT_TESTING_PROFILE)__		final SlotReport slotReport = new SlotReport(slotStatus)__		slotManager.registerTaskExecutor(resourceID, taskExecutorRegistration, slotReport)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(allocationID))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotStatus.getSlotID()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,multiple,slot,requests,with,one,slots;test,public,void,test,multiple,slot,requests,with,one,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,final,allocation,id,allocation,id,new,allocation,id,slot,request,request1,new,slot,request,new,job,id,allocation,id,slot,manager,request,slot,request1,final,resource,id,resource,id,resource,id,generate,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,executor,resource,id,task,executor,registration,slot,report,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,allocation,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,status,get,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testMultipleSlotRequestsWithOneSlot();1482522862;Tests multiple slot requests with one slots.;@Test_	public void testMultipleSlotRequestsWithOneSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final AllocationID allocationID = new AllocationID()___		SlotRequest request1 = new SlotRequest(new JobID(), allocationID, DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		final ResourceID resourceID = ResourceID.generate()__		final SlotStatus slotStatus = new SlotStatus(new SlotID(resourceID, 0), DEFAULT_TESTING_PROFILE)__		final SlotReport slotReport = new SlotReport(slotStatus)__		slotManager.registerTaskExecutor(resourceID, taskExecutorRegistration, slotReport)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(allocationID))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotStatus.getSlotID()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,multiple,slot,requests,with,one,slots;test,public,void,test,multiple,slot,requests,with,one,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,final,allocation,id,allocation,id,new,allocation,id,slot,request,request1,new,slot,request,new,job,id,allocation,id,slot,manager,request,slot,request1,final,resource,id,resource,id,resource,id,generate,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,executor,resource,id,task,executor,registration,slot,report,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,allocation,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,status,get,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testMultipleSlotRequestsWithOneSlot();1482522862;Tests multiple slot requests with one slots.;@Test_	public void testMultipleSlotRequestsWithOneSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final AllocationID allocationID = new AllocationID()___		SlotRequest request1 = new SlotRequest(new JobID(), allocationID, DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		final ResourceID resourceID = ResourceID.generate()__		final SlotStatus slotStatus = new SlotStatus(new SlotID(resourceID, 0), DEFAULT_TESTING_PROFILE)__		final SlotReport slotReport = new SlotReport(slotStatus)__		slotManager.registerTaskExecutor(resourceID, taskExecutorRegistration, slotReport)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(allocationID))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotStatus.getSlotID()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,multiple,slot,requests,with,one,slots;test,public,void,test,multiple,slot,requests,with,one,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,final,allocation,id,allocation,id,new,allocation,id,slot,request,request1,new,slot,request,new,job,id,allocation,id,slot,manager,request,slot,request1,final,resource,id,resource,id,resource,id,generate,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,executor,resource,id,task,executor,registration,slot,report,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,allocation,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,status,get,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testMultipleSlotRequestsWithOneSlot();1489060856;Tests multiple slot requests with one slots.;@Test_	public void testMultipleSlotRequestsWithOneSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		final AllocationID allocationID = new AllocationID()___		SlotRequest request1 = new SlotRequest(new JobID(), allocationID, DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request1)___		final ResourceID resourceID = ResourceID.generate()__		final SlotStatus slotStatus = new SlotStatus(new SlotID(resourceID, 0), DEFAULT_TESTING_PROFILE)__		final SlotReport slotReport = new SlotReport(slotStatus)__		slotManager.registerTaskExecutor(resourceID, taskExecutorRegistration, slotReport)___		_		SlotRequest request2 = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(allocationID))__		assertTrue(slotManager.isAllocated(request1.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotStatus.getSlotID()))__		assertTrue(slotManager.isAllocated(request2.getAllocationId()))___		_		slotManager.notifySlotAvailable(resourceID, slotStatus.getSlotID())___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,multiple,slot,requests,with,one,slots;test,public,void,test,multiple,slot,requests,with,one,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,final,allocation,id,allocation,id,new,allocation,id,slot,request,request1,new,slot,request,new,job,id,allocation,id,slot,manager,request,slot,request1,final,resource,id,resource,id,resource,id,generate,final,slot,status,slot,status,new,slot,status,new,slot,id,resource,id,0,final,slot,report,slot,report,new,slot,report,slot,status,slot,manager,register,task,executor,resource,id,task,executor,registration,slot,report,slot,request,request2,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,allocation,id,assert,true,slot,manager,is,allocated,request1,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,status,get,slot,id,assert,true,slot,manager,is,allocated,request2,get,allocation,id,slot,manager,notify,slot,available,resource,id,slot,status,get,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1482522858;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1482522861;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1482522861;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1482522862;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1482522862;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testRequestSlotWithoutFreeSlot();1489060856;Tests that there are no free slots when we request, need to allocate from cluster manager master;@Test_	public void testRequestSlotWithoutFreeSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertEquals(1, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_PROFILE, slotManager.getAllocatedContainers().get(0))__	};tests,that,there,are,no,free,slots,when,we,request,need,to,allocate,from,cluster,manager,master;test,public,void,test,request,slot,without,free,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,equals,1,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1482522858;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1482522861;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1482522861;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1482522862;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1482522862;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedInUseSlot();1489060856;Tests that a new slot appeared in SlotReport, and it's been reported using by some job;@Test_	public void testNewlyAppearedInUseSlot() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,it,s,been,reported,using,by,some,job;test,public,void,test,newly,appeared,in,use,slot,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1482522858;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,gateway,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1482522861;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorGateway)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,gateway,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1482522861;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorRegistration)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,registration,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1482522862;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorRegistration)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,registration,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1482522862;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorRegistration)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,registration,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotAllocationFailedAtTaskManager();1489060856;Tests that we did some allocation but failed / rejected by TaskManager, request will retry;@Test_	public void testSlotAllocationFailedAtTaskManager() {_		TestingSlotManager slotManager = new TestingSlotManager()__		ResourceSlot slot = new ResourceSlot(SlotID.generate(), DEFAULT_TESTING_PROFILE, taskExecutorRegistration)__		slotManager.addFreeSlot(slot)___		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slot.getSlotId()))___		slotManager.handleSlotRequestFailedAtTaskManager(request, slot.getSlotId())___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__	};tests,that,we,did,some,allocation,but,failed,rejected,by,task,manager,request,will,retry;test,public,void,test,slot,allocation,failed,at,task,manager,testing,slot,manager,slot,manager,new,testing,slot,manager,resource,slot,slot,new,resource,slot,slot,id,generate,task,executor,registration,slot,manager,add,free,slot,slot,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,get,slot,id,slot,manager,handle,slot,request,failed,at,task,manager,request,slot,get,slot,id,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1493386068;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1493386106;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1493386106;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1501760738;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1504525441;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1506417942;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1508576514;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1508597556;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1508597556;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1508743918;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1510063665;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1510063666;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1515177485;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1515481550;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1517241957;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1521804757;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1522681180;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1525452496;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1526387042;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1526494919;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1527173115;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1530472204;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1530472204;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1537281140;Tests that a slot request with no free slots will trigger the resource allocation;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1537281162;Tests that a slot request with no free slots will trigger the resource allocation.;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			verify(resourceManagerActions).allocateResource(eq(resourceProfile))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,resource,actions,resource,manager,actions,mock,resource,actions,class,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,allocate,resource,eq,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1538127492;Tests that a slot request with no free slots will trigger the resource allocation.;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		CompletableFuture<ResourceProfile> allocateResourceFuture = new CompletableFuture<>()__		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(allocateResourceFuture::complete)_			.build()___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			assertThat(allocateResourceFuture.get(), is(equalTo(resourceProfile)))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,completable,future,resource,profile,allocate,resource,future,new,completable,future,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,allocate,resource,future,complete,build,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,assert,that,allocate,resource,future,get,is,equal,to,resource,profile
SlotManagerTest -> @Test 	public void testSlotRequestWithoutFreeSlots() throws Exception;1538127495;Tests that a slot request with no free slots will trigger the resource allocation.;@Test_	public void testSlotRequestWithoutFreeSlots() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			new JobID(),_			new AllocationID(),_			resourceProfile,_			"localhost")___		CompletableFuture<ResourceProfile> allocateResourceFuture = new CompletableFuture<>()__		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(allocateResourceFuture::complete)_			.build()___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			slotManager.registerSlotRequest(slotRequest)___			assertThat(allocateResourceFuture.get(), is(equalTo(resourceProfile)))__		}_	};tests,that,a,slot,request,with,no,free,slots,will,trigger,the,resource,allocation;test,public,void,test,slot,request,without,free,slots,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,new,job,id,new,allocation,id,resource,profile,localhost,completable,future,resource,profile,allocate,resource,future,new,completable,future,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,allocate,resource,future,complete,build,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,assert,that,allocate,resource,future,get,is,equal,to,resource,profile
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1493386068;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1493386106;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1493386106;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new FlinkCompletableFuture<Acknowledge>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,flink,completable,future,acknowledge,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1501760738;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,leader,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1504525441;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1506417942;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.hasPendingSlotRequest())___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.isFree())__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,has,pending,slot,request,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,is,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1508576514;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1508597556;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1508597556;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1508743918;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1510063665;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			_			slotManager.registerSlotRequest(slotRequest)__			PendingSlotRequest pendingSlotRequest = slotManager.getSlotRequest(allocationId)__			assertFalse(pendingSlotRequest.isAssigned())___			slotManager.unregisterSlotRequest(allocationId)__			pendingSlotRequest = slotManager.getSlotRequest(allocationId)__			assertTrue(pendingSlotRequest == null)___			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,slot,request,slot,request,pending,slot,request,pending,slot,request,slot,manager,get,slot,request,allocation,id,assert,false,pending,slot,request,is,assigned,slot,manager,unregister,slot,request,allocation,id,pending,slot,request,slot,manager,get,slot,request,allocation,id,assert,true,pending,slot,request,null,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1510063666;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1515177485;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1515481550;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1517241957;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1521804757;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1522681180;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final SlotID slotId = new SlotID(ResourceID.generate(), 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,slot,id,slot,id,new,slot,id,resource,id,generate,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1525452496;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1526387042;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1526494919;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1527173115;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1530472204;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1530472204;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1537281140;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1537281162;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1538127492;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			any(SlotID.class),_			any(JobID.class),_			any(AllocationID.class),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(new CompletableFuture<>())___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,any,slot,id,class,any,job,id,class,any,allocation,id,class,any,string,eq,resource,manager,id,any,time,class,then,return,new,completable,future,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testUnregisterPendingSlotRequest() throws Exception;1538127495;Checks that un-registering a pending slot request will cancel it, removing it from all_assigned task manager slots and then remove it from the slot manager.;@Test_	public void testUnregisterPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceActions resourceManagerActions = mock(ResourceActions.class)__		final ResourceID resourceID = ResourceID.generate()__		final SlotID slotId = new SlotID(resourceID, 0)__		final AllocationID allocationId = new AllocationID()___		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setRequestSlotFunction(slotIDJobIDAllocationIDStringResourceManagerIdTuple5 -> new CompletableFuture<>())_			.createTestingTaskExecutorGateway()___		final ResourceProfile resourceProfile = new ResourceProfile(1.0, 1)__		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		final SlotRequest slotRequest = new SlotRequest(new JobID(), allocationId, resourceProfile, "foobar")___		final TaskExecutorConnection taskManagerConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {_			slotManager.registerTaskManager(taskManagerConnection, slotReport)___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			slotManager.registerSlotRequest(slotRequest)___			assertNotNull(slotManager.getSlotRequest(allocationId))___			assertTrue(slot.getState() == TaskManagerSlot.State.PENDING)___			slotManager.unregisterSlotRequest(allocationId)___			assertNull(slotManager.getSlotRequest(allocationId))___			slot = slotManager.getSlot(slotId)__			assertTrue(slot.getState() == TaskManagerSlot.State.FREE)__		}_	};checks,that,un,registering,a,pending,slot,request,will,cancel,it,removing,it,from,all,assigned,task,manager,slots,and,then,remove,it,from,the,slot,manager;test,public,void,test,unregister,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,actions,resource,manager,actions,mock,resource,actions,class,final,resource,id,resource,id,resource,id,generate,final,slot,id,slot,id,new,slot,id,resource,id,0,final,allocation,id,allocation,id,new,allocation,id,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,slot,idjob,idallocation,idstring,resource,manager,id,tuple5,new,completable,future,create,testing,task,executor,gateway,final,resource,profile,resource,profile,new,resource,profile,1,0,1,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,final,slot,request,slot,request,new,slot,request,new,job,id,allocation,id,resource,profile,foobar,final,task,executor,connection,task,manager,connection,new,task,executor,connection,resource,id,task,executor,gateway,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,slot,manager,register,task,manager,task,manager,connection,slot,report,task,manager,slot,slot,slot,manager,get,slot,slot,id,slot,manager,register,slot,request,slot,request,assert,not,null,slot,manager,get,slot,request,allocation,id,assert,true,slot,get,state,task,manager,slot,state,pending,slot,manager,unregister,slot,request,allocation,id,assert,null,slot,manager,get,slot,request,allocation,id,slot,slot,manager,get,slot,slot,id,assert,true,slot,get,state,task,manager,slot,state,free
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1482522858;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1482522861;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1482522861;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1482522862;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1482522862;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotNotMatchPendingRequests();1489060856;Tests that a new slot appeared in SlotReport, but it't not suitable for all the pending requests;@Test_	public void testNewlyAppearedFreeSlotNotMatchPendingRequests() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(1, slotManager.getPendingRequestCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,but,it,t,not,suitable,for,all,the,pending,requests;test,public,void,test,newly,appeared,free,slot,not,match,pending,requests,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,1,slot,manager,get,pending,request,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1530472204;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final List<Tuple2<JobID, AllocationID>> notifiedTaskManagerInfos = new ArrayList<>()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), new TestingResourceActions() {_				@Override_				public void notifyAllocationFailure(JobID jobId, AllocationID allocationId, Exception cause) {_					notifiedTaskManagerInfos.add(new Tuple2<>(jobId, allocationId))__				}})) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = new SlotRequest(jobId1, new AllocationID(), ResourceProfile.UNKNOWN, "foobar1")__			final SlotRequest slotRequest12 = new SlotRequest(jobId1, new AllocationID(), ResourceProfile.UNKNOWN, "foobar1")__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder()_				.createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final Set<SlotStatus> tm1SlotStatusList = new HashSet<>()__			tm1SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId1, 0), ResourceProfile.UNKNOWN))__			tm1SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId1, 1), ResourceProfile.UNKNOWN))___			_			slotManager.registerTaskManager(taskExecutionConnection1, new SlotReport(tm1SlotStatusList))___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = new SlotRequest(jobId2, new AllocationID(), ResourceProfile.UNKNOWN, "foobar2")__			final SlotRequest slotRequest22 = new SlotRequest(jobId2, new AllocationID(), ResourceProfile.UNKNOWN, "foobar2")__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = new SlotRequest(jobId3, new AllocationID(), ResourceProfile.UNKNOWN, "foobar3")__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder()_				.createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final Set<SlotStatus> tm2SlotStatusList = new HashSet<>()__			tm2SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId2, 0), ResourceProfile.UNKNOWN))__			tm2SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId2, 1), ResourceProfile.UNKNOWN))__			tm2SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId2, 2), ResourceProfile.UNKNOWN))__			tm2SlotStatusList.add(new SlotStatus(new SlotID(taskExecutorResourceId2, 3), ResourceProfile.UNKNOWN))___			_			slotManager.registerTaskManager(taskExecutionConnection2, new SlotReport(tm2SlotStatusList))___			__			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertEquals(2, notifiedTaskManagerInfos.size())___			assertThat(jobId1, equalTo(notifiedTaskManagerInfos.get(0).f0))__			assertThat(jobId1, equalTo(notifiedTaskManagerInfos.get(1).f0))___			assertEquals(Stream.of(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()).collect(Collectors.toSet()),_				Stream.of(notifiedTaskManagerInfos.get(0).f1, notifiedTaskManagerInfos.get(1).f1).collect(Collectors.toSet()))___			notifiedTaskManagerInfos.clear()___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertEquals(3, notifiedTaskManagerInfos.size())___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = notifiedTaskManagerInfos.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertEquals(2, job2AndJob3FailedAllocationInfo.size())___			_			assertEquals(Stream.of(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()).collect(Collectors.toSet()),_				job2AndJob3FailedAllocationInfo.get(jobId2).stream().map(tuple2 -> tuple2.f1).collect(Collectors.toSet()))___			_			assertEquals(Stream.of(slotRequest31.getAllocationId()).collect(Collectors.toSet()),_				job2AndJob3FailedAllocationInfo.get(jobId3).stream().map(tuple2 -> tuple2.f1).collect(Collectors.toSet()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,list,tuple2,job,id,allocation,id,notified,task,manager,infos,new,array,list,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,new,testing,resource,actions,override,public,void,notify,allocation,failure,job,id,job,id,allocation,id,allocation,id,exception,cause,notified,task,manager,infos,add,new,tuple2,job,id,allocation,id,job,id,job,id1,new,job,id,final,slot,request,slot,request11,new,slot,request,job,id1,new,allocation,id,resource,profile,unknown,foobar1,final,slot,request,slot,request12,new,slot,request,job,id1,new,allocation,id,resource,profile,unknown,foobar1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,set,slot,status,tm1slot,status,list,new,hash,set,tm1slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id1,0,resource,profile,unknown,tm1slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id1,1,resource,profile,unknown,slot,manager,register,task,manager,task,execution,connection1,new,slot,report,tm1slot,status,list,job,id,job,id2,new,job,id,final,slot,request,slot,request21,new,slot,request,job,id2,new,allocation,id,resource,profile,unknown,foobar2,final,slot,request,slot,request22,new,slot,request,job,id2,new,allocation,id,resource,profile,unknown,foobar2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,new,slot,request,job,id3,new,allocation,id,resource,profile,unknown,foobar3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,set,slot,status,tm2slot,status,list,new,hash,set,tm2slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id2,0,resource,profile,unknown,tm2slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id2,1,resource,profile,unknown,tm2slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id2,2,resource,profile,unknown,tm2slot,status,list,add,new,slot,status,new,slot,id,task,executor,resource,id2,3,resource,profile,unknown,slot,manager,register,task,manager,task,execution,connection2,new,slot,report,tm2slot,status,list,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,equals,2,notified,task,manager,infos,size,assert,that,job,id1,equal,to,notified,task,manager,infos,get,0,f0,assert,that,job,id1,equal,to,notified,task,manager,infos,get,1,f0,assert,equals,stream,of,slot,request11,get,allocation,id,slot,request12,get,allocation,id,collect,collectors,to,set,stream,of,notified,task,manager,infos,get,0,f1,notified,task,manager,infos,get,1,f1,collect,collectors,to,set,notified,task,manager,infos,clear,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,equals,3,notified,task,manager,infos,size,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,notified,task,manager,infos,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,equals,2,job2and,job3failed,allocation,info,size,assert,equals,stream,of,slot,request21,get,allocation,id,slot,request22,get,allocation,id,collect,collectors,to,set,job2and,job3failed,allocation,info,get,job,id2,stream,map,tuple2,tuple2,f1,collect,collectors,to,set,assert,equals,stream,of,slot,request31,get,allocation,id,collect,collectors,to,set,job2and,job3failed,allocation,info,get,job,id3,stream,map,tuple2,tuple2,f1,collect,collectors,to,set
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1530472204;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final Queue<Tuple2<JobID, AllocationID>> allocationFailures = new ArrayDeque<>(5)___		final TestingResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(_				(Tuple3<JobID, AllocationID, Exception> failureMessage) ->_					allocationFailures.offer(Tuple2.of(failureMessage.f0, failureMessage.f1)))_			.createTestingResourceActions()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			resourceManagerActions)) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = createSlotRequest(jobId1)__			final SlotRequest slotRequest12 = createSlotRequest(jobId1)__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final SlotReport slotReport1 = createSlotReport(taskExecutorResourceId1, 2)___			_			slotManager.registerTaskManager(taskExecutionConnection1, slotReport1)___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = createSlotRequest(jobId2)__			final SlotRequest slotRequest22 = createSlotRequest(jobId2)__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = createSlotRequest(jobId3)__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final SlotReport slotReport2 = createSlotReport(taskExecutorResourceId2, 3)___			_			slotManager.registerTaskManager(taskExecutionConnection2, slotReport2)___			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertThat(allocationFailures, hasSize(2))___			Tuple2<JobID, AllocationID> allocationFailure__			final Set<AllocationID> failedAllocations = new HashSet<>(2)___			while ((allocationFailure = allocationFailures.poll()) != null) {_				assertThat(allocationFailure.f0, equalTo(jobId1))__				failedAllocations.add(allocationFailure.f1)__			}__			assertThat(failedAllocations, containsInAnyOrder(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()))___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertThat(allocationFailures, hasSize(3))___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertThat(job2AndJob3FailedAllocationInfo.entrySet(), hasSize(2))___			final Set<AllocationID> job2FailedAllocations = extractFailedAllocationsForJob(jobId2, job2AndJob3FailedAllocationInfo)__			final Set<AllocationID> job3FailedAllocations = extractFailedAllocationsForJob(jobId3, job2AndJob3FailedAllocationInfo)___			assertThat(job2FailedAllocations, containsInAnyOrder(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()))__			assertThat(job3FailedAllocations, containsInAnyOrder(slotRequest31.getAllocationId()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,queue,tuple2,job,id,allocation,id,allocation,failures,new,array,deque,5,final,testing,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,job,id,allocation,id,exception,failure,message,allocation,failures,offer,tuple2,of,failure,message,f0,failure,message,f1,create,testing,resource,actions,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,manager,actions,job,id,job,id1,new,job,id,final,slot,request,slot,request11,create,slot,request,job,id1,final,slot,request,slot,request12,create,slot,request,job,id1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,slot,report,slot,report1,create,slot,report,task,executor,resource,id1,2,slot,manager,register,task,manager,task,execution,connection1,slot,report1,job,id,job,id2,new,job,id,final,slot,request,slot,request21,create,slot,request,job,id2,final,slot,request,slot,request22,create,slot,request,job,id2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,create,slot,request,job,id3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,slot,report,slot,report2,create,slot,report,task,executor,resource,id2,3,slot,manager,register,task,manager,task,execution,connection2,slot,report2,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,that,allocation,failures,has,size,2,tuple2,job,id,allocation,id,allocation,failure,final,set,allocation,id,failed,allocations,new,hash,set,2,while,allocation,failure,allocation,failures,poll,null,assert,that,allocation,failure,f0,equal,to,job,id1,failed,allocations,add,allocation,failure,f1,assert,that,failed,allocations,contains,in,any,order,slot,request11,get,allocation,id,slot,request12,get,allocation,id,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,that,allocation,failures,has,size,3,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,allocation,failures,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,that,job2and,job3failed,allocation,info,entry,set,has,size,2,final,set,allocation,id,job2failed,allocations,extract,failed,allocations,for,job,job,id2,job2and,job3failed,allocation,info,final,set,allocation,id,job3failed,allocations,extract,failed,allocations,for,job,job,id3,job2and,job3failed,allocation,info,assert,that,job2failed,allocations,contains,in,any,order,slot,request21,get,allocation,id,slot,request22,get,allocation,id,assert,that,job3failed,allocations,contains,in,any,order,slot,request31,get,allocation,id
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1537281140;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final Queue<Tuple2<JobID, AllocationID>> allocationFailures = new ArrayDeque<>(5)___		final TestingResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(_				(Tuple3<JobID, AllocationID, Exception> failureMessage) ->_					allocationFailures.offer(Tuple2.of(failureMessage.f0, failureMessage.f1)))_			.createTestingResourceActions()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			resourceManagerActions)) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = createSlotRequest(jobId1)__			final SlotRequest slotRequest12 = createSlotRequest(jobId1)__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final SlotReport slotReport1 = createSlotReport(taskExecutorResourceId1, 2)___			_			slotManager.registerTaskManager(taskExecutionConnection1, slotReport1)___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = createSlotRequest(jobId2)__			final SlotRequest slotRequest22 = createSlotRequest(jobId2)__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = createSlotRequest(jobId3)__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final SlotReport slotReport2 = createSlotReport(taskExecutorResourceId2, 3)___			_			slotManager.registerTaskManager(taskExecutionConnection2, slotReport2)___			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertThat(allocationFailures, hasSize(2))___			Tuple2<JobID, AllocationID> allocationFailure__			final Set<AllocationID> failedAllocations = new HashSet<>(2)___			while ((allocationFailure = allocationFailures.poll()) != null) {_				assertThat(allocationFailure.f0, equalTo(jobId1))__				failedAllocations.add(allocationFailure.f1)__			}__			assertThat(failedAllocations, containsInAnyOrder(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()))___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertThat(allocationFailures, hasSize(3))___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertThat(job2AndJob3FailedAllocationInfo.entrySet(), hasSize(2))___			final Set<AllocationID> job2FailedAllocations = extractFailedAllocationsForJob(jobId2, job2AndJob3FailedAllocationInfo)__			final Set<AllocationID> job3FailedAllocations = extractFailedAllocationsForJob(jobId3, job2AndJob3FailedAllocationInfo)___			assertThat(job2FailedAllocations, containsInAnyOrder(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()))__			assertThat(job3FailedAllocations, containsInAnyOrder(slotRequest31.getAllocationId()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,queue,tuple2,job,id,allocation,id,allocation,failures,new,array,deque,5,final,testing,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,job,id,allocation,id,exception,failure,message,allocation,failures,offer,tuple2,of,failure,message,f0,failure,message,f1,create,testing,resource,actions,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,manager,actions,job,id,job,id1,new,job,id,final,slot,request,slot,request11,create,slot,request,job,id1,final,slot,request,slot,request12,create,slot,request,job,id1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,slot,report,slot,report1,create,slot,report,task,executor,resource,id1,2,slot,manager,register,task,manager,task,execution,connection1,slot,report1,job,id,job,id2,new,job,id,final,slot,request,slot,request21,create,slot,request,job,id2,final,slot,request,slot,request22,create,slot,request,job,id2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,create,slot,request,job,id3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,slot,report,slot,report2,create,slot,report,task,executor,resource,id2,3,slot,manager,register,task,manager,task,execution,connection2,slot,report2,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,that,allocation,failures,has,size,2,tuple2,job,id,allocation,id,allocation,failure,final,set,allocation,id,failed,allocations,new,hash,set,2,while,allocation,failure,allocation,failures,poll,null,assert,that,allocation,failure,f0,equal,to,job,id1,failed,allocations,add,allocation,failure,f1,assert,that,failed,allocations,contains,in,any,order,slot,request11,get,allocation,id,slot,request12,get,allocation,id,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,that,allocation,failures,has,size,3,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,allocation,failures,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,that,job2and,job3failed,allocation,info,entry,set,has,size,2,final,set,allocation,id,job2failed,allocations,extract,failed,allocations,for,job,job,id2,job2and,job3failed,allocation,info,final,set,allocation,id,job3failed,allocations,extract,failed,allocations,for,job,job,id3,job2and,job3failed,allocation,info,assert,that,job2failed,allocations,contains,in,any,order,slot,request21,get,allocation,id,slot,request22,get,allocation,id,assert,that,job3failed,allocations,contains,in,any,order,slot,request31,get,allocation,id
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1537281162;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final Queue<Tuple2<JobID, AllocationID>> allocationFailures = new ArrayDeque<>(5)___		final TestingResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(_				(Tuple3<JobID, AllocationID, Exception> failureMessage) ->_					allocationFailures.offer(Tuple2.of(failureMessage.f0, failureMessage.f1)))_			.createTestingResourceActions()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			resourceManagerActions)) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = createSlotRequest(jobId1)__			final SlotRequest slotRequest12 = createSlotRequest(jobId1)__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final SlotReport slotReport1 = createSlotReport(taskExecutorResourceId1, 2)___			_			slotManager.registerTaskManager(taskExecutionConnection1, slotReport1)___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = createSlotRequest(jobId2)__			final SlotRequest slotRequest22 = createSlotRequest(jobId2)__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = createSlotRequest(jobId3)__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final SlotReport slotReport2 = createSlotReport(taskExecutorResourceId2, 3)___			_			slotManager.registerTaskManager(taskExecutionConnection2, slotReport2)___			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertThat(allocationFailures, hasSize(2))___			Tuple2<JobID, AllocationID> allocationFailure__			final Set<AllocationID> failedAllocations = new HashSet<>(2)___			while ((allocationFailure = allocationFailures.poll()) != null) {_				assertThat(allocationFailure.f0, equalTo(jobId1))__				failedAllocations.add(allocationFailure.f1)__			}__			assertThat(failedAllocations, containsInAnyOrder(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()))___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertThat(allocationFailures, hasSize(3))___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertThat(job2AndJob3FailedAllocationInfo.entrySet(), hasSize(2))___			final Set<AllocationID> job2FailedAllocations = extractFailedAllocationsForJob(jobId2, job2AndJob3FailedAllocationInfo)__			final Set<AllocationID> job3FailedAllocations = extractFailedAllocationsForJob(jobId3, job2AndJob3FailedAllocationInfo)___			assertThat(job2FailedAllocations, containsInAnyOrder(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()))__			assertThat(job3FailedAllocations, containsInAnyOrder(slotRequest31.getAllocationId()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,queue,tuple2,job,id,allocation,id,allocation,failures,new,array,deque,5,final,testing,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,job,id,allocation,id,exception,failure,message,allocation,failures,offer,tuple2,of,failure,message,f0,failure,message,f1,create,testing,resource,actions,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,manager,actions,job,id,job,id1,new,job,id,final,slot,request,slot,request11,create,slot,request,job,id1,final,slot,request,slot,request12,create,slot,request,job,id1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,slot,report,slot,report1,create,slot,report,task,executor,resource,id1,2,slot,manager,register,task,manager,task,execution,connection1,slot,report1,job,id,job,id2,new,job,id,final,slot,request,slot,request21,create,slot,request,job,id2,final,slot,request,slot,request22,create,slot,request,job,id2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,create,slot,request,job,id3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,slot,report,slot,report2,create,slot,report,task,executor,resource,id2,3,slot,manager,register,task,manager,task,execution,connection2,slot,report2,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,that,allocation,failures,has,size,2,tuple2,job,id,allocation,id,allocation,failure,final,set,allocation,id,failed,allocations,new,hash,set,2,while,allocation,failure,allocation,failures,poll,null,assert,that,allocation,failure,f0,equal,to,job,id1,failed,allocations,add,allocation,failure,f1,assert,that,failed,allocations,contains,in,any,order,slot,request11,get,allocation,id,slot,request12,get,allocation,id,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,that,allocation,failures,has,size,3,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,allocation,failures,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,that,job2and,job3failed,allocation,info,entry,set,has,size,2,final,set,allocation,id,job2failed,allocations,extract,failed,allocations,for,job,job,id2,job2and,job3failed,allocation,info,final,set,allocation,id,job3failed,allocations,extract,failed,allocations,for,job,job,id3,job2and,job3failed,allocation,info,assert,that,job2failed,allocations,contains,in,any,order,slot,request21,get,allocation,id,slot,request22,get,allocation,id,assert,that,job3failed,allocations,contains,in,any,order,slot,request31,get,allocation,id
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1538127492;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final Queue<Tuple2<JobID, AllocationID>> allocationFailures = new ArrayDeque<>(5)___		final TestingResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(_				(Tuple3<JobID, AllocationID, Exception> failureMessage) ->_					allocationFailures.offer(Tuple2.of(failureMessage.f0, failureMessage.f1)))_			.build()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			resourceManagerActions)) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = createSlotRequest(jobId1)__			final SlotRequest slotRequest12 = createSlotRequest(jobId1)__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final SlotReport slotReport1 = createSlotReport(taskExecutorResourceId1, 2)___			_			slotManager.registerTaskManager(taskExecutionConnection1, slotReport1)___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = createSlotRequest(jobId2)__			final SlotRequest slotRequest22 = createSlotRequest(jobId2)__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = createSlotRequest(jobId3)__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final SlotReport slotReport2 = createSlotReport(taskExecutorResourceId2, 3)___			_			slotManager.registerTaskManager(taskExecutionConnection2, slotReport2)___			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertThat(allocationFailures, hasSize(2))___			Tuple2<JobID, AllocationID> allocationFailure__			final Set<AllocationID> failedAllocations = new HashSet<>(2)___			while ((allocationFailure = allocationFailures.poll()) != null) {_				assertThat(allocationFailure.f0, equalTo(jobId1))__				failedAllocations.add(allocationFailure.f1)__			}__			assertThat(failedAllocations, containsInAnyOrder(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()))___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertThat(allocationFailures, hasSize(3))___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertThat(job2AndJob3FailedAllocationInfo.entrySet(), hasSize(2))___			final Set<AllocationID> job2FailedAllocations = extractFailedAllocationsForJob(jobId2, job2AndJob3FailedAllocationInfo)__			final Set<AllocationID> job3FailedAllocations = extractFailedAllocationsForJob(jobId3, job2AndJob3FailedAllocationInfo)___			assertThat(job2FailedAllocations, containsInAnyOrder(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()))__			assertThat(job3FailedAllocations, containsInAnyOrder(slotRequest31.getAllocationId()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,queue,tuple2,job,id,allocation,id,allocation,failures,new,array,deque,5,final,testing,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,job,id,allocation,id,exception,failure,message,allocation,failures,offer,tuple2,of,failure,message,f0,failure,message,f1,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,manager,actions,job,id,job,id1,new,job,id,final,slot,request,slot,request11,create,slot,request,job,id1,final,slot,request,slot,request12,create,slot,request,job,id1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,slot,report,slot,report1,create,slot,report,task,executor,resource,id1,2,slot,manager,register,task,manager,task,execution,connection1,slot,report1,job,id,job,id2,new,job,id,final,slot,request,slot,request21,create,slot,request,job,id2,final,slot,request,slot,request22,create,slot,request,job,id2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,create,slot,request,job,id3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,slot,report,slot,report2,create,slot,report,task,executor,resource,id2,3,slot,manager,register,task,manager,task,execution,connection2,slot,report2,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,that,allocation,failures,has,size,2,tuple2,job,id,allocation,id,allocation,failure,final,set,allocation,id,failed,allocations,new,hash,set,2,while,allocation,failure,allocation,failures,poll,null,assert,that,allocation,failure,f0,equal,to,job,id1,failed,allocations,add,allocation,failure,f1,assert,that,failed,allocations,contains,in,any,order,slot,request11,get,allocation,id,slot,request12,get,allocation,id,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,that,allocation,failures,has,size,3,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,allocation,failures,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,that,job2and,job3failed,allocation,info,entry,set,has,size,2,final,set,allocation,id,job2failed,allocations,extract,failed,allocations,for,job,job,id2,job2and,job3failed,allocation,info,final,set,allocation,id,job3failed,allocations,extract,failed,allocations,for,job,job,id3,job2and,job3failed,allocation,info,assert,that,job2failed,allocations,contains,in,any,order,slot,request21,get,allocation,id,slot,request22,get,allocation,id,assert,that,job3failed,allocations,contains,in,any,order,slot,request31,get,allocation,id
SlotManagerTest -> @Test 	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception;1538127495;Tests notify the job manager of the allocations when the task manager is failed/killed.;@Test_	public void testNotifyFailedAllocationWhenTaskManagerTerminated() throws Exception {__		final Queue<Tuple2<JobID, AllocationID>> allocationFailures = new ArrayDeque<>(5)___		final TestingResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setNotifyAllocationFailureConsumer(_				(Tuple3<JobID, AllocationID, Exception> failureMessage) ->_					allocationFailures.offer(Tuple2.of(failureMessage.f0, failureMessage.f1)))_			.build()___		try (final SlotManager slotManager = createSlotManager(_			ResourceManagerId.generate(),_			resourceManagerActions)) {__			_			JobID jobId1 = new JobID()__			final SlotRequest slotRequest11 = createSlotRequest(jobId1)__			final SlotRequest slotRequest12 = createSlotRequest(jobId1)__			slotManager.registerSlotRequest(slotRequest11)__			slotManager.registerSlotRequest(slotRequest12)___			_			final ResourceID taskExecutorResourceId1 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway1 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection1 = new TaskExecutorConnection(taskExecutorResourceId1, testingTaskExecutorGateway1)__			final SlotReport slotReport1 = createSlotReport(taskExecutorResourceId1, 2)___			_			slotManager.registerTaskManager(taskExecutionConnection1, slotReport1)___			_			JobID jobId2 = new JobID()__			final SlotRequest slotRequest21 = createSlotRequest(jobId2)__			final SlotRequest slotRequest22 = createSlotRequest(jobId2)__			slotManager.registerSlotRequest(slotRequest21)__			slotManager.registerSlotRequest(slotRequest22)___			_			JobID jobId3 = new JobID()__			final SlotRequest slotRequest31 = createSlotRequest(jobId3)__			slotManager.registerSlotRequest(slotRequest31)___			_			final ResourceID taskExecutorResourceId2 = ResourceID.generate()__			final TestingTaskExecutorGateway testingTaskExecutorGateway2 = new TestingTaskExecutorGatewayBuilder().createTestingTaskExecutorGateway()__			final TaskExecutorConnection taskExecutionConnection2 = new TaskExecutorConnection(taskExecutorResourceId2, testingTaskExecutorGateway2)__			final SlotReport slotReport2 = createSlotReport(taskExecutorResourceId2, 3)___			_			slotManager.registerTaskManager(taskExecutionConnection2, slotReport2)___			_			slotManager.unregisterTaskManager(taskExecutionConnection1.getInstanceID())___			assertThat(allocationFailures, hasSize(2))___			Tuple2<JobID, AllocationID> allocationFailure__			final Set<AllocationID> failedAllocations = new HashSet<>(2)___			while ((allocationFailure = allocationFailures.poll()) != null) {_				assertThat(allocationFailure.f0, equalTo(jobId1))__				failedAllocations.add(allocationFailure.f1)__			}__			assertThat(failedAllocations, containsInAnyOrder(slotRequest11.getAllocationId(), slotRequest12.getAllocationId()))___			_			slotManager.unregisterTaskManager(taskExecutionConnection2.getInstanceID())___			assertThat(allocationFailures, hasSize(3))___			Map<JobID, List<Tuple2<JobID, AllocationID>>> job2AndJob3FailedAllocationInfo = allocationFailures.stream().collect(Collectors.groupingBy(tuple -> tuple.f0))___			assertThat(job2AndJob3FailedAllocationInfo.entrySet(), hasSize(2))___			final Set<AllocationID> job2FailedAllocations = extractFailedAllocationsForJob(jobId2, job2AndJob3FailedAllocationInfo)__			final Set<AllocationID> job3FailedAllocations = extractFailedAllocationsForJob(jobId3, job2AndJob3FailedAllocationInfo)___			assertThat(job2FailedAllocations, containsInAnyOrder(slotRequest21.getAllocationId(), slotRequest22.getAllocationId()))__			assertThat(job3FailedAllocations, containsInAnyOrder(slotRequest31.getAllocationId()))__		}_	};tests,notify,the,job,manager,of,the,allocations,when,the,task,manager,is,failed,killed;test,public,void,test,notify,failed,allocation,when,task,manager,terminated,throws,exception,final,queue,tuple2,job,id,allocation,id,allocation,failures,new,array,deque,5,final,testing,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,notify,allocation,failure,consumer,tuple3,job,id,allocation,id,exception,failure,message,allocation,failures,offer,tuple2,of,failure,message,f0,failure,message,f1,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,manager,actions,job,id,job,id1,new,job,id,final,slot,request,slot,request11,create,slot,request,job,id1,final,slot,request,slot,request12,create,slot,request,job,id1,slot,manager,register,slot,request,slot,request11,slot,manager,register,slot,request,slot,request12,final,resource,id,task,executor,resource,id1,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway1,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection1,new,task,executor,connection,task,executor,resource,id1,testing,task,executor,gateway1,final,slot,report,slot,report1,create,slot,report,task,executor,resource,id1,2,slot,manager,register,task,manager,task,execution,connection1,slot,report1,job,id,job,id2,new,job,id,final,slot,request,slot,request21,create,slot,request,job,id2,final,slot,request,slot,request22,create,slot,request,job,id2,slot,manager,register,slot,request,slot,request21,slot,manager,register,slot,request,slot,request22,job,id,job,id3,new,job,id,final,slot,request,slot,request31,create,slot,request,job,id3,slot,manager,register,slot,request,slot,request31,final,resource,id,task,executor,resource,id2,resource,id,generate,final,testing,task,executor,gateway,testing,task,executor,gateway2,new,testing,task,executor,gateway,builder,create,testing,task,executor,gateway,final,task,executor,connection,task,execution,connection2,new,task,executor,connection,task,executor,resource,id2,testing,task,executor,gateway2,final,slot,report,slot,report2,create,slot,report,task,executor,resource,id2,3,slot,manager,register,task,manager,task,execution,connection2,slot,report2,slot,manager,unregister,task,manager,task,execution,connection1,get,instance,id,assert,that,allocation,failures,has,size,2,tuple2,job,id,allocation,id,allocation,failure,final,set,allocation,id,failed,allocations,new,hash,set,2,while,allocation,failure,allocation,failures,poll,null,assert,that,allocation,failure,f0,equal,to,job,id1,failed,allocations,add,allocation,failure,f1,assert,that,failed,allocations,contains,in,any,order,slot,request11,get,allocation,id,slot,request12,get,allocation,id,slot,manager,unregister,task,manager,task,execution,connection2,get,instance,id,assert,that,allocation,failures,has,size,3,map,job,id,list,tuple2,job,id,allocation,id,job2and,job3failed,allocation,info,allocation,failures,stream,collect,collectors,grouping,by,tuple,tuple,f0,assert,that,job2and,job3failed,allocation,info,entry,set,has,size,2,final,set,allocation,id,job2failed,allocations,extract,failed,allocations,for,job,job,id2,job2and,job3failed,allocation,info,final,set,allocation,id,job3failed,allocations,extract,failed,allocations,for,job,job,id3,job2and,job3failed,allocation,info,assert,that,job2failed,allocations,contains,in,any,order,slot,request21,get,allocation,id,slot,request22,get,allocation,id,assert,that,job3failed,allocations,contains,in,any,order,slot,request31,get,allocation,id
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1482522858;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1482522861;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1482522861;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1482522862;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1482522862;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> TestingSlotManager -> @Override 		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot, 			Map<AllocationID, SlotRequest> pendingRequests);1489060856;Choose request randomly if offered slot can match its requirement__@param offeredSlot     The free slot_@param pendingRequests All the pending slot requests_@return The chosen request's AllocationID or null if cannot find a match;@Override_		protected SlotRequest chooseRequestToFulfill(ResourceSlot offeredSlot,_			Map<AllocationID, SlotRequest> pendingRequests)_		{_			for (Map.Entry<AllocationID, SlotRequest> pendingRequest : pendingRequests.entrySet()) {_				if (offeredSlot.isMatchingRequirement(pendingRequest.getValue().getResourceProfile())) {_					return pendingRequest.getValue()__				}_			}_			return null__		};choose,request,randomly,if,offered,slot,can,match,its,requirement,param,offered,slot,the,free,slot,param,pending,requests,all,the,pending,slot,requests,return,the,chosen,request,s,allocation,id,or,null,if,cannot,find,a,match;override,protected,slot,request,choose,request,to,fulfill,resource,slot,offered,slot,map,allocation,id,slot,request,pending,requests,for,map,entry,allocation,id,slot,request,pending,request,pending,requests,entry,set,if,offered,slot,is,matching,requirement,pending,request,get,value,get,resource,profile,return,pending,request,get,value,return,null
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1493386068;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1493386106;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1493386106;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(FlinkCompletableFuture.completed(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,flink,completable,future,completed,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1501760738;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final UUID leaderId = UUID.randomUUID()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(leaderId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(leaderId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(leaderId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,uuid,leader,id,uuid,random,uuid,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,leader,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,leader,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,leader,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1504525441;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1506417942;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1508576514;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceManagerActions resourceManagerActions = mock(ResourceManagerActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,manager,actions,resource,manager,actions,mock,resource,manager,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1508597556;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1508597556;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1508743918;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1510063665;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1510063666;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1515177485;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1515481550;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1517241957;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1521804757;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1522681180;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1525452496;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1526387042;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1526494919;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1527173115;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1530472204;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1530472204;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1537281140;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1537281162;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		ResourceActions resourceManagerActions = mock(ResourceActions.class)___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			verify(resourceManagerActions, times(1)).allocateResource(eq(resourceProfile))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,resource,actions,resource,manager,actions,mock,resource,actions,class,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,verify,resource,manager,actions,times,1,allocate,resource,eq,resource,profile,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1538127492;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		final AtomicInteger numberAllocateResourceCalls = new AtomicInteger(0)__		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(ignored -> numberAllocateResourceCalls.incrementAndGet())_			.build()___		_		final TaskExecutorGateway taskExecutorGateway = mock(TaskExecutorGateway.class)__		when(taskExecutorGateway.requestSlot(_			eq(slotId),_			eq(jobId),_			eq(allocationId),_			anyString(),_			eq(resourceManagerId),_			any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			assertThat(numberAllocateResourceCalls.get(), is(1))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			verify(taskExecutorGateway).requestSlot(eq(slotId), eq(jobId), eq(allocationId), eq(targetAddress), eq(resourceManagerId), any(Time.class))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,final,atomic,integer,number,allocate,resource,calls,new,atomic,integer,0,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,ignored,number,allocate,resource,calls,increment,and,get,build,final,task,executor,gateway,task,executor,gateway,mock,task,executor,gateway,class,when,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,any,string,eq,resource,manager,id,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,assert,that,number,allocate,resource,calls,get,is,1,slot,manager,register,task,manager,task,executor,connection,slot,report,verify,task,executor,gateway,request,slot,eq,slot,id,eq,job,id,eq,allocation,id,eq,target,address,eq,resource,manager,id,any,time,class,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFulfillingPendingSlotRequest() throws Exception;1538127495;Tests that pending slot requests are tried to be fulfilled upon new slot registrations.;@Test_	public void testFulfillingPendingSlotRequest() throws Exception {_		final ResourceManagerId resourceManagerId = ResourceManagerId.generate()__		final ResourceID resourceID = ResourceID.generate()__		final JobID jobId = new JobID()__		final SlotID slotId = new SlotID(resourceID, 0)__		final String targetAddress = "localhost"__		final AllocationID allocationId = new AllocationID()__		final ResourceProfile resourceProfile = new ResourceProfile(42.0, 1337)__		final SlotRequest slotRequest = new SlotRequest(_			jobId,_			allocationId,_			resourceProfile,_			targetAddress)___		final AtomicInteger numberAllocateResourceCalls = new AtomicInteger(0)__		ResourceActions resourceManagerActions = new TestingResourceActionsBuilder()_			.setAllocateResourceConsumer(ignored -> numberAllocateResourceCalls.incrementAndGet())_			.build()___		final CompletableFuture<Tuple5<SlotID, JobID, AllocationID, String, ResourceManagerId>> requestFuture = new CompletableFuture<>()__		_		final TaskExecutorGateway taskExecutorGateway = new TestingTaskExecutorGatewayBuilder()_			.setRequestSlotFunction(tuple5 -> {_				requestFuture.complete(Tuple5.of(tuple5.f0, tuple5.f1, tuple5.f2, tuple5.f3, tuple5.f4))__				return CompletableFuture.completedFuture(Acknowledge.get())__			})_			.createTestingTaskExecutorGateway()___		final TaskExecutorConnection taskExecutorConnection = new TaskExecutorConnection(resourceID, taskExecutorGateway)___		final SlotStatus slotStatus = new SlotStatus(slotId, resourceProfile)__		final SlotReport slotReport = new SlotReport(slotStatus)___		try (SlotManager slotManager = createSlotManager(resourceManagerId, resourceManagerActions)) {__			assertTrue("The slot request should be accepted", slotManager.registerSlotRequest(slotRequest))___			assertThat(numberAllocateResourceCalls.get(), is(1))___			slotManager.registerTaskManager(_				taskExecutorConnection,_				slotReport)___			assertThat(requestFuture.get(), is(equalTo(Tuple5.of(slotId, jobId, allocationId, targetAddress, resourceManagerId))))___			TaskManagerSlot slot = slotManager.getSlot(slotId)___			assertEquals("The slot has not been allocated to the expected allocation id.", allocationId, slot.getAllocationId())__		}_	};tests,that,pending,slot,requests,are,tried,to,be,fulfilled,upon,new,slot,registrations;test,public,void,test,fulfilling,pending,slot,request,throws,exception,final,resource,manager,id,resource,manager,id,resource,manager,id,generate,final,resource,id,resource,id,resource,id,generate,final,job,id,job,id,new,job,id,final,slot,id,slot,id,new,slot,id,resource,id,0,final,string,target,address,localhost,final,allocation,id,allocation,id,new,allocation,id,final,resource,profile,resource,profile,new,resource,profile,42,0,1337,final,slot,request,slot,request,new,slot,request,job,id,allocation,id,resource,profile,target,address,final,atomic,integer,number,allocate,resource,calls,new,atomic,integer,0,resource,actions,resource,manager,actions,new,testing,resource,actions,builder,set,allocate,resource,consumer,ignored,number,allocate,resource,calls,increment,and,get,build,final,completable,future,tuple5,slot,id,job,id,allocation,id,string,resource,manager,id,request,future,new,completable,future,final,task,executor,gateway,task,executor,gateway,new,testing,task,executor,gateway,builder,set,request,slot,function,tuple5,request,future,complete,tuple5,of,tuple5,f0,tuple5,f1,tuple5,f2,tuple5,f3,tuple5,f4,return,completable,future,completed,future,acknowledge,get,create,testing,task,executor,gateway,final,task,executor,connection,task,executor,connection,new,task,executor,connection,resource,id,task,executor,gateway,final,slot,status,slot,status,new,slot,status,slot,id,resource,profile,final,slot,report,slot,report,new,slot,report,slot,status,try,slot,manager,slot,manager,create,slot,manager,resource,manager,id,resource,manager,actions,assert,true,the,slot,request,should,be,accepted,slot,manager,register,slot,request,slot,request,assert,that,number,allocate,resource,calls,get,is,1,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,request,future,get,is,equal,to,tuple5,of,slot,id,job,id,allocation,id,target,address,resource,manager,id,task,manager,slot,slot,slot,manager,get,slot,slot,id,assert,equals,the,slot,has,not,been,allocated,to,the,expected,allocation,id,allocation,id,slot,get,allocation,id
SlotManagerTest -> @Test 	public void testFailingAllocationReturnsPendingTaskManagerSlot() throws Exception;1538127492;Tests that a failing allocation/slot request will return the pending task manager slot.;@Test_	public void testFailingAllocationReturnsPendingTaskManagerSlot() throws Exception {_		final int numberSlots = 2__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()__		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()___			final SlotRequest slotRequest = createSlotRequest(jobId)__			assertThat(slotManager.registerSlotRequest(slotRequest), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))___			slotManager.unregisterSlotRequest(slotRequest.getAllocationId())___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(0))__		}_	};tests,that,a,failing,allocation,slot,request,will,return,the,pending,task,manager,slot;test,public,void,test,failing,allocation,returns,pending,task,manager,slot,throws,exception,final,int,number,slots,2,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,final,slot,request,slot,request,create,slot,request,job,id,assert,that,slot,manager,register,slot,request,slot,request,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1,slot,manager,unregister,slot,request,slot,request,get,allocation,id,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,0
SlotManagerTest -> @Test 	public void testFailingAllocationReturnsPendingTaskManagerSlot() throws Exception;1538127495;Tests that a failing allocation/slot request will return the pending task manager slot.;@Test_	public void testFailingAllocationReturnsPendingTaskManagerSlot() throws Exception {_		final int numberSlots = 2__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()__		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()___			final SlotRequest slotRequest = createSlotRequest(jobId)__			assertThat(slotManager.registerSlotRequest(slotRequest), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))___			slotManager.unregisterSlotRequest(slotRequest.getAllocationId())___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(0))__		}_	};tests,that,a,failing,allocation,slot,request,will,return,the,pending,task,manager,slot;test,public,void,test,failing,allocation,returns,pending,task,manager,slot,throws,exception,final,int,number,slots,2,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,final,slot,request,slot,request,create,slot,request,job,id,assert,that,slot,manager,register,slot,request,slot,request,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1,slot,manager,unregister,slot,request,slot,request,get,allocation,id,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,0
SlotManagerTest -> @Test 	public void testExistingInUseSlotWithDifferentAllocationInfo();1482522858;Tests that we had a slot in use, and it's also reported in use by TaskManager, but the allocation_information didn't match.;@Test_	public void testExistingInUseSlotWithDifferentAllocationInfo() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request.getAllocationId()))___		SlotStatus slotStatus2 = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		_		slotManager.updateSlotStatus(slotStatus2)___		_		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(slotStatus2.getAllocationID()))__	};tests,that,we,had,a,slot,in,use,and,it,s,also,reported,in,use,by,task,manager,but,the,allocation,information,didn,t,match;test,public,void,test,existing,in,use,slot,with,different,allocation,info,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request,get,allocation,id,slot,status,slot,status2,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,slot,status2,get,allocation,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotWithDifferentAllocationInfo();1482522861;Tests that we had a slot in use, and it's also reported in use by TaskManager, but the allocation_information didn't match.;@Test_	public void testExistingInUseSlotWithDifferentAllocationInfo() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertTrue(slotManager.isAllocated(request.getAllocationId()))___		SlotStatus slotStatus2 = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		_		slotManager.updateSlotStatus(slotStatus2)___		_		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__		assertFalse(slotManager.isAllocated(request.getAllocationId()))__		assertTrue(slotManager.isAllocated(slotStatus2.getAllocationID()))__	};tests,that,we,had,a,slot,in,use,and,it,s,also,reported,in,use,by,task,manager,but,the,allocation,information,didn,t,match;test,public,void,test,existing,in,use,slot,with,different,allocation,info,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,true,slot,manager,is,allocated,request,get,allocation,id,slot,status,slot,status2,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,manager,update,slot,status,slot,status2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id,assert,false,slot,manager,is,allocated,request,get,allocation,id,assert,true,slot,manager,is,allocated,slot,status2,get,allocation,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1482522858;Tests that we had a slot in-use, and it's confirmed by SlotReport;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		SlotStatus slotStatus2 = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE,_			request.getJobId(), request.getAllocationId())__		slotManager.updateSlotStatus(slotStatus2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,it,s,confirmed,by,slot,report;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,status,slot,status2,new,slot,status,slot,id,request,get,job,id,request,get,allocation,id,slot,manager,update,slot,status,slot,status2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1482522861;Tests that we had a slot in-use, and it's confirmed by SlotReport;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()__		SlotRequest request = new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE)__		slotManager.requestSlot(request)___		_		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		SlotStatus slotStatus2 = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE,_			request.getJobId(), request.getAllocationId())__		slotManager.updateSlotStatus(slotStatus2)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,it,s,confirmed,by,slot,report;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,request,request,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,request,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,status,slot,status2,new,slot,status,slot,id,request,get,job,id,request,get,allocation,id,slot,manager,update,slot,status,slot,status2,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1482522861;Tests that we had a slot in-use and is freed again subsequently.;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		slotManager.notifySlotAvailable(slotId.getResourceID(), slotId)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,is,freed,again,subsequently;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,manager,notify,slot,available,slot,id,get,resource,id,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1482522862;Tests that we had a slot in-use and is freed again subsequently.;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		slotManager.notifySlotAvailable(slotId.getResourceID(), slotId)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,is,freed,again,subsequently;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,manager,notify,slot,available,slot,id,get,resource,id,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1482522862;Tests that we had a slot in-use and is freed again subsequently.;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		slotManager.notifySlotAvailable(slotId.getResourceID(), slotId)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,is,freed,again,subsequently;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,manager,notify,slot,available,slot,id,get,resource,id,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testExistingInUseSlotUpdateStatus();1489060856;Tests that we had a slot in-use and is freed again subsequently.;@Test_	public void testExistingInUseSlotUpdateStatus() {_		TestingSlotManager slotManager = new TestingSlotManager()___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE, new JobID(), new AllocationID())__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertTrue(slotManager.isAllocated(slotId))___		_		slotManager.notifySlotAvailable(slotId.getResourceID(), slotId)___		assertEquals(0, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertFalse(slotManager.isAllocated(slotId))__	};tests,that,we,had,a,slot,in,use,and,is,freed,again,subsequently;test,public,void,test,existing,in,use,slot,update,status,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,new,job,id,new,allocation,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,true,slot,manager,is,allocated,slot,id,slot,manager,notify,slot,available,slot,id,get,resource,id,slot,id,assert,equals,0,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,false,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1482522858;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1482522861;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1482522861;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1482522862;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1482522862;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testRequestMultipleSlots();1489060856;Tests that we send multiple slot requests;@Test_	public void testRequestMultipleSlots() {_		TestingSlotManager slotManager = new TestingSlotManager()__		directlyProvideFreeSlots(slotManager, DEFAULT_TESTING_PROFILE, 5)___		_		for (int i = 0_ i < 3_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		}__		_		for (int i = 0_ i < 2_ ++i) {_			slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_BIG_PROFILE))__		}__		_		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))___		assertEquals(4, slotManager.getAllocatedSlotCount())__		assertEquals(1, slotManager.getFreeSlotCount())__		assertEquals(2, slotManager.getPendingRequestCount())__		assertEquals(2, slotManager.getAllocatedContainers().size())__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(0))__		assertEquals(DEFAULT_TESTING_BIG_PROFILE, slotManager.getAllocatedContainers().get(1))__	};tests,that,we,send,multiple,slot,requests;test,public,void,test,request,multiple,slots,testing,slot,manager,slot,manager,new,testing,slot,manager,directly,provide,free,slots,slot,manager,5,for,int,i,0,i,3,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,for,int,i,0,i,2,i,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,4,slot,manager,get,allocated,slot,count,assert,equals,1,slot,manager,get,free,slot,count,assert,equals,2,slot,manager,get,pending,request,count,assert,equals,2,slot,manager,get,allocated,containers,size,assert,equals,slot,manager,get,allocated,containers,get,0,assert,equals,slot,manager,get,allocated,containers,get,1
SlotManagerTest -> @Test 	public void testPendingTaskManagerSlotCompletion() throws Exception;1538127492;Tests the completion of pending task manager slots by registering a TaskExecutor.;@Test_	public void testPendingTaskManagerSlotCompletion() throws Exception {_		final int numberSlots = 3__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))__			assertThat(slotManager.getNumberRegisteredSlots(), is(0))___			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final SlotReport slotReport = createSlotReport(taskExecutorConnection.getResourceID(), numberSlots - 1)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(numberSlots - 1))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(1))__		}_	};tests,the,completion,of,pending,task,manager,slots,by,registering,a,task,executor;test,public,void,test,pending,task,manager,slot,completion,throws,exception,final,int,number,slots,3,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1,assert,that,slot,manager,get,number,registered,slots,is,0,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,slot,report,slot,report,create,slot,report,task,executor,connection,get,resource,id,number,slots,1,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,number,slots,1,assert,that,slot,manager,get,number,pending,task,manager,slots,is,1
SlotManagerTest -> @Test 	public void testPendingTaskManagerSlotCompletion() throws Exception;1538127495;Tests the completion of pending task manager slots by registering a TaskExecutor.;@Test_	public void testPendingTaskManagerSlotCompletion() throws Exception {_		final int numberSlots = 3__		final TestingResourceActions resourceActions = new TestingResourceActionsBuilder()_			.setAllocateResourceFunction(convert(value -> numberSlots))_			.build()___		try (final SlotManager slotManager = createSlotManager(ResourceManagerId.generate(), resourceActions)) {_			final JobID jobId = new JobID()__			assertThat(slotManager.registerSlotRequest(createSlotRequest(jobId)), is(true))___			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(numberSlots))__			assertThat(slotManager.getNumberAssignedPendingTaskManagerSlots(), is(1))__			assertThat(slotManager.getNumberRegisteredSlots(), is(0))___			final TaskExecutorConnection taskExecutorConnection = createTaskExecutorConnection()__			final SlotReport slotReport = createSlotReport(taskExecutorConnection.getResourceID(), numberSlots - 1)___			slotManager.registerTaskManager(taskExecutorConnection, slotReport)___			assertThat(slotManager.getNumberRegisteredSlots(), is(numberSlots - 1))__			assertThat(slotManager.getNumberPendingTaskManagerSlots(), is(1))__		}_	};tests,the,completion,of,pending,task,manager,slots,by,registering,a,task,executor;test,public,void,test,pending,task,manager,slot,completion,throws,exception,final,int,number,slots,3,final,testing,resource,actions,resource,actions,new,testing,resource,actions,builder,set,allocate,resource,function,convert,value,number,slots,build,try,final,slot,manager,slot,manager,create,slot,manager,resource,manager,id,generate,resource,actions,final,job,id,job,id,new,job,id,assert,that,slot,manager,register,slot,request,create,slot,request,job,id,is,true,assert,that,slot,manager,get,number,pending,task,manager,slots,is,number,slots,assert,that,slot,manager,get,number,assigned,pending,task,manager,slots,is,1,assert,that,slot,manager,get,number,registered,slots,is,0,final,task,executor,connection,task,executor,connection,create,task,executor,connection,final,slot,report,slot,report,create,slot,report,task,executor,connection,get,resource,id,number,slots,1,slot,manager,register,task,manager,task,executor,connection,slot,report,assert,that,slot,manager,get,number,registered,slots,is,number,slots,1,assert,that,slot,manager,get,number,pending,task,manager,slots,is,1
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1482522858;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1482522861;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorGateway)__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		slotManager.updateSlotStatus(slotStatus)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,gateway,slot,status,slot,status,new,slot,status,slot,id,slot,manager,update,slot,status,slot,status,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1482522861;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1482522862;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1482522862;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
SlotManagerTest -> @Test 	public void testNewlyAppearedFreeSlotFulfillPendingRequest();1489060856;Tests that a new slot appeared in SlotReport, and we used it to fulfill a pending request;@Test_	public void testNewlyAppearedFreeSlotFulfillPendingRequest() {_		TestingSlotManager slotManager = new TestingSlotManager()__		slotManager.requestSlot(new SlotRequest(new JobID(), new AllocationID(), DEFAULT_TESTING_PROFILE))__		assertEquals(1, slotManager.getPendingRequestCount())___		SlotID slotId = SlotID.generate()__		SlotStatus slotStatus = new SlotStatus(slotId, DEFAULT_TESTING_PROFILE)__		SlotReport slotReport = new SlotReport(Collections.singletonList(slotStatus))__		slotManager.registerTaskExecutor(slotId.getResourceID(), taskExecutorRegistration, slotReport)___		assertEquals(1, slotManager.getAllocatedSlotCount())__		assertEquals(0, slotManager.getFreeSlotCount())__		assertEquals(0, slotManager.getPendingRequestCount())__		assertTrue(slotManager.isAllocated(slotId))__	};tests,that,a,new,slot,appeared,in,slot,report,and,we,used,it,to,fulfill,a,pending,request;test,public,void,test,newly,appeared,free,slot,fulfill,pending,request,testing,slot,manager,slot,manager,new,testing,slot,manager,slot,manager,request,slot,new,slot,request,new,job,id,new,allocation,id,assert,equals,1,slot,manager,get,pending,request,count,slot,id,slot,id,slot,id,generate,slot,status,slot,status,new,slot,status,slot,id,slot,report,slot,report,new,slot,report,collections,singleton,list,slot,status,slot,manager,register,task,executor,slot,id,get,resource,id,task,executor,registration,slot,report,assert,equals,1,slot,manager,get,allocated,slot,count,assert,equals,0,slot,manager,get,free,slot,count,assert,equals,0,slot,manager,get,pending,request,count,assert,true,slot,manager,is,allocated,slot,id
