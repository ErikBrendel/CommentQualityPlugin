# id;timestamp;commentText;codeText;commentWords;codeWords
MetricGroupTest -> @Test 	public void testNameCollisionAfterKeyValueGroup();1513075960;Verifies that existing key/value groups are returned when calling {@link MetricGroup#addGroup(String)}.;@Test_	public void testNameCollisionAfterKeyValueGroup() {_		MetricRegistry registry = new NoOpMetricRegistry()__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key, value)__		MetricGroup group = root.addGroup(key).addGroup(value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,that,existing,key,value,groups,are,returned,when,calling,link,metric,group,add,group,string;test,public,void,test,name,collision,after,key,value,group,metric,registry,registry,new,no,op,metric,registry,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,value,metric,group,group,root,add,group,key,add,group,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionAfterKeyValueGroup();1513102156;Verifies that existing key/value groups are returned when calling {@link MetricGroup#addGroup(String)}.;@Test_	public void testNameCollisionAfterKeyValueGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key, value)__		MetricGroup group = root.addGroup(key).addGroup(value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,that,existing,key,value,groups,are,returned,when,calling,link,metric,group,add,group,string;test,public,void,test,name,collision,after,key,value,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,value,metric,group,group,root,add,group,key,add,group,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionAfterKeyValueGroup();1519406529;Verifies that existing key/value groups are returned when calling {@link MetricGroup#addGroup(String)}.;@Test_	public void testNameCollisionAfterKeyValueGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key, value)__		MetricGroup group = root.addGroup(key).addGroup(value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,that,existing,key,value,groups,are,returned,when,calling,link,metric,group,add,group,string;test,public,void,test,name,collision,after,key,value,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,value,metric,group,group,root,add,group,key,add,group,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionAfterKeyValueGroup();1547021528;Verifies that existing key/value groups are returned when calling {@link MetricGroup#addGroup(String)}.;@Test_	public void testNameCollisionAfterKeyValueGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key, value)__		MetricGroup group = root.addGroup(key).addGroup(value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,that,existing,key,value,groups,are,returned,when,calling,link,metric,group,add,group,string;test,public,void,test,name,collision,after,key,value,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,value,metric,group,group,root,add,group,key,add,group,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAfterGenericGroup();1513075960;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key name already_exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAfterGenericGroup() {_		MetricRegistry registry = new NoOpMetricRegistry()__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,after,generic,group,metric,registry,registry,new,no,op,metric,registry,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAfterGenericGroup();1513102156;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key name already_exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAfterGenericGroup();1519406529;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key name already_exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAfterGenericGroup();1547021528;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key name already_exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testUserDefinedVariableOnKeyGroup();1513075960;Verifies that calling {@link MetricGroup#addGroup(String, String)} on a {@link GenericKeyMetricGroup} goes_through the generic code path.;@Test_	public void testUserDefinedVariableOnKeyGroup() {_		MetricRegistry registry = new NoOpMetricRegistry()__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key1 = "key1"__		String value1 = "value1"__		root.addGroup(key1, value1)___		String key2 = "key2"__		String value2 = "value2"__		MetricGroup group = root.addGroup(key1).addGroup(key2, value2)___		String variableValue = group.getAllVariables().get("value2")__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key1 is missing from metric identifier.", identifier.contains("key1"))__		assertTrue("Key2 is missing from metric identifier.", identifier.contains("key2"))__		assertTrue("Value2 is missing from metric identifier.", identifier.contains("value2"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key1 is missing from logical scope.", logicalScope.contains(key1))__		assertTrue("Key2 is missing from logical scope.", logicalScope.contains(key2))__		assertTrue("Value2 is missing from logical scope.", logicalScope.contains(value2))__	};verifies,that,calling,link,metric,group,add,group,string,string,on,a,link,generic,key,metric,group,goes,through,the,generic,code,path;test,public,void,test,user,defined,variable,on,key,group,metric,registry,registry,new,no,op,metric,registry,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key1,key1,string,value1,value1,root,add,group,key1,value1,string,key2,key2,string,value2,value2,metric,group,group,root,add,group,key1,add,group,key2,value2,string,variable,value,group,get,all,variables,get,value2,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key1,is,missing,from,metric,identifier,identifier,contains,key1,assert,true,key2,is,missing,from,metric,identifier,identifier,contains,key2,assert,true,value2,is,missing,from,metric,identifier,identifier,contains,value2,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key1,is,missing,from,logical,scope,logical,scope,contains,key1,assert,true,key2,is,missing,from,logical,scope,logical,scope,contains,key2,assert,true,value2,is,missing,from,logical,scope,logical,scope,contains,value2
MetricGroupTest -> @Test 	public void testUserDefinedVariableOnKeyGroup();1513102156;Verifies that calling {@link MetricGroup#addGroup(String, String)} on a {@link GenericKeyMetricGroup} goes_through the generic code path.;@Test_	public void testUserDefinedVariableOnKeyGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key1 = "key1"__		String value1 = "value1"__		root.addGroup(key1, value1)___		String key2 = "key2"__		String value2 = "value2"__		MetricGroup group = root.addGroup(key1).addGroup(key2, value2)___		String variableValue = group.getAllVariables().get("value2")__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key1 is missing from metric identifier.", identifier.contains("key1"))__		assertTrue("Key2 is missing from metric identifier.", identifier.contains("key2"))__		assertTrue("Value2 is missing from metric identifier.", identifier.contains("value2"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key1 is missing from logical scope.", logicalScope.contains(key1))__		assertTrue("Key2 is missing from logical scope.", logicalScope.contains(key2))__		assertTrue("Value2 is missing from logical scope.", logicalScope.contains(value2))__	};verifies,that,calling,link,metric,group,add,group,string,string,on,a,link,generic,key,metric,group,goes,through,the,generic,code,path;test,public,void,test,user,defined,variable,on,key,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key1,key1,string,value1,value1,root,add,group,key1,value1,string,key2,key2,string,value2,value2,metric,group,group,root,add,group,key1,add,group,key2,value2,string,variable,value,group,get,all,variables,get,value2,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key1,is,missing,from,metric,identifier,identifier,contains,key1,assert,true,key2,is,missing,from,metric,identifier,identifier,contains,key2,assert,true,value2,is,missing,from,metric,identifier,identifier,contains,value2,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key1,is,missing,from,logical,scope,logical,scope,contains,key1,assert,true,key2,is,missing,from,logical,scope,logical,scope,contains,key2,assert,true,value2,is,missing,from,logical,scope,logical,scope,contains,value2
MetricGroupTest -> @Test 	public void testUserDefinedVariableOnKeyGroup();1519406529;Verifies that calling {@link MetricGroup#addGroup(String, String)} on a {@link GenericKeyMetricGroup} goes_through the generic code path.;@Test_	public void testUserDefinedVariableOnKeyGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key1 = "key1"__		String value1 = "value1"__		root.addGroup(key1, value1)___		String key2 = "key2"__		String value2 = "value2"__		MetricGroup group = root.addGroup(key1).addGroup(key2, value2)___		String variableValue = group.getAllVariables().get("value2")__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key1 is missing from metric identifier.", identifier.contains("key1"))__		assertTrue("Key2 is missing from metric identifier.", identifier.contains("key2"))__		assertTrue("Value2 is missing from metric identifier.", identifier.contains("value2"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key1 is missing from logical scope.", logicalScope.contains(key1))__		assertTrue("Key2 is missing from logical scope.", logicalScope.contains(key2))__		assertTrue("Value2 is missing from logical scope.", logicalScope.contains(value2))__	};verifies,that,calling,link,metric,group,add,group,string,string,on,a,link,generic,key,metric,group,goes,through,the,generic,code,path;test,public,void,test,user,defined,variable,on,key,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key1,key1,string,value1,value1,root,add,group,key1,value1,string,key2,key2,string,value2,value2,metric,group,group,root,add,group,key1,add,group,key2,value2,string,variable,value,group,get,all,variables,get,value2,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key1,is,missing,from,metric,identifier,identifier,contains,key1,assert,true,key2,is,missing,from,metric,identifier,identifier,contains,key2,assert,true,value2,is,missing,from,metric,identifier,identifier,contains,value2,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key1,is,missing,from,logical,scope,logical,scope,contains,key1,assert,true,key2,is,missing,from,logical,scope,logical,scope,contains,key2,assert,true,value2,is,missing,from,logical,scope,logical,scope,contains,value2
MetricGroupTest -> @Test 	public void testUserDefinedVariableOnKeyGroup();1547021528;Verifies that calling {@link MetricGroup#addGroup(String, String)} on a {@link GenericKeyMetricGroup} goes_through the generic code path.;@Test_	public void testUserDefinedVariableOnKeyGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key1 = "key1"__		String value1 = "value1"__		root.addGroup(key1, value1)___		String key2 = "key2"__		String value2 = "value2"__		MetricGroup group = root.addGroup(key1).addGroup(key2, value2)___		String variableValue = group.getAllVariables().get("value2")__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key1 is missing from metric identifier.", identifier.contains("key1"))__		assertTrue("Key2 is missing from metric identifier.", identifier.contains("key2"))__		assertTrue("Value2 is missing from metric identifier.", identifier.contains("value2"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key1 is missing from logical scope.", logicalScope.contains(key1))__		assertTrue("Key2 is missing from logical scope.", logicalScope.contains(key2))__		assertTrue("Value2 is missing from logical scope.", logicalScope.contains(value2))__	};verifies,that,calling,link,metric,group,add,group,string,string,on,a,link,generic,key,metric,group,goes,through,the,generic,code,path;test,public,void,test,user,defined,variable,on,key,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key1,key1,string,value1,value1,root,add,group,key1,value1,string,key2,key2,string,value2,value2,metric,group,group,root,add,group,key1,add,group,key2,value2,string,variable,value,group,get,all,variables,get,value2,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key1,is,missing,from,metric,identifier,identifier,contains,key1,assert,true,key2,is,missing,from,metric,identifier,identifier,contains,key2,assert,true,value2,is,missing,from,metric,identifier,identifier,contains,value2,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key1,is,missing,from,logical,scope,logical,scope,contains,key1,assert,true,key2,is,missing,from,logical,scope,logical,scope,contains,key2,assert,true,value2,is,missing,from,logical,scope,logical,scope,contains,value2
MetricGroupTest -> @Test 	public void testUserDefinedVariable();1513075960;Verifies the basic behavior when defining user-defined variables.;@Test_	public void testUserDefinedVariable() {_		MetricRegistry registry = new NoOpMetricRegistry()__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,the,basic,behavior,when,defining,user,defined,variables;test,public,void,test,user,defined,variable,metric,registry,registry,new,no,op,metric,registry,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testUserDefinedVariable();1513102156;Verifies the basic behavior when defining user-defined variables.;@Test_	public void testUserDefinedVariable() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,the,basic,behavior,when,defining,user,defined,variables;test,public,void,test,user,defined,variable,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testUserDefinedVariable();1519406529;Verifies the basic behavior when defining user-defined variables.;@Test_	public void testUserDefinedVariable() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,the,basic,behavior,when,defining,user,defined,variables;test,public,void,test,user,defined,variable,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testUserDefinedVariable();1547021528;Verifies the basic behavior when defining user-defined variables.;@Test_	public void testUserDefinedVariable() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertEquals(value, variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertFalse("Value is present in logical scope.", logicalScope.contains(value))__	};verifies,the,basic,behavior,when,defining,user,defined,variables;test,public,void,test,user,defined,variable,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,equals,value,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,false,value,is,present,in,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAndValueAfterGenericGroup();1513075960;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key and value name_already exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAndValueAfterGenericGroup() {_		MetricRegistry registry = new NoOpMetricRegistry()__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key).addGroup(value)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,and,value,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,and,value,after,generic,group,metric,registry,registry,new,no,op,metric,registry,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,add,group,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAndValueAfterGenericGroup();1513102156;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key and value name_already exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAndValueAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key).addGroup(value)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,and,value,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,and,value,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,add,group,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAndValueAfterGenericGroup();1519406529;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key and value name_already exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAndValueAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key).addGroup(value)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,and,value,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,and,value,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,add,group,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
MetricGroupTest -> @Test 	public void testNameCollisionForKeyAndValueAfterGenericGroup();1547021528;Verifies that calling {@link MetricGroup#addGroup(String, String)} if a generic group with the key and value name_already exists goes through the generic code path.;@Test_	public void testNameCollisionForKeyAndValueAfterGenericGroup() {_		MetricRegistry registry = NoOpMetricRegistry.INSTANCE__		GenericMetricGroup root = new GenericMetricGroup(registry, new DummyAbstractMetricGroup(registry), "root")___		String key = "key"__		String value = "value"___		root.addGroup(key).addGroup(value)__		MetricGroup group = root.addGroup(key, value)___		String variableValue = group.getAllVariables().get(ScopeFormat.asVariable("key"))__		assertNull(variableValue)___		String identifier = group.getMetricIdentifier("metric")__		assertTrue("Key is missing from metric identifier.", identifier.contains("key"))__		assertTrue("Value is missing from metric identifier.", identifier.contains("value"))___		String logicalScope = ((AbstractMetricGroup) group).getLogicalScope(new DummyCharacterFilter())__		assertTrue("Key is missing from logical scope.", logicalScope.contains(key))__		assertTrue("Value is missing from logical scope.", logicalScope.contains(value))__	};verifies,that,calling,link,metric,group,add,group,string,string,if,a,generic,group,with,the,key,and,value,name,already,exists,goes,through,the,generic,code,path;test,public,void,test,name,collision,for,key,and,value,after,generic,group,metric,registry,registry,no,op,metric,registry,instance,generic,metric,group,root,new,generic,metric,group,registry,new,dummy,abstract,metric,group,registry,root,string,key,key,string,value,value,root,add,group,key,add,group,value,metric,group,group,root,add,group,key,value,string,variable,value,group,get,all,variables,get,scope,format,as,variable,key,assert,null,variable,value,string,identifier,group,get,metric,identifier,metric,assert,true,key,is,missing,from,metric,identifier,identifier,contains,key,assert,true,value,is,missing,from,metric,identifier,identifier,contains,value,string,logical,scope,abstract,metric,group,group,get,logical,scope,new,dummy,character,filter,assert,true,key,is,missing,from,logical,scope,logical,scope,contains,key,assert,true,value,is,missing,from,logical,scope,logical,scope,contains,value
