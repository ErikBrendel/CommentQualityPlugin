# id;timestamp;commentText;codeText;commentWords;codeWords
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalFailureConcurrentToLocalFailover() throws Exception;1549365080;Tests that a terminal global failure concurrent to a local failover_leads to a properly failed state.;@Test_	public void testGlobalFailureConcurrentToLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().failSync(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new SuppressRestartsException(new Exception("test exception")))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().cancelingComplete()___		assertEquals(JobStatus.FAILED, graph.getState())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,terminal,global,failure,concurrent,to,a,local,failover,leads,to,a,properly,failed,state;test,public,void,test,global,failure,concurrent,to,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,sync,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,suppress,restarts,exception,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,graph,get,state,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalFailureConcurrentToLocalFailover() throws Exception;1550220073;Tests that a terminal global failure concurrent to a local failover_leads to a properly failed state.;@Test_	public void testGlobalFailureConcurrentToLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new SuppressRestartsException(new Exception("test exception")))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().cancelingComplete()___		assertEquals(JobStatus.FAILED, graph.getState())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,terminal,global,failure,concurrent,to,a,local,failover,leads,to,a,properly,failed,state;test,public,void,test,global,failure,concurrent,to,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,suppress,restarts,exception,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,canceling,complete,assert,equals,job,status,failed,graph,get,state,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalFailureConcurrentToLocalFailover() throws Exception;1550683188;Tests that a terminal global failure concurrent to a local failover_leads to a properly failed state.;@Test_	public void testGlobalFailureConcurrentToLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new SuppressRestartsException(new Exception("test exception")))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().completeCancelling()___		assertEquals(JobStatus.FAILED, graph.getState())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,terminal,global,failure,concurrent,to,a,local,failover,leads,to,a,properly,failed,state;test,public,void,test,global,failure,concurrent,to,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,suppress,restarts,exception,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,failed,graph,get,state,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testCancelWhileInLocalFailover() throws Exception;1549365080;Tests that a cancellation concurrent to a local failover leads to a properly_cancelled state.;@Test_	public void testCancelWhileInLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().failSync(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.cancel()___		assertEquals(JobStatus.CANCELLING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().cancelingComplete()___		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,cancellation,concurrent,to,a,local,failover,leads,to,a,properly,cancelled,state;test,public,void,test,cancel,while,in,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,sync,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,cancel,assert,equals,job,status,cancelling,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testCancelWhileInLocalFailover() throws Exception;1550220073;Tests that a cancellation concurrent to a local failover leads to a properly_cancelled state.;@Test_	public void testCancelWhileInLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.cancel()___		assertEquals(JobStatus.CANCELLING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().cancelingComplete()___		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,cancellation,concurrent,to,a,local,failover,leads,to,a,properly,cancelled,state;test,public,void,test,cancel,while,in,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,cancel,assert,equals,job,status,cancelling,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testCancelWhileInLocalFailover() throws Exception;1550683188;Tests that a cancellation concurrent to a local failover leads to a properly_cancelled state.;@Test_	public void testCancelWhileInLocalFailover() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			TestRestartStrategy.directExecuting(),_			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)__		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		final CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.cancel()___		assertEquals(JobStatus.CANCELLING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		vertex2.getCurrentExecutionAttempt().completeCancelling()___		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())__		assertTrue(vertex1.getCurrentExecutionAttempt().getState().isTerminal())__		assertTrue(vertex2.getCurrentExecutionAttempt().getState().isTerminal())___		_		assertEquals(parallelism, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,cancellation,concurrent,to,a,local,failover,leads,to,a,properly,cancelled,state;test,public,void,test,cancel,while,in,local,failover,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,test,restart,strategy,direct,executing,slot,provider,parallelism,graph,start,main,thread,executor,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,final,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,job,status,running,graph,get,state,graph,cancel,assert,equals,job,status,cancelling,graph,get,state,assert,equals,execution,state,failed,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,vertex2,get,current,execution,attempt,complete,cancelling,assert,equals,job,status,canceled,graph,get,termination,future,get,assert,true,vertex1,get,current,execution,attempt,get,state,is,terminal,assert,true,vertex2,get,current,execution,attempt,get,state,is,terminal,assert,equals,parallelism,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception;1549365080;Tests that a local failover does not try to trump a global failover.;@Test_	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		graph.start(mainThreadExecutor)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())___		_		vertex2.getCurrentExecutionAttempt().failSync(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(vertex2).getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new Exception("test exception"))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex1.getCurrentExecutionAttempt().getState())___		_		vertex1.getCurrentExecutionAttempt().cancelingComplete()___		waitUntilJobStatus(graph, JobStatus.RUNNING, 1000)__		assertEquals(JobStatus.RUNNING, graph.getState())___		waitUntilExecutionState(vertex1.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex1.getCurrentExecutionAttempt().switchToRunning()__		vertex2.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(1, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())___		blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		_		vertex2.getCurrentExecutionAttempt().failSync(new Exception("test failure"))___		_		blocker.complete(null)___		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex2.getCurrentExecutionAttempt().switchToRunning()___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(2, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(2, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,local,failover,does,not,try,to,trump,a,global,failover;test,public,void,test,global,recovery,concurrent,to,local,recovery,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,new,test,restart,strategy,2,false,slot,provider,parallelism,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,graph,start,main,thread,executor,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,vertex2,get,current,execution,attempt,fail,sync,new,exception,test,failure,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,vertex2,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex1,get,current,execution,attempt,get,state,vertex1,get,current,execution,attempt,canceling,complete,wait,until,job,status,graph,job,status,running,1000,assert,equals,job,status,running,graph,get,state,wait,until,execution,state,vertex1,get,current,execution,attempt,execution,state,deploying,1000,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex1,get,current,execution,attempt,switch,to,running,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,1,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots,blocker,new,completable,future,strategy,set,blocker,future,blocker,vertex2,get,current,execution,attempt,fail,sync,new,exception,test,failure,blocker,complete,null,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,2,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,2,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception;1550220073;Tests that a local failover does not try to trump a global failover.;@Test_	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		graph.start(mainThreadExecutor)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())___		_		vertex2.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(vertex2).getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new Exception("test exception"))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex1.getCurrentExecutionAttempt().getState())___		_		vertex1.getCurrentExecutionAttempt().cancelingComplete()___		waitUntilJobStatus(graph, JobStatus.RUNNING, 1000)__		assertEquals(JobStatus.RUNNING, graph.getState())___		waitUntilExecutionState(vertex1.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex1.getCurrentExecutionAttempt().switchToRunning()__		vertex2.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(1, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())___		blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		_		vertex2.getCurrentExecutionAttempt().fail(new Exception("test failure"))___		_		blocker.complete(null)___		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex2.getCurrentExecutionAttempt().switchToRunning()___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(2, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(2, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,local,failover,does,not,try,to,trump,a,global,failover;test,public,void,test,global,recovery,concurrent,to,local,recovery,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,new,test,restart,strategy,2,false,slot,provider,parallelism,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,graph,start,main,thread,executor,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,vertex2,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,vertex2,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex1,get,current,execution,attempt,get,state,vertex1,get,current,execution,attempt,canceling,complete,wait,until,job,status,graph,job,status,running,1000,assert,equals,job,status,running,graph,get,state,wait,until,execution,state,vertex1,get,current,execution,attempt,execution,state,deploying,1000,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex1,get,current,execution,attempt,switch,to,running,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,1,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots,blocker,new,completable,future,strategy,set,blocker,future,blocker,vertex2,get,current,execution,attempt,fail,new,exception,test,failure,blocker,complete,null,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,2,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,2,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception;1550683188;Tests that a local failover does not try to trump a global failover.;@Test_	public void testGlobalRecoveryConcurrentToLocalRecovery() throws Exception {__		_		_		_		_		_		_		__		final JobID jid = new JobID()__		final int parallelism = 2___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			TestRestartPipelinedRegionStrategy::new,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		TestRestartPipelinedRegionStrategy strategy = (TestRestartPipelinedRegionStrategy) graph.getFailoverStrategy()___		_		CompletableFuture<?> blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		graph.start(mainThreadExecutor)___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())___		_		vertex2.getCurrentExecutionAttempt().fail(new Exception("test failure"))__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(JobStatus.CANCELLING, strategy.getFailoverRegion(vertex2).getState())___		_		assertEquals(JobStatus.RUNNING, graph.getState())___		_		graph.failGlobal(new Exception("test exception"))___		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(ExecutionState.FAILED, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.CANCELING, vertex1.getCurrentExecutionAttempt().getState())___		_		vertex1.getCurrentExecutionAttempt().completeCancelling()___		waitUntilJobStatus(graph, JobStatus.RUNNING, 1000)__		assertEquals(JobStatus.RUNNING, graph.getState())___		waitUntilExecutionState(vertex1.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex1.getCurrentExecutionAttempt().switchToRunning()__		vertex2.getCurrentExecutionAttempt().switchToRunning()__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())___		_		blocker.complete(null)___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(1, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())___		blocker = new CompletableFuture<>()__		strategy.setBlockerFuture(blocker)___		_		vertex2.getCurrentExecutionAttempt().fail(new Exception("test failure"))___		_		blocker.complete(null)___		waitUntilExecutionState(vertex2.getCurrentExecutionAttempt(), ExecutionState.DEPLOYING, 1000)__		vertex2.getCurrentExecutionAttempt().switchToRunning()___		_		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex1).getState())__		assertEquals(JobStatus.RUNNING, strategy.getFailoverRegion(vertex2).getState())__		assertEquals(ExecutionState.RUNNING, vertex1.getCurrentExecutionAttempt().getState())__		assertEquals(ExecutionState.RUNNING, vertex2.getCurrentExecutionAttempt().getState())__		assertEquals(1, vertex1.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(2, vertex2.getCurrentExecutionAttempt().getAttemptNumber())__		assertEquals(1, vertex1.getCopyOfPriorExecutionsList().size())__		assertEquals(2, vertex2.getCopyOfPriorExecutionsList().size())___		_		assertEquals(0, slotProvider.getNumberOfAvailableSlots())__	};tests,that,a,local,failover,does,not,try,to,trump,a,global,failover;test,public,void,test,global,recovery,concurrent,to,local,recovery,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,final,execution,graph,graph,create,sample,graph,jid,test,restart,pipelined,region,strategy,new,new,test,restart,strategy,2,false,slot,provider,parallelism,test,restart,pipelined,region,strategy,strategy,test,restart,pipelined,region,strategy,graph,get,failover,strategy,completable,future,blocker,new,completable,future,strategy,set,blocker,future,blocker,graph,start,main,thread,executor,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,vertex2,get,current,execution,attempt,fail,new,exception,test,failure,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,job,status,cancelling,strategy,get,failover,region,vertex2,get,state,assert,equals,job,status,running,graph,get,state,graph,fail,global,new,exception,test,exception,assert,equals,job,status,failing,graph,get,state,assert,equals,execution,state,failed,vertex2,get,current,execution,attempt,get,state,assert,equals,execution,state,canceling,vertex1,get,current,execution,attempt,get,state,vertex1,get,current,execution,attempt,complete,cancelling,wait,until,job,status,graph,job,status,running,1000,assert,equals,job,status,running,graph,get,state,wait,until,execution,state,vertex1,get,current,execution,attempt,execution,state,deploying,1000,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex1,get,current,execution,attempt,switch,to,running,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,blocker,complete,null,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,1,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots,blocker,new,completable,future,strategy,set,blocker,future,blocker,vertex2,get,current,execution,attempt,fail,new,exception,test,failure,blocker,complete,null,wait,until,execution,state,vertex2,get,current,execution,attempt,execution,state,deploying,1000,vertex2,get,current,execution,attempt,switch,to,running,assert,equals,job,status,running,graph,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex1,get,state,assert,equals,job,status,running,strategy,get,failover,region,vertex2,get,state,assert,equals,execution,state,running,vertex1,get,current,execution,attempt,get,state,assert,equals,execution,state,running,vertex2,get,current,execution,attempt,get,state,assert,equals,1,vertex1,get,current,execution,attempt,get,attempt,number,assert,equals,2,vertex2,get,current,execution,attempt,get,attempt,number,assert,equals,1,vertex1,get,copy,of,prior,executions,list,size,assert,equals,2,vertex2,get,copy,of,prior,executions,list,size,assert,equals,0,slot,provider,get,number,of,available,slots
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testLocalFailureFailsPendingCheckpoints() throws Exception;1549365080;Tests that a local failure fails all pending checkpoints which have not been acknowledged by the failing_task.;@Test_	public void testLocalFailureFailsPendingCheckpoints() throws Exception {_		final JobID jid = new JobID()__		final int parallelism = 2__		final long verifyTimeout = 5000L___		final TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)__		when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(taskManagerGateway.cancelTask(any(ExecutionAttemptID.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism, taskManagerGateway)___		final CheckpointCoordinatorConfiguration checkpointCoordinatorConfiguration = new CheckpointCoordinatorConfiguration(_			10L,_			100000L,_			1L,_			3,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			true)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			(eg) -> new RestartIndividualStrategy(eg) {_					@Override_					protected void performExecutionVertexRestart(_						ExecutionVertex vertexToRecover,_						long globalModVersion) {_					}_				}_			,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)___		final List<ExecutionJobVertex> allVertices = new ArrayList<>(graph.getAllVertices().values())___		final StandaloneCheckpointIDCounter standaloneCheckpointIDCounter = new StandaloneCheckpointIDCounter()___		graph.enableCheckpointing(_			checkpointCoordinatorConfiguration.getCheckpointInterval(),_			checkpointCoordinatorConfiguration.getCheckpointTimeout(),_			checkpointCoordinatorConfiguration.getMinPauseBetweenCheckpoints(),_			checkpointCoordinatorConfiguration.getMaxConcurrentCheckpoints(),_			checkpointCoordinatorConfiguration.getCheckpointRetentionPolicy(),_			allVertices,_			allVertices,_			allVertices,_			Collections.emptyList(),_			standaloneCheckpointIDCounter,_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			new CheckpointStatsTracker(_				1,_				allVertices,_				checkpointCoordinatorConfiguration,_				UnregisteredMetricGroups.createUnregisteredTaskMetricGroup()))___		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		verify(taskManagerGateway, timeout(verifyTimeout).times(parallelism)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			executionVertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex1.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex2.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		assertEquals(3, checkpointCoordinator.getNumberOfPendingCheckpoints())___		long checkpointToAcknowledge = standaloneCheckpointIDCounter.getLast()___		checkpointCoordinator.receiveAcknowledgeMessage(_			new AcknowledgeCheckpoint(_				graph.getJobID(),_				vertex1.getCurrentExecutionAttempt().getAttemptId(),_				checkpointToAcknowledge))___		Map<Long, PendingCheckpoint> oldPendingCheckpoints = new HashMap<>(3)___		for (PendingCheckpoint pendingCheckpoint : checkpointCoordinator.getPendingCheckpoints().values()) {_			assertFalse(pendingCheckpoint.isDiscarded())__			oldPendingCheckpoints.put(pendingCheckpoint.getCheckpointId(), pendingCheckpoint)__		}__		_		vertex1.getCurrentExecutionAttempt().failSync(new Exception("test failure"))___		for (PendingCheckpoint pendingCheckpoint : oldPendingCheckpoints.values()) {_			if (pendingCheckpoint.getCheckpointId() == checkpointToAcknowledge) {_				assertFalse(pendingCheckpoint.isDiscarded())__			} else {_				assertTrue(pendingCheckpoint.isDiscarded())__			}_		}_	};tests,that,a,local,failure,fails,all,pending,checkpoints,which,have,not,been,acknowledged,by,the,failing,task;test,public,void,test,local,failure,fails,pending,checkpoints,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,long,verify,timeout,5000l,final,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,task,manager,gateway,cancel,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,task,manager,gateway,final,checkpoint,coordinator,configuration,checkpoint,coordinator,configuration,new,checkpoint,coordinator,configuration,10l,100000l,1l,3,checkpoint,retention,policy,true,final,execution,graph,graph,create,sample,graph,jid,eg,new,restart,individual,strategy,eg,override,protected,void,perform,execution,vertex,restart,execution,vertex,vertex,to,recover,long,global,mod,version,new,test,restart,strategy,2,false,slot,provider,parallelism,graph,start,main,thread,executor,final,list,execution,job,vertex,all,vertices,new,array,list,graph,get,all,vertices,values,final,standalone,checkpoint,idcounter,standalone,checkpoint,idcounter,new,standalone,checkpoint,idcounter,graph,enable,checkpointing,checkpoint,coordinator,configuration,get,checkpoint,interval,checkpoint,coordinator,configuration,get,checkpoint,timeout,checkpoint,coordinator,configuration,get,min,pause,between,checkpoints,checkpoint,coordinator,configuration,get,max,concurrent,checkpoints,checkpoint,coordinator,configuration,get,checkpoint,retention,policy,all,vertices,all,vertices,all,vertices,collections,empty,list,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,new,checkpoint,stats,tracker,1,all,vertices,checkpoint,coordinator,configuration,unregistered,metric,groups,create,unregistered,task,metric,group,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,verify,task,manager,gateway,timeout,verify,timeout,times,parallelism,submit,task,any,task,deployment,descriptor,class,any,time,class,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,execution,vertex,get,current,execution,attempt,switch,to,running,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex1,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex2,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,assert,equals,3,checkpoint,coordinator,get,number,of,pending,checkpoints,long,checkpoint,to,acknowledge,standalone,checkpoint,idcounter,get,last,checkpoint,coordinator,receive,acknowledge,message,new,acknowledge,checkpoint,graph,get,job,id,vertex1,get,current,execution,attempt,get,attempt,id,checkpoint,to,acknowledge,map,long,pending,checkpoint,old,pending,checkpoints,new,hash,map,3,for,pending,checkpoint,pending,checkpoint,checkpoint,coordinator,get,pending,checkpoints,values,assert,false,pending,checkpoint,is,discarded,old,pending,checkpoints,put,pending,checkpoint,get,checkpoint,id,pending,checkpoint,vertex1,get,current,execution,attempt,fail,sync,new,exception,test,failure,for,pending,checkpoint,pending,checkpoint,old,pending,checkpoints,values,if,pending,checkpoint,get,checkpoint,id,checkpoint,to,acknowledge,assert,false,pending,checkpoint,is,discarded,else,assert,true,pending,checkpoint,is,discarded
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testLocalFailureFailsPendingCheckpoints() throws Exception;1550220073;Tests that a local failure fails all pending checkpoints which have not been acknowledged by the failing_task.;@Test_	public void testLocalFailureFailsPendingCheckpoints() throws Exception {_		final JobID jid = new JobID()__		final int parallelism = 2__		final long verifyTimeout = 5000L___		final TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)__		when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(taskManagerGateway.cancelTask(any(ExecutionAttemptID.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism, taskManagerGateway)___		final CheckpointCoordinatorConfiguration checkpointCoordinatorConfiguration = new CheckpointCoordinatorConfiguration(_			10L,_			100000L,_			1L,_			3,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			true)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			(eg) -> new RestartIndividualStrategy(eg) {_					@Override_					protected void performExecutionVertexRestart(_						ExecutionVertex vertexToRecover,_						long globalModVersion) {_					}_				}_			,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)___		final List<ExecutionJobVertex> allVertices = new ArrayList<>(graph.getAllVertices().values())___		final StandaloneCheckpointIDCounter standaloneCheckpointIDCounter = new StandaloneCheckpointIDCounter()___		graph.enableCheckpointing(_			checkpointCoordinatorConfiguration.getCheckpointInterval(),_			checkpointCoordinatorConfiguration.getCheckpointTimeout(),_			checkpointCoordinatorConfiguration.getMinPauseBetweenCheckpoints(),_			checkpointCoordinatorConfiguration.getMaxConcurrentCheckpoints(),_			checkpointCoordinatorConfiguration.getCheckpointRetentionPolicy(),_			allVertices,_			allVertices,_			allVertices,_			Collections.emptyList(),_			standaloneCheckpointIDCounter,_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			new CheckpointStatsTracker(_				1,_				allVertices,_				checkpointCoordinatorConfiguration,_				UnregisteredMetricGroups.createUnregisteredTaskMetricGroup()))___		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		verify(taskManagerGateway, timeout(verifyTimeout).times(parallelism)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			executionVertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex1.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex2.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		assertEquals(3, checkpointCoordinator.getNumberOfPendingCheckpoints())___		long checkpointToAcknowledge = standaloneCheckpointIDCounter.getLast()___		checkpointCoordinator.receiveAcknowledgeMessage(_			new AcknowledgeCheckpoint(_				graph.getJobID(),_				vertex1.getCurrentExecutionAttempt().getAttemptId(),_				checkpointToAcknowledge))___		Map<Long, PendingCheckpoint> oldPendingCheckpoints = new HashMap<>(3)___		for (PendingCheckpoint pendingCheckpoint : checkpointCoordinator.getPendingCheckpoints().values()) {_			assertFalse(pendingCheckpoint.isDiscarded())__			oldPendingCheckpoints.put(pendingCheckpoint.getCheckpointId(), pendingCheckpoint)__		}__		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))___		for (PendingCheckpoint pendingCheckpoint : oldPendingCheckpoints.values()) {_			if (pendingCheckpoint.getCheckpointId() == checkpointToAcknowledge) {_				assertFalse(pendingCheckpoint.isDiscarded())__			} else {_				assertTrue(pendingCheckpoint.isDiscarded())__			}_		}_	};tests,that,a,local,failure,fails,all,pending,checkpoints,which,have,not,been,acknowledged,by,the,failing,task;test,public,void,test,local,failure,fails,pending,checkpoints,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,long,verify,timeout,5000l,final,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,task,manager,gateway,cancel,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,task,manager,gateway,final,checkpoint,coordinator,configuration,checkpoint,coordinator,configuration,new,checkpoint,coordinator,configuration,10l,100000l,1l,3,checkpoint,retention,policy,true,final,execution,graph,graph,create,sample,graph,jid,eg,new,restart,individual,strategy,eg,override,protected,void,perform,execution,vertex,restart,execution,vertex,vertex,to,recover,long,global,mod,version,new,test,restart,strategy,2,false,slot,provider,parallelism,graph,start,main,thread,executor,final,list,execution,job,vertex,all,vertices,new,array,list,graph,get,all,vertices,values,final,standalone,checkpoint,idcounter,standalone,checkpoint,idcounter,new,standalone,checkpoint,idcounter,graph,enable,checkpointing,checkpoint,coordinator,configuration,get,checkpoint,interval,checkpoint,coordinator,configuration,get,checkpoint,timeout,checkpoint,coordinator,configuration,get,min,pause,between,checkpoints,checkpoint,coordinator,configuration,get,max,concurrent,checkpoints,checkpoint,coordinator,configuration,get,checkpoint,retention,policy,all,vertices,all,vertices,all,vertices,collections,empty,list,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,new,checkpoint,stats,tracker,1,all,vertices,checkpoint,coordinator,configuration,unregistered,metric,groups,create,unregistered,task,metric,group,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,verify,task,manager,gateway,timeout,verify,timeout,times,parallelism,submit,task,any,task,deployment,descriptor,class,any,time,class,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,execution,vertex,get,current,execution,attempt,switch,to,running,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex1,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex2,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,assert,equals,3,checkpoint,coordinator,get,number,of,pending,checkpoints,long,checkpoint,to,acknowledge,standalone,checkpoint,idcounter,get,last,checkpoint,coordinator,receive,acknowledge,message,new,acknowledge,checkpoint,graph,get,job,id,vertex1,get,current,execution,attempt,get,attempt,id,checkpoint,to,acknowledge,map,long,pending,checkpoint,old,pending,checkpoints,new,hash,map,3,for,pending,checkpoint,pending,checkpoint,checkpoint,coordinator,get,pending,checkpoints,values,assert,false,pending,checkpoint,is,discarded,old,pending,checkpoints,put,pending,checkpoint,get,checkpoint,id,pending,checkpoint,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,for,pending,checkpoint,pending,checkpoint,old,pending,checkpoints,values,if,pending,checkpoint,get,checkpoint,id,checkpoint,to,acknowledge,assert,false,pending,checkpoint,is,discarded,else,assert,true,pending,checkpoint,is,discarded
ConcurrentFailoverStrategyExecutionGraphTest -> @Test 	public void testLocalFailureFailsPendingCheckpoints() throws Exception;1550683188;Tests that a local failure fails all pending checkpoints which have not been acknowledged by the failing_task.;@Test_	public void testLocalFailureFailsPendingCheckpoints() throws Exception {_		final JobID jid = new JobID()__		final int parallelism = 2__		final long verifyTimeout = 5000L___		final TaskManagerGateway taskManagerGateway = mock(TaskManagerGateway.class)__		when(taskManagerGateway.submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))__		when(taskManagerGateway.cancelTask(any(ExecutionAttemptID.class), any(Time.class))).thenReturn(CompletableFuture.completedFuture(Acknowledge.get()))___		final SimpleSlotProvider slotProvider = new SimpleSlotProvider(jid, parallelism, taskManagerGateway)___		final CheckpointCoordinatorConfiguration checkpointCoordinatorConfiguration = new CheckpointCoordinatorConfiguration(_			10L,_			100000L,_			1L,_			3,_			CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION,_			true)___		final ExecutionGraph graph = createSampleGraph(_			jid,_			(eg) -> new RestartIndividualStrategy(eg) {_					@Override_					protected void performExecutionVertexRestart(_						ExecutionVertex vertexToRecover,_						long globalModVersion) {_					}_				}_			,_			new TestRestartStrategy(2, false), _			slotProvider,_			parallelism)___		graph.start(mainThreadExecutor)___		final List<ExecutionJobVertex> allVertices = new ArrayList<>(graph.getAllVertices().values())___		final StandaloneCheckpointIDCounter standaloneCheckpointIDCounter = new StandaloneCheckpointIDCounter()___		graph.enableCheckpointing(_			checkpointCoordinatorConfiguration.getCheckpointInterval(),_			checkpointCoordinatorConfiguration.getCheckpointTimeout(),_			checkpointCoordinatorConfiguration.getMinPauseBetweenCheckpoints(),_			checkpointCoordinatorConfiguration.getMaxConcurrentCheckpoints(),_			checkpointCoordinatorConfiguration.getCheckpointRetentionPolicy(),_			allVertices,_			allVertices,_			allVertices,_			Collections.emptyList(),_			standaloneCheckpointIDCounter,_			new StandaloneCompletedCheckpointStore(1),_			new MemoryStateBackend(),_			new CheckpointStatsTracker(_				1,_				allVertices,_				checkpointCoordinatorConfiguration,_				UnregisteredMetricGroups.createUnregisteredTaskMetricGroup()))___		final CheckpointCoordinator checkpointCoordinator = graph.getCheckpointCoordinator()___		final ExecutionJobVertex ejv = graph.getVerticesTopologically().iterator().next()__		final ExecutionVertex vertex1 = ejv.getTaskVertices()[0]__		final ExecutionVertex vertex2 = ejv.getTaskVertices()[1]___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		verify(taskManagerGateway, timeout(verifyTimeout).times(parallelism)).submitTask(any(TaskDeploymentDescriptor.class), any(Time.class))___		_		for (ExecutionVertex executionVertex : graph.getAllExecutionVertices()) {_			executionVertex.getCurrentExecutionAttempt().switchToRunning()__		}__		_		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex1.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		verify(taskManagerGateway, timeout(verifyTimeout).times(3)).triggerCheckpoint(_			eq(vertex2.getCurrentExecutionAttempt().getAttemptId()),_			any(JobID.class),_			anyLong(),_			anyLong(),_			any(CheckpointOptions.class))___		assertEquals(3, checkpointCoordinator.getNumberOfPendingCheckpoints())___		long checkpointToAcknowledge = standaloneCheckpointIDCounter.getLast()___		checkpointCoordinator.receiveAcknowledgeMessage(_			new AcknowledgeCheckpoint(_				graph.getJobID(),_				vertex1.getCurrentExecutionAttempt().getAttemptId(),_				checkpointToAcknowledge))___		Map<Long, PendingCheckpoint> oldPendingCheckpoints = new HashMap<>(3)___		for (PendingCheckpoint pendingCheckpoint : checkpointCoordinator.getPendingCheckpoints().values()) {_			assertFalse(pendingCheckpoint.isDiscarded())__			oldPendingCheckpoints.put(pendingCheckpoint.getCheckpointId(), pendingCheckpoint)__		}__		_		vertex1.getCurrentExecutionAttempt().fail(new Exception("test failure"))___		for (PendingCheckpoint pendingCheckpoint : oldPendingCheckpoints.values()) {_			if (pendingCheckpoint.getCheckpointId() == checkpointToAcknowledge) {_				assertFalse(pendingCheckpoint.isDiscarded())__			} else {_				assertTrue(pendingCheckpoint.isDiscarded())__			}_		}_	};tests,that,a,local,failure,fails,all,pending,checkpoints,which,have,not,been,acknowledged,by,the,failing,task;test,public,void,test,local,failure,fails,pending,checkpoints,throws,exception,final,job,id,jid,new,job,id,final,int,parallelism,2,final,long,verify,timeout,5000l,final,task,manager,gateway,task,manager,gateway,mock,task,manager,gateway,class,when,task,manager,gateway,submit,task,any,task,deployment,descriptor,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,when,task,manager,gateway,cancel,task,any,execution,attempt,id,class,any,time,class,then,return,completable,future,completed,future,acknowledge,get,final,simple,slot,provider,slot,provider,new,simple,slot,provider,jid,parallelism,task,manager,gateway,final,checkpoint,coordinator,configuration,checkpoint,coordinator,configuration,new,checkpoint,coordinator,configuration,10l,100000l,1l,3,checkpoint,retention,policy,true,final,execution,graph,graph,create,sample,graph,jid,eg,new,restart,individual,strategy,eg,override,protected,void,perform,execution,vertex,restart,execution,vertex,vertex,to,recover,long,global,mod,version,new,test,restart,strategy,2,false,slot,provider,parallelism,graph,start,main,thread,executor,final,list,execution,job,vertex,all,vertices,new,array,list,graph,get,all,vertices,values,final,standalone,checkpoint,idcounter,standalone,checkpoint,idcounter,new,standalone,checkpoint,idcounter,graph,enable,checkpointing,checkpoint,coordinator,configuration,get,checkpoint,interval,checkpoint,coordinator,configuration,get,checkpoint,timeout,checkpoint,coordinator,configuration,get,min,pause,between,checkpoints,checkpoint,coordinator,configuration,get,max,concurrent,checkpoints,checkpoint,coordinator,configuration,get,checkpoint,retention,policy,all,vertices,all,vertices,all,vertices,collections,empty,list,standalone,checkpoint,idcounter,new,standalone,completed,checkpoint,store,1,new,memory,state,backend,new,checkpoint,stats,tracker,1,all,vertices,checkpoint,coordinator,configuration,unregistered,metric,groups,create,unregistered,task,metric,group,final,checkpoint,coordinator,checkpoint,coordinator,graph,get,checkpoint,coordinator,final,execution,job,vertex,ejv,graph,get,vertices,topologically,iterator,next,final,execution,vertex,vertex1,ejv,get,task,vertices,0,final,execution,vertex,vertex2,ejv,get,task,vertices,1,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,verify,task,manager,gateway,timeout,verify,timeout,times,parallelism,submit,task,any,task,deployment,descriptor,class,any,time,class,for,execution,vertex,execution,vertex,graph,get,all,execution,vertices,execution,vertex,get,current,execution,attempt,switch,to,running,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex1,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,verify,task,manager,gateway,timeout,verify,timeout,times,3,trigger,checkpoint,eq,vertex2,get,current,execution,attempt,get,attempt,id,any,job,id,class,any,long,any,long,any,checkpoint,options,class,assert,equals,3,checkpoint,coordinator,get,number,of,pending,checkpoints,long,checkpoint,to,acknowledge,standalone,checkpoint,idcounter,get,last,checkpoint,coordinator,receive,acknowledge,message,new,acknowledge,checkpoint,graph,get,job,id,vertex1,get,current,execution,attempt,get,attempt,id,checkpoint,to,acknowledge,map,long,pending,checkpoint,old,pending,checkpoints,new,hash,map,3,for,pending,checkpoint,pending,checkpoint,checkpoint,coordinator,get,pending,checkpoints,values,assert,false,pending,checkpoint,is,discarded,old,pending,checkpoints,put,pending,checkpoint,get,checkpoint,id,pending,checkpoint,vertex1,get,current,execution,attempt,fail,new,exception,test,failure,for,pending,checkpoint,pending,checkpoint,old,pending,checkpoints,values,if,pending,checkpoint,get,checkpoint,id,checkpoint,to,acknowledge,assert,false,pending,checkpoint,is,discarded,else,assert,true,pending,checkpoint,is,discarded
