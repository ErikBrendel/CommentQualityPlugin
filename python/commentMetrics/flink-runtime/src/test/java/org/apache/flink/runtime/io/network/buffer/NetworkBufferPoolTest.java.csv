# id;timestamp;commentText;codeText;commentWords;codeWords
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1507647199;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128, MemoryType.HEAP)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		asyncRequest.sync()__	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,type,heap,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,async,request,sync
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1511516912;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		asyncRequest.sync()__	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,async,request,sync
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1516285878;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		asyncRequest.sync()__	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,async,request,sync
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		asyncRequest.sync()__	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,async,request,sync
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		asyncRequest.sync()__	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,async,request,sync
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		try {_			asyncRequest.sync()__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,try,async,request,sync,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		try {_			asyncRequest.sync()__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,try,async,request,sync,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		try {_			asyncRequest.sync()__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,try,async,request,sync,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		try {_			asyncRequest.sync()__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,try,async,request,sync,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable() throws Exception;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted in_case of a concurrent {@link NetworkBufferPool#destroy()} call.;@Test_	public void testRequestMemorySegmentsInterruptable() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		globalPool.destroy()___		segment.free()___		expectedException.expect(IllegalStateException.class)__		expectedException.expectMessage("destroyed")__		try {_			asyncRequest.sync()__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,in,case,of,a,concurrent,link,network,buffer,pool,destroy,call;test,public,void,test,request,memory,segments,interruptable,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,global,pool,destroy,segment,free,expected,exception,expect,illegal,state,exception,class,expected,exception,expect,message,destroyed,try,async,request,sync,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable2() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and_remains in a defined state even if the waiting is interrupted.;@Test_	public void testRequestMemorySegmentsInterruptable2() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		asyncRequest.interrupt()___		globalPool.recycle(segment)___		try {_			asyncRequest.sync()__		} catch (IOException e) {_			assertThat(e, hasProperty("cause", instanceOf(InterruptedException.class)))___			_			_			globalPool.createBufferPool(10, 10)__		} finally {_			globalPool.destroy()___		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,and,remains,in,a,defined,state,even,if,the,waiting,is,interrupted;test,public,void,test,request,memory,segments,interruptable2,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,async,request,interrupt,global,pool,recycle,segment,try,async,request,sync,catch,ioexception,e,assert,that,e,has,property,cause,instance,of,interrupted,exception,class,global,pool,create,buffer,pool,10,10,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable2() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and_remains in a defined state even if the waiting is interrupted.;@Test_	public void testRequestMemorySegmentsInterruptable2() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		asyncRequest.interrupt()___		globalPool.recycle(segment)___		try {_			asyncRequest.sync()__		} catch (IOException e) {_			assertThat(e, hasProperty("cause", instanceOf(InterruptedException.class)))___			_			_			globalPool.createBufferPool(10, 10)__		} finally {_			globalPool.destroy()___		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,and,remains,in,a,defined,state,even,if,the,waiting,is,interrupted;test,public,void,test,request,memory,segments,interruptable2,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,async,request,interrupt,global,pool,recycle,segment,try,async,request,sync,catch,ioexception,e,assert,that,e,has,property,cause,instance,of,interrupted,exception,class,global,pool,create,buffer,pool,10,10,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable2() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and_remains in a defined state even if the waiting is interrupted.;@Test_	public void testRequestMemorySegmentsInterruptable2() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		asyncRequest.interrupt()___		globalPool.recycle(segment)___		try {_			asyncRequest.sync()__		} catch (IOException e) {_			assertThat(e, hasProperty("cause", instanceOf(InterruptedException.class)))___			_			_			globalPool.createBufferPool(10, 10)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,and,remains,in,a,defined,state,even,if,the,waiting,is,interrupted;test,public,void,test,request,memory,segments,interruptable2,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,async,request,interrupt,global,pool,recycle,segment,try,async,request,sync,catch,ioexception,e,assert,that,e,has,property,cause,instance,of,interrupted,exception,class,global,pool,create,buffer,pool,10,10,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsInterruptable2() throws Exception;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)}, verifying it may be aborted and_remains in a defined state even if the waiting is interrupted.;@Test_	public void testRequestMemorySegmentsInterruptable2() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)__		MemorySegment segment = globalPool.requestMemorySegment()__		assertNotNull(segment)___		final OneShotLatch isRunning = new OneShotLatch()__		CheckedThread asyncRequest = new CheckedThread() {_			@Override_			public void go() throws Exception {_				isRunning.trigger()__				globalPool.requestMemorySegments(10)__			}_		}__		asyncRequest.start()___		_		_		isRunning.await()__		Thread.sleep(10)__		asyncRequest.interrupt()___		globalPool.recycle(segment)___		try {_			asyncRequest.sync()__		} catch (IOException e) {_			assertThat(e, hasProperty("cause", instanceOf(InterruptedException.class)))___			_			_			globalPool.createBufferPool(10, 10)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,verifying,it,may,be,aborted,and,remains,in,a,defined,state,even,if,the,waiting,is,interrupted;test,public,void,test,request,memory,segments,interruptable2,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,segment,segment,global,pool,request,memory,segment,assert,not,null,segment,final,one,shot,latch,is,running,new,one,shot,latch,checked,thread,async,request,new,checked,thread,override,public,void,go,throws,exception,is,running,trigger,global,pool,request,memory,segments,10,async,request,start,is,running,await,thread,sleep,10,async,request,interrupt,global,pool,recycle,segment,try,async,request,sync,catch,ioexception,e,assert,that,e,has,property,cause,instance,of,interrupted,exception,class,global,pool,create,buffer,pool,10,10,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1507647199;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128, MemoryType.HEAP)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycle()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,memory,type,heap,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1511516912;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycle()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1516285878;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently not containing the number of required free segments (currently occupied by a buffer pool).;@Test_	public void testRequestMemorySegmentsWithBuffersTaken() throws IOException, InterruptedException {_		final int numBuffers = 10___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		Thread bufferRecycler = null__		BufferPool lbp1 = null__		try {_			lbp1 = networkBufferPool.createBufferPool(numBuffers / 2, numBuffers)___			_			for (int i = 0_ i < numBuffers_ ++i) {_				Buffer buffer = lbp1.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			_			final OneShotLatch isRunning = new OneShotLatch()__			bufferRecycler = new Thread(() -> {_				try {_					isRunning.trigger()__					Thread.sleep(100)__				} catch (InterruptedException ignored) {_				}__				for (Buffer buffer : buffers) {_					buffer.recycleBuffer()__				}_			})__			bufferRecycler.start()___			_			isRunning.await()__			memorySegments = networkBufferPool.requestMemorySegments(numBuffers / 2)__			assertThat(memorySegments, not(hasItem(nullValue())))__		} finally {_			if (bufferRecycler != null) {_				bufferRecycler.join()__			}_			if (lbp1 != null) {_				lbp1.lazyDestroy()__			}_			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,not,containing,the,number,of,required,free,segments,currently,occupied,by,a,buffer,pool;test,public,void,test,request,memory,segments,with,buffers,taken,throws,ioexception,interrupted,exception,final,int,num,buffers,10,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,thread,buffer,recycler,null,buffer,pool,lbp1,null,try,lbp1,network,buffer,pool,create,buffer,pool,num,buffers,2,num,buffers,for,int,i,0,i,num,buffers,i,buffer,buffer,lbp1,request,buffer,buffers,add,buffer,assert,not,null,buffer,final,one,shot,latch,is,running,new,one,shot,latch,buffer,recycler,new,thread,try,is,running,trigger,thread,sleep,100,catch,interrupted,exception,ignored,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,recycler,start,is,running,await,memory,segments,network,buffer,pool,request,memory,segments,num,buffers,2,assert,that,memory,segments,not,has,item,null,value,finally,if,buffer,recycler,null,buffer,recycler,join,if,lbp1,null,lbp1,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1507647199;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128, MemoryType.HEAP)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,type,heap,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1511516912;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1516285878;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the invalid argument to_cause exception.;@Test_	public void testRequestMemorySegmentsWithInvalidArgument() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			_			globalPool.requestMemorySegments(0)__			fail("Should throw an IllegalArgumentException")__		} catch (IllegalArgumentException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,invalid,argument,to,cause,exception;test,public,void,test,request,memory,segments,with,invalid,argument,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,0,fail,should,throw,an,illegal,argument,exception,catch,illegal,argument,exception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers)__		_		bufferPool.setBufferPoolOwner(numBuffersToRecycle -> {_			throw new TestIOException()__		})___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,buffer,pool,set,buffer,pool,owner,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers)__		_		bufferPool.setBufferPoolOwner(numBuffersToRecycle -> {_			throw new TestIOException()__		})___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,buffer,pool,set,buffer,pool,owner,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers)__		_		bufferPool.setBufferPoolOwner(numBuffersToRecycle -> {_			throw new TestIOException()__		})___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,buffer,pool,set,buffer,pool,owner,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers)__		_		bufferPool.setBufferPoolOwner(numBuffersToRecycle -> {_			throw new TestIOException()__		})___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,buffer,pool,set,buffer,pool,owner,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers)__		_		bufferPool.setBufferPoolOwner(numBuffersToRecycle -> {_			throw new TestIOException()__		})___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,buffer,pool,set,buffer,pool,owner,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with an exception occurring during_the call to {@link NetworkBufferPool#redistributeBuffers()}.;@Test_	public void testRequestMemorySegmentsExceptionDuringBufferRedistribution() throws IOException {_		final int numBuffers = 3___		NetworkBufferPool networkBufferPool = new NetworkBufferPool(numBuffers, 128)___		final List<Buffer> buffers = new ArrayList<>(numBuffers)__		List<MemorySegment> memorySegments = Collections.emptyList()__		BufferPool bufferPool = networkBufferPool.createBufferPool(1, numBuffers,_			_			Optional.of(numBuffersToRecycle -> {_				throw new TestIOException()__		}))___		try {_			_			for (int i = 0_ i < numBuffers - 1_ ++i) {_				Buffer buffer = bufferPool.requestBuffer()__				buffers.add(buffer)__				assertNotNull(buffer)__			}__			_			memorySegments = networkBufferPool.requestMemorySegments(2)__			fail("Requesting memory segments should have thrown during buffer pool redistribution.")__		} catch (TestIOException e) {_			_			_			_			_			expectedException.expect(TestIOException.class)__			networkBufferPool.createBufferPool(2, 2)__		} finally {_			for (Buffer buffer : buffers) {_				buffer.recycleBuffer()__			}_			bufferPool.lazyDestroy()__			networkBufferPool.recycleMemorySegments(memorySegments)__			networkBufferPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,an,exception,occurring,during,the,call,to,link,network,buffer,pool,redistribute,buffers;test,public,void,test,request,memory,segments,exception,during,buffer,redistribution,throws,ioexception,final,int,num,buffers,3,network,buffer,pool,network,buffer,pool,new,network,buffer,pool,num,buffers,128,final,list,buffer,buffers,new,array,list,num,buffers,list,memory,segment,memory,segments,collections,empty,list,buffer,pool,buffer,pool,network,buffer,pool,create,buffer,pool,1,num,buffers,optional,of,num,buffers,to,recycle,throw,new,test,ioexception,try,for,int,i,0,i,num,buffers,1,i,buffer,buffer,buffer,pool,request,buffer,buffers,add,buffer,assert,not,null,buffer,memory,segments,network,buffer,pool,request,memory,segments,2,fail,requesting,memory,segments,should,have,thrown,during,buffer,pool,redistribution,catch,test,ioexception,e,expected,exception,expect,test,ioexception,class,network,buffer,pool,create,buffer,pool,2,2,finally,for,buffer,buffer,buffers,buffer,recycle,buffer,buffer,pool,lazy,destroy,network,buffer,pool,recycle,memory,segments,memory,segments,network,buffer,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1507647199;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128, MemoryType.HEAP)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,type,heap,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1511516912;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1516285878;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the {@link NetworkBufferPool}_currently containing the number of required free segments.;@Test_	public void testRequestMemorySegmentsLessThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		List<MemorySegment> memorySegments = Collections.emptyList()__		try {_			memorySegments = globalPool.requestMemorySegments(numBuffers / 2)__			assertEquals(memorySegments.size(), numBuffers / 2)___			globalPool.recycleMemorySegments(memorySegments)__			memorySegments.clear()__			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.recycleMemorySegments(memorySegments)_ _			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,link,network,buffer,pool,currently,containing,the,number,of,required,free,segments;test,public,void,test,request,memory,segments,less,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,list,memory,segment,memory,segments,collections,empty,list,try,memory,segments,global,pool,request,memory,segments,num,buffers,2,assert,equals,memory,segments,size,num,buffers,2,global,pool,recycle,memory,segments,memory,segments,memory,segments,clear,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,recycle,memory,segments,memory,segments,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1507647199;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128, MemoryType.HEAP)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,memory,type,heap,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1511516912;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1516285878;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1530683488;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
NetworkBufferPoolTest -> @Test 	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception;1540301084;Tests {@link NetworkBufferPool#requestMemorySegments(int)} with the number of required_buffers exceeding the capacity of {@link NetworkBufferPool}.;@Test_	public void testRequestMemorySegmentsMoreThanTotalBuffers() throws Exception {_		final int numBuffers = 10___		NetworkBufferPool globalPool = new NetworkBufferPool(numBuffers, 128)___		try {_			globalPool.requestMemorySegments(numBuffers + 1)__			fail("Should throw an IOException")__		} catch (IOException e) {_			assertEquals(globalPool.getNumberOfAvailableMemorySegments(), numBuffers)__		} finally {_			globalPool.destroy()__		}_	};tests,link,network,buffer,pool,request,memory,segments,int,with,the,number,of,required,buffers,exceeding,the,capacity,of,link,network,buffer,pool;test,public,void,test,request,memory,segments,more,than,total,buffers,throws,exception,final,int,num,buffers,10,network,buffer,pool,global,pool,new,network,buffer,pool,num,buffers,128,try,global,pool,request,memory,segments,num,buffers,1,fail,should,throw,an,ioexception,catch,ioexception,e,assert,equals,global,pool,get,number,of,available,memory,segments,num,buffers,finally,global,pool,destroy
