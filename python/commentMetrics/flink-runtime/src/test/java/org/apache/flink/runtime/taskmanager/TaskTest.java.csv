# id;timestamp;commentText;codeText;commentWords;codeWords
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1477582860;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1478096698;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1478513533;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1478800024;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1478815615;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1479339295;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1481560756;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1482522862;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1482522862;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1493298849;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1493759463;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1501619702;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1503041372;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1507212387;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1507212387;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1513094474;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1515519059;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1516626397;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1520522284;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1533306678;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1539073077;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1539073077;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception;1539073098;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUninterruptibleInvoke() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableUninterruptibleBlockingInvoke.class, config)___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			for (int i = 0_ i < 10_ i++) {_				Object msg = taskManagerMessages.poll(1, TimeUnit.SECONDS)__				if (msg instanceof TaskManagerMessages.FatalError) {_					return_ _				}_			}__			fail("Did not receive expected task manager message")__		} finally {_			_			cancelLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,uninterruptible,invoke,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,uninterruptible,blocking,invoke,class,config,try,task,start,task,thread,await,latch,await,task,cancel,execution,for,int,i,0,i,10,i,object,msg,task,manager,messages,poll,1,time,unit,seconds,if,msg,instanceof,task,manager,messages,fatal,error,return,fail,did,not,receive,expected,task,manager,message,finally,cancel,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1477582860;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,key,interval,config,set,long,task,manager,options,key,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1478096698;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,key,interval,config,set,long,task,manager,options,key,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1478513533;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1478800024;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1478815615;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1479339295;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1481560756;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1482522862;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1482522862;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1493298849;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1493759463;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1501619702;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1503041372;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1507212387;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1507212387;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1513094474;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1515519059;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1516626397;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1520522284;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1533306678;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539073077;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539073077;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539073098;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		Task task = createTask(InvokableBlockingInInvoke.class, config, executionConfig)___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,task,task,create,task,invokable,blocking,in,invoke,class,config,execution,config,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539257265;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		final ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInInvoke.class)_			.setTaskManagerConfig(config)_			.setExecutionConfig(executionConfig)_			.build()___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,final,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,final,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,task,manager,config,config,set,execution,config,execution,config,build,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539257398;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		final ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInInvoke.class)_			.setTaskManagerConfig(config)_			.setExecutionConfig(executionConfig)_			.build()___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,final,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,final,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,task,manager,config,config,set,execution,config,execution,config,build,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1539257411;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		final ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInInvoke.class)_			.setTaskManagerConfig(config)_			.setExecutionConfig(executionConfig)_			.build()___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,final,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,final,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,task,manager,config,config,set,execution,config,execution,config,build,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1540207709;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		final ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInInvoke.class)_			.setTaskManagerConfig(config)_			.setExecutionConfig(executionConfig)_			.build()___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,final,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,final,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,task,manager,config,config,set,execution,config,execution,config,build,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTaskConfig() throws Exception;1550366933;Tests that the task configuration is respected and overwritten by the execution config.;@Test_	public void testTaskConfig() throws Exception {_		long interval = 28218123__		long timeout = interval + 19292___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, interval)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, timeout)___		final ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.setTaskCancellationInterval(interval + 1337)__		executionConfig.setTaskCancellationTimeout(timeout - 1337)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInInvoke.class)_			.setTaskManagerConfig(config)_			.setExecutionConfig(executionConfig)_			.build()___		assertEquals(interval, task.getTaskCancellationInterval())__		assertEquals(timeout, task.getTaskCancellationTimeout())___		task.startTaskThread()___		awaitLatch.await()___		assertEquals(executionConfig.getTaskCancellationInterval(), task.getTaskCancellationInterval())__		assertEquals(executionConfig.getTaskCancellationTimeout(), task.getTaskCancellationTimeout())___		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};tests,that,the,task,configuration,is,respected,and,overwritten,by,the,execution,config;test,public,void,test,task,config,throws,exception,long,interval,28218123,long,timeout,interval,19292,final,configuration,config,new,configuration,config,set,long,task,manager,options,interval,config,set,long,task,manager,options,timeout,final,execution,config,execution,config,new,execution,config,execution,config,set,task,cancellation,interval,interval,1337,execution,config,set,task,cancellation,timeout,timeout,1337,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,task,manager,config,config,set,execution,config,execution,config,build,assert,equals,interval,task,get,task,cancellation,interval,assert,equals,timeout,task,get,task,cancellation,timeout,task,start,task,thread,await,latch,await,assert,equals,execution,config,get,task,cancellation,interval,task,get,task,cancellation,interval,assert,equals,execution,config,get,task,cancellation,timeout,task,get,task,cancellation,timeout,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1481560756;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1482522862;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1482522862;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1493298849;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1493759463;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				FlinkCompletableFuture<ExecutionState> promise = new FlinkCompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,flink,completable,future,execution,state,promise,new,flink,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1501619702;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1503041372;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCache blobCache = mock(BlobCache.class)__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,blob,cache,mock,blob,cache,class,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1507212387;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCache blobCache = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobCache, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,blob,cache,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,cache,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1507212387;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1513094474;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1515519059;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1516626397;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1520522284;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1533306678;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539073077;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539073077;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539073098;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		IntermediateDataSetID resultId = new IntermediateDataSetID()__		ResultPartitionID partitionId = new ResultPartitionID()___		BlobCacheService blobService = createBlobCache()__		LibraryCacheManager libCache = mock(LibraryCacheManager.class)__		when(libCache.getClassLoader(any(JobID.class))).thenReturn(getClass().getClassLoader())___		PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___		__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())___			CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			createQueuesAndActors()___			_			Task task = createTask(InvokableBlockingInInvoke.class, blobService, libCache, network, consumableNotifier, partitionChecker, Executors.directExecutor())__			SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,intermediate,data,set,id,result,id,new,intermediate,data,set,id,result,partition,id,partition,id,new,result,partition,id,blob,cache,service,blob,service,create,blob,cache,library,cache,manager,lib,cache,mock,library,cache,manager,class,when,lib,cache,get,class,loader,any,job,id,class,then,return,get,class,get,class,loader,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,create,queues,and,actors,task,task,create,task,invokable,blocking,in,invoke,class,blob,service,lib,cache,network,consumable,notifier,partition,checker,executors,direct,executor,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539257265;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		final IntermediateDataSetID resultId = new IntermediateDataSetID()__		final ResultPartitionID partitionId = new ResultPartitionID()___		final PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		final TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		final ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		final NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)____		_		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			setup()___			_			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,final,intermediate,data,set,id,result,id,new,intermediate,data,set,id,final,result,partition,id,partition,id,new,result,partition,id,final,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,final,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,final,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,final,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539257398;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		final IntermediateDataSetID resultId = new IntermediateDataSetID()__		final ResultPartitionID partitionId = new ResultPartitionID()___		final PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		final TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		final ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		final NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)____		_		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			setup()___			_			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,final,intermediate,data,set,id,result,id,new,intermediate,data,set,id,final,result,partition,id,partition,id,new,result,partition,id,final,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,final,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,final,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,final,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1539257411;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		final IntermediateDataSetID resultId = new IntermediateDataSetID()__		final ResultPartitionID partitionId = new ResultPartitionID()___		final PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		final TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		final ResultPartitionConsumableNotifier consumableNotifier = mock(ResultPartitionConsumableNotifier.class)__		final NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		_		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			setup()___			_			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,final,intermediate,data,set,id,result,id,new,intermediate,data,set,id,final,result,partition,id,partition,id,new,result,partition,id,final,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,final,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,final,result,partition,consumable,notifier,consumable,notifier,mock,result,partition,consumable,notifier,class,final,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1540207709;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		final IntermediateDataSetID resultId = new IntermediateDataSetID()__		final ResultPartitionID partitionId = new ResultPartitionID()___		final PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		final TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		final ResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier()__		final NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		_		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			setup()___			_			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,final,intermediate,data,set,id,result,id,new,intermediate,data,set,id,final,result,partition,id,partition,id,new,result,partition,id,final,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,final,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,final,result,partition,consumable,notifier,consumable,notifier,new,no,op,result,partition,consumable,notifier,final,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testTriggerPartitionStateUpdate() throws Exception;1550366933;Tests the trigger partition state update future completions.;@Test_	public void testTriggerPartitionStateUpdate() throws Exception {_		final IntermediateDataSetID resultId = new IntermediateDataSetID()__		final ResultPartitionID partitionId = new ResultPartitionID()___		final PartitionProducerStateChecker partitionChecker = mock(PartitionProducerStateChecker.class)__		final TaskEventDispatcher taskEventDispatcher = mock(TaskEventDispatcher.class)___		final ResultPartitionConsumableNotifier consumableNotifier = new NoOpResultPartitionConsumableNotifier()__		final NetworkEnvironment network = mock(NetworkEnvironment.class)__		when(network.getResultPartitionManager()).thenReturn(mock(ResultPartitionManager.class))__		when(network.getDefaultIOMode()).thenReturn(IOManager.IOMode.SYNC)__		when(network.createKvStateTaskRegistry(any(JobID.class), any(JobVertexID.class)))_			.thenReturn(mock(TaskKvStateRegistry.class))__		when(network.getTaskEventDispatcher()).thenReturn(taskEventDispatcher)___		_		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new PartitionProducerDisposedException(partitionId))__			assertEquals(ExecutionState.CANCELING, task.getExecutionState())__		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__			when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___			task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___			promise.completeExceptionally(new RuntimeException("Any other exception"))___			assertEquals(ExecutionState.FAILED, task.getExecutionState())__		}__		{_			_			setup()___			_			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.completeExceptionally(new TimeoutException())___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}__		{_			_			setup()___			_			final Task task =  new TaskBuilder()_				.setInvokable(InvokableBlockingInInvoke.class)_				.setNetworkEnvironment(network)_				.setConsumableNotifier(consumableNotifier)_				.setPartitionProducerStateChecker(partitionChecker)_				.setExecutor(Executors.directExecutor())_				.build()___			final SingleInputGate inputGate = mock(SingleInputGate.class)__			when(inputGate.getConsumedResultId()).thenReturn(resultId)___			try {_				task.startTaskThread()__				awaitLatch.await()___				setInputGate(task, inputGate)___				CompletableFuture<ExecutionState> promise = new CompletableFuture<>()__				when(partitionChecker.requestPartitionProducerState(eq(task.getJobID()), eq(resultId), eq(partitionId))).thenReturn(promise)___				task.triggerPartitionProducerStateCheck(task.getJobID(), resultId, partitionId)___				promise.complete(ExecutionState.RUNNING)___				assertEquals(ExecutionState.RUNNING, task.getExecutionState())___				verify(inputGate, times(1)).retriggerPartitionRequest(eq(partitionId.getPartitionId()))__			} finally {_				task.getExecutingThread().interrupt()__				task.getExecutingThread().join()__			}_		}_	};tests,the,trigger,partition,state,update,future,completions;test,public,void,test,trigger,partition,state,update,throws,exception,final,intermediate,data,set,id,result,id,new,intermediate,data,set,id,final,result,partition,id,partition,id,new,result,partition,id,final,partition,producer,state,checker,partition,checker,mock,partition,producer,state,checker,class,final,task,event,dispatcher,task,event,dispatcher,mock,task,event,dispatcher,class,final,result,partition,consumable,notifier,consumable,notifier,new,no,op,result,partition,consumable,notifier,final,network,environment,network,mock,network,environment,class,when,network,get,result,partition,manager,then,return,mock,result,partition,manager,class,when,network,get,default,iomode,then,return,iomanager,iomode,sync,when,network,create,kv,state,task,registry,any,job,id,class,any,job,vertex,id,class,then,return,mock,task,kv,state,registry,class,when,network,get,task,event,dispatcher,then,return,task,event,dispatcher,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,partition,producer,disposed,exception,partition,id,assert,equals,execution,state,canceling,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,runtime,exception,any,other,exception,assert,equals,execution,state,failed,task,get,execution,state,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,exceptionally,new,timeout,exception,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join,setup,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,invoke,class,set,network,environment,network,set,consumable,notifier,consumable,notifier,set,partition,producer,state,checker,partition,checker,set,executor,executors,direct,executor,build,final,single,input,gate,input,gate,mock,single,input,gate,class,when,input,gate,get,consumed,result,id,then,return,result,id,try,task,start,task,thread,await,latch,await,set,input,gate,task,input,gate,completable,future,execution,state,promise,new,completable,future,when,partition,checker,request,partition,producer,state,eq,task,get,job,id,eq,result,id,eq,partition,id,then,return,promise,task,trigger,partition,producer,state,check,task,get,job,id,result,id,partition,id,promise,complete,execution,state,running,assert,equals,execution,state,running,task,get,execution,state,verify,input,gate,times,1,retrigger,partition,request,eq,partition,id,get,partition,id,finally,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1477582860;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 50)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,50,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1478096698;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1478513533;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1478800024;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1478815615;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1479339295;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1481560756;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1482522862;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1482522862;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1493298849;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1493759463;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1501619702;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1503041372;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1507212387;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1507212387;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1513094474;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1515519059;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1516626397;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1520522284;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1533306678;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539073077;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539073077;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539073098;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		Task task = createTask(InvokableBlockingInCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,task,task,create,task,invokable,blocking,in,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539257265;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		final TaskManagerActions taskManagerActions = mock(TaskManagerActions.class)___		_		doThrow(new RuntimeException("Unexpected FatalError message"))._			when(taskManagerActions).notifyFatalError(anyString(), any(Throwable.class))___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,final,task,manager,actions,task,manager,actions,mock,task,manager,actions,class,do,throw,new,runtime,exception,unexpected,fatal,error,message,when,task,manager,actions,notify,fatal,error,any,string,any,throwable,class,final,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539257398;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1539257411;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1540207709;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testWatchDogInterruptsTask() throws Exception;1550366933;Tests that interrupt happens via watch dog if canceller is stuck in cancel._Task cancellation blocks the task canceller. Interrupt after cancel via_cancellation watch dog.;@Test_	public void testWatchDogInterruptsTask() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 60 * 1000)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableBlockingInCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};tests,that,interrupt,happens,via,watch,dog,if,canceller,is,stuck,in,cancel,task,cancellation,blocks,the,task,canceller,interrupt,after,cancel,via,cancellation,watch,dog;test,public,void,test,watch,dog,interrupts,task,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,60,1000,final,task,task,new,task,builder,set,invokable,invokable,blocking,in,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1477582860;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1478096698;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL.key(), 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT.key(), 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,key,5,config,set,long,task,manager,options,key,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1478513533;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1478800024;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1478815615;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1479339295;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1481560756;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1482522862;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1482522862;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1493298849;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1493759463;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1501619702;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1503041372;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1507212387;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1507212387;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1513094474;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1515519059;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1516626397;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1520522284;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1533306678;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1539073077;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1539073077;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception;1539073098;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptableSharedLockInInvokeAndCancel() throws Exception {_		Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		Task task = createTask(InvokableInterruptableSharedLockInInvokeAndCancel.class, config)__		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()___		_		for (Object msg : taskManagerMessages) {_			assertFalse("Unexpected FatalError message", msg instanceof TaskManagerMessages.FatalError)__		}_	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptable,shared,lock,in,invoke,and,cancel,throws,exception,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,task,task,create,task,invokable,interruptable,shared,lock,in,invoke,and,cancel,class,config,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join,for,object,msg,task,manager,messages,assert,false,unexpected,fatal,error,message,msg,instanceof,task,manager,messages,fatal,error
TaskTest -> @Test 	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception;1539257265;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception {_		final TaskManagerActions taskManagerActions = mock(TaskManagerActions.class)___		_		doThrow(new RuntimeException("Unexpected FatalError message"))._			when(taskManagerActions).notifyFatalError(anyString(), any(Throwable.class))___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableInterruptibleSharedLockInInvokeAndCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptible,shared,lock,in,invoke,and,cancel,throws,exception,final,task,manager,actions,task,manager,actions,mock,task,manager,actions,class,do,throw,new,runtime,exception,unexpected,fatal,error,message,when,task,manager,actions,notify,fatal,error,any,string,any,throwable,class,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,interruptible,shared,lock,in,invoke,and,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception;1539257398;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableInterruptibleSharedLockInInvokeAndCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptible,shared,lock,in,invoke,and,cancel,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,interruptible,shared,lock,in,invoke,and,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception;1539257411;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableInterruptibleSharedLockInInvokeAndCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptible,shared,lock,in,invoke,and,cancel,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,interruptible,shared,lock,in,invoke,and,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception;1540207709;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableInterruptibleSharedLockInInvokeAndCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptible,shared,lock,in,invoke,and,cancel,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,interruptible,shared,lock,in,invoke,and,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception;1550366933;The invoke() method holds a lock (trigger awaitLatch after acquisition)_and cancel cannot complete because it also tries to acquire the same lock._This is resolved by the watch dog, no fatal error.;@Test_	public void testInterruptibleSharedLockInInvokeAndCancel() throws Exception {_		final TaskManagerActions taskManagerActions = new ProhibitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableInterruptibleSharedLockInInvokeAndCancel.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		task.startTaskThread()___		awaitLatch.await()___		task.cancelExecution()__		task.getExecutingThread().join()__	};the,invoke,method,holds,a,lock,trigger,await,latch,after,acquisition,and,cancel,cannot,complete,because,it,also,tries,to,acquire,the,same,lock,this,is,resolved,by,the,watch,dog,no,fatal,error;test,public,void,test,interruptible,shared,lock,in,invoke,and,cancel,throws,exception,final,task,manager,actions,task,manager,actions,new,prohibit,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,interruptible,shared,lock,in,invoke,and,cancel,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,task,start,task,thread,await,latch,await,task,cancel,execution,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception;1539257265;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception {_		final TaskManagerActions taskManagerActions = mock(TaskManagerActions.class)___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableUnInterruptibleBlockingInvoke.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		final TaskExecutionState state = new TaskExecutionState(_			task.getJobID(),_			task.getExecutionId(),_			ExecutionState.RUNNING)___		task.startTaskThread()___		verify(taskManagerActions, timeout(TIMEOUT)).updateTaskExecutionState(eq(state))___		awaitLatch.await()___		task.cancelExecution()___		verify(taskManagerActions, timeout(TIMEOUT)).notifyFatalError(_			anyString(), any(Throwable.class))___		_		triggerLatch.trigger()__		task.getExecutingThread().interrupt()__		task.getExecutingThread().join()__	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,un,interruptible,invoke,throws,exception,final,task,manager,actions,task,manager,actions,mock,task,manager,actions,class,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,un,interruptible,blocking,invoke,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,final,task,execution,state,state,new,task,execution,state,task,get,job,id,task,get,execution,id,execution,state,running,task,start,task,thread,verify,task,manager,actions,timeout,timeout,update,task,execution,state,eq,state,await,latch,await,task,cancel,execution,verify,task,manager,actions,timeout,timeout,notify,fatal,error,any,string,any,throwable,class,trigger,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception;1539257398;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception {_		final AwaitFatalErrorTaskManagerActions taskManagerActions =_			new AwaitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableUnInterruptibleBlockingInvoke.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			_			taskManagerActions.latch.await()__		} finally {_			_			triggerLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,un,interruptible,invoke,throws,exception,final,await,fatal,error,task,manager,actions,task,manager,actions,new,await,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,un,interruptible,blocking,invoke,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,try,task,start,task,thread,await,latch,await,task,cancel,execution,task,manager,actions,latch,await,finally,trigger,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception;1539257411;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception {_		final AwaitFatalErrorTaskManagerActions taskManagerActions =_			new AwaitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableUnInterruptibleBlockingInvoke.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			_			taskManagerActions.latch.await()__		} finally {_			_			triggerLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,un,interruptible,invoke,throws,exception,final,await,fatal,error,task,manager,actions,task,manager,actions,new,await,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,un,interruptible,blocking,invoke,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,try,task,start,task,thread,await,latch,await,task,cancel,execution,task,manager,actions,latch,await,finally,trigger,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception;1540207709;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception {_		final AwaitFatalErrorTaskManagerActions taskManagerActions =_			new AwaitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableUnInterruptibleBlockingInvoke.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			_			taskManagerActions.latch.await()__		} finally {_			_			triggerLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,un,interruptible,invoke,throws,exception,final,await,fatal,error,task,manager,actions,task,manager,actions,new,await,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,un,interruptible,blocking,invoke,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,try,task,start,task,thread,await,latch,await,task,cancel,execution,task,manager,actions,latch,await,finally,trigger,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> @Test 	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception;1550366933;The invoke() method blocks infinitely, but cancel() does not block. Only_resolved by a fatal error.;@Test_	public void testFatalErrorAfterUnInterruptibleInvoke() throws Exception {_		final AwaitFatalErrorTaskManagerActions taskManagerActions =_			new AwaitFatalErrorTaskManagerActions()___		final Configuration config = new Configuration()__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_INTERVAL, 5)__		config.setLong(TaskManagerOptions.TASK_CANCELLATION_TIMEOUT, 50)___		final Task task = new TaskBuilder()_			.setInvokable(InvokableUnInterruptibleBlockingInvoke.class)_			.setTaskManagerConfig(config)_			.setTaskManagerActions(taskManagerActions)_			.build()___		try {_			task.startTaskThread()___			awaitLatch.await()___			task.cancelExecution()___			_			taskManagerActions.latch.await()__		} finally {_			_			triggerLatch.trigger()__			task.getExecutingThread().interrupt()__			task.getExecutingThread().join()__		}_	};the,invoke,method,blocks,infinitely,but,cancel,does,not,block,only,resolved,by,a,fatal,error;test,public,void,test,fatal,error,after,un,interruptible,invoke,throws,exception,final,await,fatal,error,task,manager,actions,task,manager,actions,new,await,fatal,error,task,manager,actions,final,configuration,config,new,configuration,config,set,long,task,manager,options,5,config,set,long,task,manager,options,50,final,task,task,new,task,builder,set,invokable,invokable,un,interruptible,blocking,invoke,class,set,task,manager,config,config,set,task,manager,actions,task,manager,actions,build,try,task,start,task,thread,await,latch,await,task,cancel,execution,task,manager,actions,latch,await,finally,trigger,latch,trigger,task,get,executing,thread,interrupt,task,get,executing,thread,join
TaskTest -> private BlobCacheService createBlobCache();1507212387;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		BlobCacheService blobService =_			new BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class))___		return blobService__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,blob,cache,service,blob,service,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class,return,blob,service
TaskTest -> private BlobCacheService createBlobCache();1513094474;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		BlobCacheService blobService =_			new BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class))___		return blobService__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,blob,cache,service,blob,service,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class,return,blob,service
TaskTest -> private BlobCacheService createBlobCache();1515519059;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		BlobCacheService blobService =_			new BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class))___		return blobService__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,blob,cache,service,blob,service,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class,return,blob,service
TaskTest -> private BlobCacheService createBlobCache();1516626397;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		BlobCacheService blobService =_			new BlobCacheService(mock(PermanentBlobCache.class), mock(TransientBlobCache.class))___		return blobService__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,blob,cache,service,blob,service,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class,return,blob,service
TaskTest -> private BlobCacheService createBlobCache();1520522284;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		return new BlobCacheService(_				mock(PermanentBlobCache.class),_				mock(TransientBlobCache.class))__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,return,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class
TaskTest -> private BlobCacheService createBlobCache();1533306678;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		return new BlobCacheService(_				mock(PermanentBlobCache.class),_				mock(TransientBlobCache.class))__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,return,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class
TaskTest -> private BlobCacheService createBlobCache();1539073077;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		return new BlobCacheService(_				mock(PermanentBlobCache.class),_				mock(TransientBlobCache.class))__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,return,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class
TaskTest -> private BlobCacheService createBlobCache();1539073077;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		return new BlobCacheService(_				mock(PermanentBlobCache.class),_				mock(TransientBlobCache.class))__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,return,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class
TaskTest -> private BlobCacheService createBlobCache();1539073098;Creates a {@link BlobCacheService} mock that is suitable to be used in the tests above.__@return BlobCache mock with the bare minimum of implemented functions that work;private BlobCacheService createBlobCache() {_		return new BlobCacheService(_				mock(PermanentBlobCache.class),_				mock(TransientBlobCache.class))__	};creates,a,link,blob,cache,service,mock,that,is,suitable,to,be,used,in,the,tests,above,return,blob,cache,mock,with,the,bare,minimum,of,implemented,functions,that,work;private,blob,cache,service,create,blob,cache,return,new,blob,cache,service,mock,permanent,blob,cache,class,mock,transient,blob,cache,class
