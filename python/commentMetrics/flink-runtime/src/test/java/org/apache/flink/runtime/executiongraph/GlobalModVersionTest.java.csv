# id;timestamp;commentText;codeText;commentWords;codeWords
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1493831843;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1507212387;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1508861310;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1508861311;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1508861311;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1509631297;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1513201070;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1515177485;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1549365080;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().failAsync(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,async,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1550220073;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,canceled,graph,get,termination,future,get,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileCancelling() throws Exception;1550683188;Tests that failures during a global cancellation are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileCancelling() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())__		assertEquals(1L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.cancel()__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.completeCancelling()__		}__		assertEquals(JobStatus.CANCELED, graph.getTerminationFuture().get())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,cancellation,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,cancelling,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,assert,equals,1l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,cancel,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,complete,cancelling,assert,equals,job,status,canceled,graph,get,termination,future,get,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1493831843;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1507212387;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1508861310;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1508861311;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1508861311;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1509631297;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1513201070;Tests that failures during a global faiover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,faiover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1515177485;Tests that failures during a global failover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,failover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1549365080;Tests that failures during a global failover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().failAsync(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,failover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,async,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1550220073;Tests that failures during a global failover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.cancelingComplete()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,failover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,canceling,complete,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
GlobalModVersionTest -> @Test 	public void testNoLocalFailoverWhileFailing() throws Exception;1550683188;Tests that failures during a global failover are not handed to the local_failover strategy.;@Test_	public void testNoLocalFailoverWhileFailing() throws Exception {_		final FailoverStrategy mockStrategy = mock(FailoverStrategy.class)___		final ExecutionGraph graph = createSampleGraph(mockStrategy)___		final ExecutionVertex testVertex = getRandomVertex(graph)___		graph.scheduleForExecution()__		assertEquals(JobStatus.RUNNING, graph.getState())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			waitUntilExecutionState(exec, ExecutionState.DEPLOYING, 1000)__			exec.switchToRunning()__			assertEquals(ExecutionState.RUNNING, exec.getState())__		}__		_		graph.failGlobal(new Exception("global failover"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		graph.failGlobal(new Exception("should be ignored"))__		assertEquals(JobStatus.FAILING, graph.getState())__		assertEquals(2L, graph.getGlobalModVersion())___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			assertEquals(ExecutionState.CANCELING, exec.getState())__		}__		_		testVertex.getCurrentExecutionAttempt().fail(new Exception("test exception"))___		_		for (ExecutionVertex v : graph.getVerticesTopologically().iterator().next().getTaskVertices()) {_			final Execution exec = v.getCurrentExecutionAttempt()__			exec.completeCancelling()__		}__		assertEquals(JobStatus.RESTARTING, graph.getState())___		_		verify(mockStrategy, times(0)).onTaskFailure(any(Execution.class), any(Throwable.class))__	};tests,that,failures,during,a,global,failover,are,not,handed,to,the,local,failover,strategy;test,public,void,test,no,local,failover,while,failing,throws,exception,final,failover,strategy,mock,strategy,mock,failover,strategy,class,final,execution,graph,graph,create,sample,graph,mock,strategy,final,execution,vertex,test,vertex,get,random,vertex,graph,graph,schedule,for,execution,assert,equals,job,status,running,graph,get,state,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,wait,until,execution,state,exec,execution,state,deploying,1000,exec,switch,to,running,assert,equals,execution,state,running,exec,get,state,graph,fail,global,new,exception,global,failover,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,graph,fail,global,new,exception,should,be,ignored,assert,equals,job,status,failing,graph,get,state,assert,equals,2l,graph,get,global,mod,version,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,assert,equals,execution,state,canceling,exec,get,state,test,vertex,get,current,execution,attempt,fail,new,exception,test,exception,for,execution,vertex,v,graph,get,vertices,topologically,iterator,next,get,task,vertices,final,execution,exec,v,get,current,execution,attempt,exec,complete,cancelling,assert,equals,job,status,restarting,graph,get,state,verify,mock,strategy,times,0,on,task,failure,any,execution,class,any,throwable,class
