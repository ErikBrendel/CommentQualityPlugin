# id;timestamp;commentText;codeText;commentWords;codeWords
BlobCacheSuccessTest -> private void uploadFileGetTest( 			final Configuration config, @Nullable JobID jobId, boolean shutdownServerAfterUpload, 			boolean cacheHasAccessToFs, BlobKey.BlobType blobType) throws IOException;1507212387;Uploads two different BLOBs to the {@link BlobServer} via a {@link BlobClient} and verifies_we can access the files from a {@link BlobCacheService}.__@param config_configuration to use for the server and cache (the final cache's configuration will_actually get some modifications)_@param shutdownServerAfterUpload_whether the server should be shut down after uploading the BLOBs (only useful with HA mode)_- this implies that the cache has access to the shared <tt>HA_STORAGE_PATH</tt>_@param cacheHasAccessToFs_whether the cache should have access to a shared <tt>HA_STORAGE_PATH</tt> (only useful with_HA mode)_@param blobType_whether the BLOB should become permanent or transient;private void uploadFileGetTest(_			final Configuration config, @Nullable JobID jobId, boolean shutdownServerAfterUpload,_			boolean cacheHasAccessToFs, BlobKey.BlobType blobType) throws IOException {__		final Configuration cacheConfig = new Configuration(config)__		cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		if (!cacheHasAccessToFs) {_			_			cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_				temporaryFolder.newFolder().getAbsolutePath())__			cacheConfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_				temporaryFolder.newFolder().getPath() + "/does-not-exist")__		}__		_		final byte[] data = new byte[128]__		byte[] data2 = Arrays.copyOf(data, data.length)__		data2[0] ^= 1___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(cacheConfig)__			try (_				BlobServer server = new BlobServer(config, blobStoreService)__				BlobCacheService cache = new BlobCacheService(new InetSocketAddress("localhost", server.getPort()),_					cacheConfig, blobStoreService)) {__				server.start()___				_				BlobKey key1 = put(server, jobId, data, blobType)__				BlobKey key2 = put(server, jobId, data2, blobType)___				if (shutdownServerAfterUpload) {_					_					server.close()__				}__				verifyContents(cache, jobId, key1, data)__				verifyContents(cache, jobId, key2, data2)___				if (shutdownServerAfterUpload) {_					_					server.close()___					verifyContents(cache, jobId, key1, data)__					verifyContents(cache, jobId, key2, data2)__				}_			}_		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};uploads,two,different,blobs,to,the,link,blob,server,via,a,link,blob,client,and,verifies,we,can,access,the,files,from,a,link,blob,cache,service,param,config,configuration,to,use,for,the,server,and,cache,the,final,cache,s,configuration,will,actually,get,some,modifications,param,shutdown,server,after,upload,whether,the,server,should,be,shut,down,after,uploading,the,blobs,only,useful,with,ha,mode,this,implies,that,the,cache,has,access,to,the,shared,tt,tt,param,cache,has,access,to,fs,whether,the,cache,should,have,access,to,a,shared,tt,tt,only,useful,with,ha,mode,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,upload,file,get,test,final,configuration,config,nullable,job,id,job,id,boolean,shutdown,server,after,upload,boolean,cache,has,access,to,fs,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,cache,config,new,configuration,config,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,if,cache,has,access,to,fs,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,cache,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,does,not,exist,final,byte,data,new,byte,128,byte,data2,arrays,copy,of,data,data,length,data2,0,1,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,cache,config,try,blob,server,server,new,blob,server,config,blob,store,service,blob,cache,service,cache,new,blob,cache,service,new,inet,socket,address,localhost,server,get,port,cache,config,blob,store,service,server,start,blob,key,key1,put,server,job,id,data,blob,type,blob,key,key2,put,server,job,id,data2,blob,type,if,shutdown,server,after,upload,server,close,verify,contents,cache,job,id,key1,data,verify,contents,cache,job,id,key2,data2,if,shutdown,server,after,upload,server,close,verify,contents,cache,job,id,key1,data,verify,contents,cache,job,id,key2,data2,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheSuccessTest -> private void uploadFileGetTest( 			final Configuration config, @Nullable JobID jobId, boolean shutdownServerAfterUpload, 			boolean cacheHasAccessToFs, BlobKey.BlobType blobType) throws IOException;1517915730;Uploads two different BLOBs to the {@link BlobServer} via a {@link BlobClient} and verifies_we can access the files from a {@link BlobCacheService}.__@param config_configuration to use for the server and cache (the final cache's configuration will_actually get some modifications)_@param shutdownServerAfterUpload_whether the server should be shut down after uploading the BLOBs (only useful with HA mode)_- this implies that the cache has access to the shared <tt>HA_STORAGE_PATH</tt>_@param cacheHasAccessToFs_whether the cache should have access to a shared <tt>HA_STORAGE_PATH</tt> (only useful with_HA mode)_@param blobType_whether the BLOB should become permanent or transient;private void uploadFileGetTest(_			final Configuration config, @Nullable JobID jobId, boolean shutdownServerAfterUpload,_			boolean cacheHasAccessToFs, BlobKey.BlobType blobType) throws IOException {__		final Configuration cacheConfig = new Configuration(config)__		cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		if (!cacheHasAccessToFs) {_			_			cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_				temporaryFolder.newFolder().getAbsolutePath())__			cacheConfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_				temporaryFolder.newFolder().getPath() + "/does-not-exist")__		}__		_		final byte[] data = new byte[128]__		byte[] data2 = Arrays.copyOf(data, data.length)__		data2[0] ^= 1___		BlobStoreService blobStoreService = null___		try {_			blobStoreService = BlobUtils.createBlobStoreFromConfig(cacheConfig)__			try (_				BlobServer server = new BlobServer(config, blobStoreService)__				BlobCacheService cache = new BlobCacheService(cacheConfig, blobStoreService, new InetSocketAddress("localhost", server.getPort())_				)) {__				server.start()___				_				BlobKey key1 = put(server, jobId, data, blobType)__				BlobKey key2 = put(server, jobId, data2, blobType)___				if (shutdownServerAfterUpload) {_					_					server.close()__				}__				verifyContents(cache, jobId, key1, data)__				verifyContents(cache, jobId, key2, data2)___				if (shutdownServerAfterUpload) {_					_					server.close()___					verifyContents(cache, jobId, key1, data)__					verifyContents(cache, jobId, key2, data2)__				}_			}_		} finally {_			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};uploads,two,different,blobs,to,the,link,blob,server,via,a,link,blob,client,and,verifies,we,can,access,the,files,from,a,link,blob,cache,service,param,config,configuration,to,use,for,the,server,and,cache,the,final,cache,s,configuration,will,actually,get,some,modifications,param,shutdown,server,after,upload,whether,the,server,should,be,shut,down,after,uploading,the,blobs,only,useful,with,ha,mode,this,implies,that,the,cache,has,access,to,the,shared,tt,tt,param,cache,has,access,to,fs,whether,the,cache,should,have,access,to,a,shared,tt,tt,only,useful,with,ha,mode,param,blob,type,whether,the,blob,should,become,permanent,or,transient;private,void,upload,file,get,test,final,configuration,config,nullable,job,id,job,id,boolean,shutdown,server,after,upload,boolean,cache,has,access,to,fs,blob,key,blob,type,blob,type,throws,ioexception,final,configuration,cache,config,new,configuration,config,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,if,cache,has,access,to,fs,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,cache,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,does,not,exist,final,byte,data,new,byte,128,byte,data2,arrays,copy,of,data,data,length,data2,0,1,blob,store,service,blob,store,service,null,try,blob,store,service,blob,utils,create,blob,store,from,config,cache,config,try,blob,server,server,new,blob,server,config,blob,store,service,blob,cache,service,cache,new,blob,cache,service,cache,config,blob,store,service,new,inet,socket,address,localhost,server,get,port,server,start,blob,key,key1,put,server,job,id,data,blob,type,blob,key,key2,put,server,job,id,data2,blob,type,if,shutdown,server,after,upload,server,close,verify,contents,cache,job,id,key1,data,verify,contents,cache,job,id,key2,data2,if,shutdown,server,after,upload,server,close,verify,contents,cache,job,id,key1,data,verify,contents,cache,job,id,key2,data2,finally,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa() throws IOException;1502701584;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa() throws IOException {_		testBlobCacheHa(new JobID())__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,throws,ioexception,test,blob,cache,ha,new,job,id
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa() throws IOException;1507212387;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which remains active after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), true, true, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,remains,active,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,true,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa() throws IOException;1507212387;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which remains active after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), true, true, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,remains,active,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa() throws IOException;1517915730;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which remains active after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), true, true, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,remains,active,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa2() throws IOException;1502701584;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa2() throws IOException {_		testBlobCacheHa2(new JobID())__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha2,throws,ioexception,test,blob,cache,ha2,new,job,id
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa2() throws IOException;1507212387;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which is shut down after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa2() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, new JobID(), false, true, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,is,shut,down,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha2,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa2() throws IOException;1507212387;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which is shut down after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa2() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, new JobID(), false, true, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,is,shut,down,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha2,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHa2() throws IOException;1517915730;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer which is shut down after the BLOB upload. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHa2() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, new JobID(), false, true, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server,which,is,shut,down,after,the,blob,upload,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha2,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,true
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHa() throws IOException;1495001929;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer.;@Test_	public void testBlobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())__		uploadFileGetTest(config, true, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,upload,file,get,test,config,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHa() throws IOException;1502100084;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer.;@Test_	public void testBlobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, true, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHa() throws IOException;1502692653;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer.;@Test_	public void testBlobCacheHa() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, true, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,true,true
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHa2() throws IOException;1502100084;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer.;@Test_	public void testBlobCacheHa2() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, false, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha2,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,false,true
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHa2() throws IOException;1502692653;BlobCache is configured in HA mode and the cache can download files from_the file system directly and does not need to download BLOBs from the_BlobServer.;@Test_	public void testBlobCacheHa2() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, false, true)__	};blob,cache,is,configured,in,ha,mode,and,the,cache,can,download,files,from,the,file,system,directly,and,does,not,need,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha2,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,false,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHaFallback() throws IOException;1502701584;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHaFallback() throws IOException {_		testBlobCacheHaFallback(new JobID())__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,fallback,throws,ioexception,test,blob,cache,ha,fallback,new,job,id
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHaFallback() throws IOException;1507212387;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), false, false, true)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,false,true
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHaFallback() throws IOException;1507212387;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), false, false, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCacheHaFallback() throws IOException;1517915730;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer. Using job-related BLOBs.;@Test_	public void testBlobForJobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())___		uploadFileGetTest(config, new JobID(), false, false, PERMANENT_BLOB)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server,using,job,related,blobs;test,public,void,test,blob,for,job,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,new,job,id,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCache() throws IOException;1495001929;BlobCache with no HA. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobCache() throws IOException {_		Configuration config = new Configuration()__		uploadFileGetTest(config, false, false)__	};blob,cache,with,no,ha,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,cache,throws,ioexception,configuration,config,new,configuration,upload,file,get,test,config,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCache() throws IOException;1502100084;BlobCache with no HA. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, false, false)__	};blob,cache,with,no,ha,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCache() throws IOException;1502692653;BlobCache with no HA. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, false, false)__	};blob,cache,with,no,ha,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,false,false
BlobCacheSuccessTest -> private void uploadFileGetTest(final Configuration config, boolean shutdownServerAfterUpload, 			boolean cacheHasAccessToFs) throws IOException;1502100084;Uploads two different BLOBs to the {@link BlobServer} via a {@link BlobClient} and verifies_we can access the files from a {@link BlobCache}.__@param config_configuration to use for the server and cache (the final cache's configuration will_actually get some modifications)_@param shutdownServerAfterUpload_whether the server should be shut down after uploading the BLOBs (only useful with HA mode)_- this implies that the cache has access to the shared <tt>HA_STORAGE_PATH</tt>_@param cacheHasAccessToFs_whether the cache should have access to a shared <tt>HA_STORAGE_PATH</tt> (only useful with_HA mode);private void uploadFileGetTest(final Configuration config, boolean shutdownServerAfterUpload,_			boolean cacheHasAccessToFs) throws IOException {_		Preconditions.checkArgument(!shutdownServerAfterUpload || cacheHasAccessToFs)___		_		final byte[] buf = new byte[128]__		final List<BlobKey> blobKeys = new ArrayList<BlobKey>(2)___		BlobServer blobServer = null__		BlobCache blobCache = null__		BlobStoreService blobStoreService = null__		try {_			final Configuration cacheConfig = new Configuration(config)__			cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_				temporaryFolder.newFolder().getAbsolutePath())__			if (!cacheHasAccessToFs) {_				_				cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_					temporaryFolder.newFolder().getAbsolutePath())__				cacheConfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_					temporaryFolder.newFolder().getPath() + "/does-not-exist")__			}__			blobStoreService = BlobUtils.createBlobStoreFromConfig(cacheConfig)___			_			blobServer = new BlobServer(config, blobStoreService)__			final InetSocketAddress serverAddress = new InetSocketAddress(blobServer.getPort())___			_			BlobClient blobClient = null__			try {__				blobClient = new BlobClient(serverAddress, config)___				blobKeys.add(blobClient.put(buf))__				buf[0] = 1_ _				blobKeys.add(blobClient.put(buf))__			} finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			if (shutdownServerAfterUpload) {_				_				blobServer.close()__				blobServer = null__			}__			blobCache = new BlobCache(serverAddress, cacheConfig, blobStoreService)___			for (BlobKey blobKey : blobKeys) {_				blobCache.getURL(blobKey)__			}__			if (blobServer != null) {_				_				blobServer.close()__				blobServer = null__			}__			final URL[] urls = new URL[blobKeys.size()]___			for(int i = 0_ i < blobKeys.size()_ i++){_				urls[i] = blobCache.getURL(blobKeys.get(i))__			}__			_			assertEquals(blobKeys.size(), urls.length)___			for (final URL url : urls) {__				assertNotNull(url)___				try {_					final File cachedFile = new File(url.toURI())___					assertTrue(cachedFile.exists())__					assertEquals(buf.length, cachedFile.length())___				} catch (URISyntaxException e) {_					fail(e.getMessage())__				}_			}_		} finally {_			if (blobServer != null) {_				blobServer.close()__			}__			if(blobCache != null){_				blobCache.close()__			}__			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};uploads,two,different,blobs,to,the,link,blob,server,via,a,link,blob,client,and,verifies,we,can,access,the,files,from,a,link,blob,cache,param,config,configuration,to,use,for,the,server,and,cache,the,final,cache,s,configuration,will,actually,get,some,modifications,param,shutdown,server,after,upload,whether,the,server,should,be,shut,down,after,uploading,the,blobs,only,useful,with,ha,mode,this,implies,that,the,cache,has,access,to,the,shared,tt,tt,param,cache,has,access,to,fs,whether,the,cache,should,have,access,to,a,shared,tt,tt,only,useful,with,ha,mode;private,void,upload,file,get,test,final,configuration,config,boolean,shutdown,server,after,upload,boolean,cache,has,access,to,fs,throws,ioexception,preconditions,check,argument,shutdown,server,after,upload,cache,has,access,to,fs,final,byte,buf,new,byte,128,final,list,blob,key,blob,keys,new,array,list,blob,key,2,blob,server,blob,server,null,blob,cache,blob,cache,null,blob,store,service,blob,store,service,null,try,final,configuration,cache,config,new,configuration,config,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,if,cache,has,access,to,fs,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,cache,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,does,not,exist,blob,store,service,blob,utils,create,blob,store,from,config,cache,config,blob,server,new,blob,server,config,blob,store,service,final,inet,socket,address,server,address,new,inet,socket,address,blob,server,get,port,blob,client,blob,client,null,try,blob,client,new,blob,client,server,address,config,blob,keys,add,blob,client,put,buf,buf,0,1,blob,keys,add,blob,client,put,buf,finally,if,blob,client,null,blob,client,close,if,shutdown,server,after,upload,blob,server,close,blob,server,null,blob,cache,new,blob,cache,server,address,cache,config,blob,store,service,for,blob,key,blob,key,blob,keys,blob,cache,get,url,blob,key,if,blob,server,null,blob,server,close,blob,server,null,final,url,urls,new,url,blob,keys,size,for,int,i,0,i,blob,keys,size,i,urls,i,blob,cache,get,url,blob,keys,get,i,assert,equals,blob,keys,size,urls,length,for,final,url,url,urls,assert,not,null,url,try,final,file,cached,file,new,file,url,to,uri,assert,true,cached,file,exists,assert,equals,buf,length,cached,file,length,catch,urisyntax,exception,e,fail,e,get,message,finally,if,blob,server,null,blob,server,close,if,blob,cache,null,blob,cache,close,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheSuccessTest -> private void uploadFileGetTest(final Configuration config, boolean shutdownServerAfterUpload, 			boolean cacheHasAccessToFs) throws IOException;1502692653;Uploads two different BLOBs to the {@link BlobServer} via a {@link BlobClient} and verifies_we can access the files from a {@link BlobCache}.__@param config_configuration to use for the server and cache (the final cache's configuration will_actually get some modifications)_@param shutdownServerAfterUpload_whether the server should be shut down after uploading the BLOBs (only useful with HA mode)_- this implies that the cache has access to the shared <tt>HA_STORAGE_PATH</tt>_@param cacheHasAccessToFs_whether the cache should have access to a shared <tt>HA_STORAGE_PATH</tt> (only useful with_HA mode);private void uploadFileGetTest(final Configuration config, boolean shutdownServerAfterUpload,_			boolean cacheHasAccessToFs) throws IOException {_		Preconditions.checkArgument(!shutdownServerAfterUpload || cacheHasAccessToFs)___		_		final byte[] buf = new byte[128]__		final List<BlobKey> blobKeys = new ArrayList<BlobKey>(2)___		BlobServer blobServer = null__		BlobCache blobCache = null__		BlobStoreService blobStoreService = null__		try {_			final Configuration cacheConfig = new Configuration(config)__			cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_				temporaryFolder.newFolder().getAbsolutePath())__			if (!cacheHasAccessToFs) {_				_				cacheConfig.setString(BlobServerOptions.STORAGE_DIRECTORY,_					temporaryFolder.newFolder().getAbsolutePath())__				cacheConfig.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_					temporaryFolder.newFolder().getPath() + "/does-not-exist")__			}__			blobStoreService = BlobUtils.createBlobStoreFromConfig(cacheConfig)___			_			blobServer = new BlobServer(config, blobStoreService)__			final InetSocketAddress serverAddress = new InetSocketAddress(blobServer.getPort())___			_			BlobClient blobClient = null__			try {__				blobClient = new BlobClient(serverAddress, config)___				blobKeys.add(blobClient.put(buf))__				buf[0] = 1_ _				blobKeys.add(blobClient.put(buf))__			} finally {_				if (blobClient != null) {_					blobClient.close()__				}_			}__			if (shutdownServerAfterUpload) {_				_				blobServer.close()__				blobServer = null__			}__			blobCache = new BlobCache(serverAddress, cacheConfig, blobStoreService)___			for (BlobKey blobKey : blobKeys) {_				blobCache.getFile(blobKey)__			}__			if (blobServer != null) {_				_				blobServer.close()__				blobServer = null__			}__			final File[] files = new File[blobKeys.size()]___			for(int i = 0_ i < blobKeys.size()_ i++){_				files[i] = blobCache.getFile(blobKeys.get(i))__			}__			_			assertEquals(blobKeys.size(), files.length)___			for (final File file : files) {_				assertNotNull(file)___				assertTrue(file.exists())__				assertEquals(buf.length, file.length())__			}_		} finally {_			if (blobServer != null) {_				blobServer.close()__			}__			if(blobCache != null){_				blobCache.close()__			}__			if (blobStoreService != null) {_				blobStoreService.closeAndCleanupAllData()__			}_		}_	};uploads,two,different,blobs,to,the,link,blob,server,via,a,link,blob,client,and,verifies,we,can,access,the,files,from,a,link,blob,cache,param,config,configuration,to,use,for,the,server,and,cache,the,final,cache,s,configuration,will,actually,get,some,modifications,param,shutdown,server,after,upload,whether,the,server,should,be,shut,down,after,uploading,the,blobs,only,useful,with,ha,mode,this,implies,that,the,cache,has,access,to,the,shared,tt,tt,param,cache,has,access,to,fs,whether,the,cache,should,have,access,to,a,shared,tt,tt,only,useful,with,ha,mode;private,void,upload,file,get,test,final,configuration,config,boolean,shutdown,server,after,upload,boolean,cache,has,access,to,fs,throws,ioexception,preconditions,check,argument,shutdown,server,after,upload,cache,has,access,to,fs,final,byte,buf,new,byte,128,final,list,blob,key,blob,keys,new,array,list,blob,key,2,blob,server,blob,server,null,blob,cache,blob,cache,null,blob,store,service,blob,store,service,null,try,final,configuration,cache,config,new,configuration,config,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,if,cache,has,access,to,fs,cache,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,cache,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,does,not,exist,blob,store,service,blob,utils,create,blob,store,from,config,cache,config,blob,server,new,blob,server,config,blob,store,service,final,inet,socket,address,server,address,new,inet,socket,address,blob,server,get,port,blob,client,blob,client,null,try,blob,client,new,blob,client,server,address,config,blob,keys,add,blob,client,put,buf,buf,0,1,blob,keys,add,blob,client,put,buf,finally,if,blob,client,null,blob,client,close,if,shutdown,server,after,upload,blob,server,close,blob,server,null,blob,cache,new,blob,cache,server,address,cache,config,blob,store,service,for,blob,key,blob,key,blob,keys,blob,cache,get,file,blob,key,if,blob,server,null,blob,server,close,blob,server,null,final,file,files,new,file,blob,keys,size,for,int,i,0,i,blob,keys,size,i,files,i,blob,cache,get,file,blob,keys,get,i,assert,equals,blob,keys,size,files,length,for,final,file,file,files,assert,not,null,file,assert,true,file,exists,assert,equals,buf,length,file,length,finally,if,blob,server,null,blob,server,close,if,blob,cache,null,blob,cache,close,if,blob,store,service,null,blob,store,service,close,and,cleanup,all,data
BlobCacheSuccessTest -> @Test 	public void testBlobNoJobCache() throws IOException;1502701584;BlobCache with no HA, job-unrelated BLOBs. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobNoJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, null, false, false)__	};blob,cache,with,no,ha,job,unrelated,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,no,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,null,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobNoJobCache() throws IOException;1507212387;BlobCache with no HA, job-unrelated BLOBs. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobNoJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, null, false, false, false)__	};blob,cache,with,no,ha,job,unrelated,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,no,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,null,false,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobNoJobCache() throws IOException;1507212387;BlobCache with no HA, job-unrelated BLOBs. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobNoJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, null, false, false, TRANSIENT_BLOB)__	};blob,cache,with,no,ha,job,unrelated,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,no,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,null,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobNoJobCache() throws IOException;1517915730;BlobCache with no HA, job-unrelated BLOBs. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobNoJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, null, false, false, TRANSIENT_BLOB)__	};blob,cache,with,no,ha,job,unrelated,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,no,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,null,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCache() throws IOException;1502701584;BlobCache with no HA, job-related BLOBS. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobForJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, new JobID(), false, false)__	};blob,cache,with,no,ha,job,related,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,for,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,new,job,id,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCache() throws IOException;1507212387;BlobCache with no HA, job-related BLOBS. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobForJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, new JobID(), false, false, false)__	};blob,cache,with,no,ha,job,related,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,for,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,new,job,id,false,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCache() throws IOException;1507212387;BlobCache with no HA, job-related BLOBS. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobForJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, new JobID(), false, false, TRANSIENT_BLOB)__	};blob,cache,with,no,ha,job,related,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,for,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,new,job,id,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobForJobCache() throws IOException;1517915730;BlobCache with no HA, job-related BLOBS. BLOBs need to be downloaded form a working_BlobServer.;@Test_	public void testBlobForJobCache() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())___		uploadFileGetTest(config, new JobID(), false, false, TRANSIENT_BLOB)__	};blob,cache,with,no,ha,job,related,blobs,blobs,need,to,be,downloaded,form,a,working,blob,server;test,public,void,test,blob,for,job,cache,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,upload,file,get,test,config,new,job,id,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHaFallback() throws IOException;1495001929;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer.;@Test_	public void testBlobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.getRoot().getPath())__		uploadFileGetTest(config, false, false)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,get,root,get,path,upload,file,get,test,config,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHaFallback() throws IOException;1502100084;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer.;@Test_	public void testBlobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, false, false)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,false,false
BlobCacheSuccessTest -> @Test 	public void testBlobCacheHaFallback() throws IOException;1502692653;BlobCache is configured in HA mode but the cache itself cannot access the_file system and thus needs to download BLOBs from the BlobServer.;@Test_	public void testBlobCacheHaFallback() throws IOException {_		Configuration config = new Configuration()__		config.setString(BlobServerOptions.STORAGE_DIRECTORY,_			temporaryFolder.newFolder().getAbsolutePath())__		config.setString(HighAvailabilityOptions.HA_MODE, "ZOOKEEPER")__		config.setString(HighAvailabilityOptions.HA_STORAGE_PATH,_			temporaryFolder.newFolder().getPath())__		uploadFileGetTest(config, false, false)__	};blob,cache,is,configured,in,ha,mode,but,the,cache,itself,cannot,access,the,file,system,and,thus,needs,to,download,blobs,from,the,blob,server;test,public,void,test,blob,cache,ha,fallback,throws,ioexception,configuration,config,new,configuration,config,set,string,blob,server,options,temporary,folder,new,folder,get,absolute,path,config,set,string,high,availability,options,zookeeper,config,set,string,high,availability,options,temporary,folder,new,folder,get,path,upload,file,get,test,config,false,false
