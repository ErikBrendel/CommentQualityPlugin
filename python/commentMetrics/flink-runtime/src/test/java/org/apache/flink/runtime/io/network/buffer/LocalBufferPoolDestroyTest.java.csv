# id;timestamp;commentText;codeText;commentWords;codeWords
LocalBufferPoolDestroyTest -> @Test 	public void testDestroyWhileBlockingRequest() throws Exception;1459798010;Tests that a blocking request fails properly if the buffer pool is_destroyed.__<p>Starts a Thread, which triggers an unsatisfiable blocking buffer_request. After making sure that the Thread is actually waiting in the_blocking call, the buffer pool is destroyed and we check whether the_request Thread threw the expected Exception.;@Test_	public void testDestroyWhileBlockingRequest() throws Exception {_		AtomicReference<Exception> asyncException = new AtomicReference<>()___		NetworkBufferPool networkBufferPool = null__		LocalBufferPool localBufferPool = null___		try {_			networkBufferPool = new NetworkBufferPool(1, 4096, MemoryType.HEAP)__			localBufferPool = new LocalBufferPool(networkBufferPool, 1)___			_			assertNotNull(localBufferPool.requestBuffer())__			assertNull(localBufferPool.requestBuffer())___			_			Thread thread = new Thread(new BufferRequestTask(localBufferPool, asyncException))__			thread.start()___			_			boolean success = false___			for (int i = 0_ i < 50_ i++) {_				StackTraceElement[] stackTrace = thread.getStackTrace()__				success = isInBlockingBufferRequest(stackTrace)___				if (success) {_					break__				} else {_					_					Thread.sleep(500)__				}_			}__			_			assertTrue("Did not trigger blocking buffer request.", success)___			_			localBufferPool.lazyDestroy()___			_			thread.join()___			_			assertNotNull("Did not throw expected Exception", asyncException.get())__			assertTrue(asyncException.get() instanceof IllegalStateException)__		} finally {_			if (localBufferPool != null) {_				localBufferPool.lazyDestroy()__			}__			if (networkBufferPool != null) {_				networkBufferPool.destroyAllBufferPools()__				networkBufferPool.destroy()__			}_		}_	};tests,that,a,blocking,request,fails,properly,if,the,buffer,pool,is,destroyed,p,starts,a,thread,which,triggers,an,unsatisfiable,blocking,buffer,request,after,making,sure,that,the,thread,is,actually,waiting,in,the,blocking,call,the,buffer,pool,is,destroyed,and,we,check,whether,the,request,thread,threw,the,expected,exception;test,public,void,test,destroy,while,blocking,request,throws,exception,atomic,reference,exception,async,exception,new,atomic,reference,network,buffer,pool,network,buffer,pool,null,local,buffer,pool,local,buffer,pool,null,try,network,buffer,pool,new,network,buffer,pool,1,4096,memory,type,heap,local,buffer,pool,new,local,buffer,pool,network,buffer,pool,1,assert,not,null,local,buffer,pool,request,buffer,assert,null,local,buffer,pool,request,buffer,thread,thread,new,thread,new,buffer,request,task,local,buffer,pool,async,exception,thread,start,boolean,success,false,for,int,i,0,i,50,i,stack,trace,element,stack,trace,thread,get,stack,trace,success,is,in,blocking,buffer,request,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,local,buffer,pool,lazy,destroy,thread,join,assert,not,null,did,not,throw,expected,exception,async,exception,get,assert,true,async,exception,get,instanceof,illegal,state,exception,finally,if,local,buffer,pool,null,local,buffer,pool,lazy,destroy,if,network,buffer,pool,null,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
LocalBufferPoolDestroyTest -> @Test 	public void testDestroyWhileBlockingRequest() throws Exception;1511516912;Tests that a blocking request fails properly if the buffer pool is_destroyed.__<p>Starts a Thread, which triggers an unsatisfiable blocking buffer_request. After making sure that the Thread is actually waiting in the_blocking call, the buffer pool is destroyed and we check whether the_request Thread threw the expected Exception.;@Test_	public void testDestroyWhileBlockingRequest() throws Exception {_		AtomicReference<Exception> asyncException = new AtomicReference<>()___		NetworkBufferPool networkBufferPool = null__		LocalBufferPool localBufferPool = null___		try {_			networkBufferPool = new NetworkBufferPool(1, 4096)__			localBufferPool = new LocalBufferPool(networkBufferPool, 1)___			_			assertNotNull(localBufferPool.requestBuffer())__			assertNull(localBufferPool.requestBuffer())___			_			Thread thread = new Thread(new BufferRequestTask(localBufferPool, asyncException))__			thread.start()___			_			boolean success = false___			for (int i = 0_ i < 50_ i++) {_				StackTraceElement[] stackTrace = thread.getStackTrace()__				success = isInBlockingBufferRequest(stackTrace)___				if (success) {_					break__				} else {_					_					Thread.sleep(500)__				}_			}__			_			assertTrue("Did not trigger blocking buffer request.", success)___			_			localBufferPool.lazyDestroy()___			_			thread.join()___			_			assertNotNull("Did not throw expected Exception", asyncException.get())__			assertTrue(asyncException.get() instanceof IllegalStateException)__		} finally {_			if (localBufferPool != null) {_				localBufferPool.lazyDestroy()__			}__			if (networkBufferPool != null) {_				networkBufferPool.destroyAllBufferPools()__				networkBufferPool.destroy()__			}_		}_	};tests,that,a,blocking,request,fails,properly,if,the,buffer,pool,is,destroyed,p,starts,a,thread,which,triggers,an,unsatisfiable,blocking,buffer,request,after,making,sure,that,the,thread,is,actually,waiting,in,the,blocking,call,the,buffer,pool,is,destroyed,and,we,check,whether,the,request,thread,threw,the,expected,exception;test,public,void,test,destroy,while,blocking,request,throws,exception,atomic,reference,exception,async,exception,new,atomic,reference,network,buffer,pool,network,buffer,pool,null,local,buffer,pool,local,buffer,pool,null,try,network,buffer,pool,new,network,buffer,pool,1,4096,local,buffer,pool,new,local,buffer,pool,network,buffer,pool,1,assert,not,null,local,buffer,pool,request,buffer,assert,null,local,buffer,pool,request,buffer,thread,thread,new,thread,new,buffer,request,task,local,buffer,pool,async,exception,thread,start,boolean,success,false,for,int,i,0,i,50,i,stack,trace,element,stack,trace,thread,get,stack,trace,success,is,in,blocking,buffer,request,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,local,buffer,pool,lazy,destroy,thread,join,assert,not,null,did,not,throw,expected,exception,async,exception,get,assert,true,async,exception,get,instanceof,illegal,state,exception,finally,if,local,buffer,pool,null,local,buffer,pool,lazy,destroy,if,network,buffer,pool,null,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
LocalBufferPoolDestroyTest -> @Test 	public void testDestroyWhileBlockingRequest() throws Exception;1515408360;Tests that a blocking request fails properly if the buffer pool is_destroyed.__<p>Starts a Thread, which triggers an unsatisfiable blocking buffer_request. After making sure that the Thread is actually waiting in the_blocking call, the buffer pool is destroyed and we check whether the_request Thread threw the expected Exception.;@Test_	public void testDestroyWhileBlockingRequest() throws Exception {_		AtomicReference<Exception> asyncException = new AtomicReference<>()___		NetworkBufferPool networkBufferPool = null__		LocalBufferPool localBufferPool = null___		try {_			networkBufferPool = new NetworkBufferPool(1, 4096)__			localBufferPool = new LocalBufferPool(networkBufferPool, 1)___			_			assertNotNull(localBufferPool.requestBuffer())__			assertNull(localBufferPool.requestBuffer())___			_			Thread thread = new Thread(new BufferRequestTask(localBufferPool, asyncException))__			thread.start()___			_			boolean success = false___			for (int i = 0_ i < 50_ i++) {_				StackTraceElement[] stackTrace = thread.getStackTrace()__				success = isInBlockingBufferRequest(stackTrace)___				if (success) {_					break__				} else {_					_					Thread.sleep(500)__				}_			}__			_			assertTrue("Did not trigger blocking buffer request.", success)___			_			localBufferPool.lazyDestroy()___			_			thread.join()___			_			assertNotNull("Did not throw expected Exception", asyncException.get())__			assertTrue(asyncException.get() instanceof IllegalStateException)__		} finally {_			if (localBufferPool != null) {_				localBufferPool.lazyDestroy()__			}__			if (networkBufferPool != null) {_				networkBufferPool.destroyAllBufferPools()__				networkBufferPool.destroy()__			}_		}_	};tests,that,a,blocking,request,fails,properly,if,the,buffer,pool,is,destroyed,p,starts,a,thread,which,triggers,an,unsatisfiable,blocking,buffer,request,after,making,sure,that,the,thread,is,actually,waiting,in,the,blocking,call,the,buffer,pool,is,destroyed,and,we,check,whether,the,request,thread,threw,the,expected,exception;test,public,void,test,destroy,while,blocking,request,throws,exception,atomic,reference,exception,async,exception,new,atomic,reference,network,buffer,pool,network,buffer,pool,null,local,buffer,pool,local,buffer,pool,null,try,network,buffer,pool,new,network,buffer,pool,1,4096,local,buffer,pool,new,local,buffer,pool,network,buffer,pool,1,assert,not,null,local,buffer,pool,request,buffer,assert,null,local,buffer,pool,request,buffer,thread,thread,new,thread,new,buffer,request,task,local,buffer,pool,async,exception,thread,start,boolean,success,false,for,int,i,0,i,50,i,stack,trace,element,stack,trace,thread,get,stack,trace,success,is,in,blocking,buffer,request,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,local,buffer,pool,lazy,destroy,thread,join,assert,not,null,did,not,throw,expected,exception,async,exception,get,assert,true,async,exception,get,instanceof,illegal,state,exception,finally,if,local,buffer,pool,null,local,buffer,pool,lazy,destroy,if,network,buffer,pool,null,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
LocalBufferPoolDestroyTest -> @Test 	public void testDestroyWhileBlockingRequest() throws Exception;1536158127;Tests that a blocking request fails properly if the buffer pool is_destroyed.__<p>Starts a Thread, which triggers an unsatisfiable blocking buffer_request. After making sure that the Thread is actually waiting in the_blocking call, the buffer pool is destroyed and we check whether the_request Thread threw the expected Exception.;@Test_	public void testDestroyWhileBlockingRequest() throws Exception {_		AtomicReference<Exception> asyncException = new AtomicReference<>()___		NetworkBufferPool networkBufferPool = null__		LocalBufferPool localBufferPool = null___		try {_			networkBufferPool = new NetworkBufferPool(1, 4096)__			localBufferPool = new LocalBufferPool(networkBufferPool, 1)___			_			assertNotNull(localBufferPool.requestBuffer())__			assertNull(localBufferPool.requestBuffer())___			_			Thread thread = new Thread(new BufferRequestTask(localBufferPool, asyncException))__			thread.start()___			_			boolean success = false___			for (int i = 0_ i < 50_ i++) {_				StackTraceElement[] stackTrace = thread.getStackTrace()__				success = isInBlockingBufferRequest(stackTrace)___				if (success) {_					break__				} else {_					_					Thread.sleep(500)__				}_			}__			_			assertTrue("Did not trigger blocking buffer request.", success)___			_			localBufferPool.lazyDestroy()___			_			thread.join()___			_			assertNotNull("Did not throw expected Exception", asyncException.get())__			assertTrue(asyncException.get() instanceof IllegalStateException)__		} finally {_			if (localBufferPool != null) {_				localBufferPool.lazyDestroy()__			}__			if (networkBufferPool != null) {_				networkBufferPool.destroyAllBufferPools()__				networkBufferPool.destroy()__			}_		}_	};tests,that,a,blocking,request,fails,properly,if,the,buffer,pool,is,destroyed,p,starts,a,thread,which,triggers,an,unsatisfiable,blocking,buffer,request,after,making,sure,that,the,thread,is,actually,waiting,in,the,blocking,call,the,buffer,pool,is,destroyed,and,we,check,whether,the,request,thread,threw,the,expected,exception;test,public,void,test,destroy,while,blocking,request,throws,exception,atomic,reference,exception,async,exception,new,atomic,reference,network,buffer,pool,network,buffer,pool,null,local,buffer,pool,local,buffer,pool,null,try,network,buffer,pool,new,network,buffer,pool,1,4096,local,buffer,pool,new,local,buffer,pool,network,buffer,pool,1,assert,not,null,local,buffer,pool,request,buffer,assert,null,local,buffer,pool,request,buffer,thread,thread,new,thread,new,buffer,request,task,local,buffer,pool,async,exception,thread,start,boolean,success,false,for,int,i,0,i,50,i,stack,trace,element,stack,trace,thread,get,stack,trace,success,is,in,blocking,buffer,request,stack,trace,if,success,break,else,thread,sleep,500,assert,true,did,not,trigger,blocking,buffer,request,success,local,buffer,pool,lazy,destroy,thread,join,assert,not,null,did,not,throw,expected,exception,async,exception,get,assert,true,async,exception,get,instanceof,illegal,state,exception,finally,if,local,buffer,pool,null,local,buffer,pool,lazy,destroy,if,network,buffer,pool,null,network,buffer,pool,destroy,all,buffer,pools,network,buffer,pool,destroy
LocalBufferPoolDestroyTest -> private boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace);1459798010;Returns whether the stack trace represents a Thread in a blocking buffer_request.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking buffer_request or not;private boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace) {_		if (stackTrace.length >= 3) {_			return stackTrace[0].getMethodName().equals("wait") &&_					stackTrace[1].getMethodName().equals("requestBuffer") &&_					stackTrace[2].getMethodName().equals("requestBufferBlocking")__		} else {_			return false__		}_	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,buffer,request,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,buffer,request,or,not;private,boolean,is,in,blocking,buffer,request,stack,trace,element,stack,trace,if,stack,trace,length,3,return,stack,trace,0,get,method,name,equals,wait,stack,trace,1,get,method,name,equals,request,buffer,stack,trace,2,get,method,name,equals,request,buffer,blocking,else,return,false
LocalBufferPoolDestroyTest -> private boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace);1511516912;Returns whether the stack trace represents a Thread in a blocking buffer_request.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking buffer_request or not;private boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace) {_		if (stackTrace.length >= 3) {_			return stackTrace[0].getMethodName().equals("wait") &&_					stackTrace[1].getMethodName().equals("requestBuffer") &&_					stackTrace[2].getMethodName().equals("requestBufferBlocking")__		} else {_			return false__		}_	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,buffer,request,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,buffer,request,or,not;private,boolean,is,in,blocking,buffer,request,stack,trace,element,stack,trace,if,stack,trace,length,3,return,stack,trace,0,get,method,name,equals,wait,stack,trace,1,get,method,name,equals,request,buffer,stack,trace,2,get,method,name,equals,request,buffer,blocking,else,return,false
LocalBufferPoolDestroyTest -> public static boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace);1515408360;Returns whether the stack trace represents a Thread in a blocking buffer_request.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking buffer_request or not;public static boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace) {_		if (stackTrace.length >= 3) {_			return stackTrace[0].getMethodName().equals("wait") &&_					stackTrace[1].getClassName().equals(LocalBufferPool.class.getName())__		} else {_			return false__		}_	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,buffer,request,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,buffer,request,or,not;public,static,boolean,is,in,blocking,buffer,request,stack,trace,element,stack,trace,if,stack,trace,length,3,return,stack,trace,0,get,method,name,equals,wait,stack,trace,1,get,class,name,equals,local,buffer,pool,class,get,name,else,return,false
LocalBufferPoolDestroyTest -> public static boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace);1536158127;Returns whether the stack trace represents a Thread in a blocking buffer_request.__@param stackTrace Stack trace of the Thread to check__@return Flag indicating whether the Thread is in a blocking buffer_request or not;public static boolean isInBlockingBufferRequest(StackTraceElement[] stackTrace) {_		if (stackTrace.length >= 3) {_			return stackTrace[0].getMethodName().equals("wait") &&_					stackTrace[1].getClassName().equals(LocalBufferPool.class.getName())__		} else {_			return false__		}_	};returns,whether,the,stack,trace,represents,a,thread,in,a,blocking,buffer,request,param,stack,trace,stack,trace,of,the,thread,to,check,return,flag,indicating,whether,the,thread,is,in,a,blocking,buffer,request,or,not;public,static,boolean,is,in,blocking,buffer,request,stack,trace,element,stack,trace,if,stack,trace,length,3,return,stack,trace,0,get,method,name,equals,wait,stack,trace,1,get,class,name,equals,local,buffer,pool,class,get,name,else,return,false
