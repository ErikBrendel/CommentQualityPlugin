# id;timestamp;commentText;codeText;commentWords;codeWords
JobGraphTest -> @Test 	public void detectCycleInInstanceSharingDependencyChain();1405024514;In this test we construct a job graph and set the dependency chain for instance sharing in a way that a cycle is_created. The test is considered successful if the cycle is detected.;@Test_	public void detectCycleInInstanceSharingDependencyChain() {__		final JobGraph jg = new JobGraph()___		final JobTaskVertex v1 = new JobTaskVertex("v1", jg)__		final JobTaskVertex v2 = new JobTaskVertex("v2", jg)__		final JobTaskVertex v3 = new JobTaskVertex("v3", jg)__		final JobTaskVertex v4 = new JobTaskVertex("v4", jg)___		try {_			v1.connectTo(v2)__			v2.connectTo(v3)__			v3.connectTo(v4)__		} catch (JobGraphDefinitionException ex) {_			Logger.getLogger(JobGraphTest.class.getName()).log(Level.SEVERE, null, ex)__		}__		_		v1.setVertexToShareInstancesWith(v2)__		v3.setVertexToShareInstancesWith(v2)__		v4.setVertexToShareInstancesWith(v1)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), true)___		_		v2.setVertexToShareInstancesWith(v4)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), false)__	};in,this,test,we,construct,a,job,graph,and,set,the,dependency,chain,for,instance,sharing,in,a,way,that,a,cycle,is,created,the,test,is,considered,successful,if,the,cycle,is,detected;test,public,void,detect,cycle,in,instance,sharing,dependency,chain,final,job,graph,jg,new,job,graph,final,job,task,vertex,v1,new,job,task,vertex,v1,jg,final,job,task,vertex,v2,new,job,task,vertex,v2,jg,final,job,task,vertex,v3,new,job,task,vertex,v3,jg,final,job,task,vertex,v4,new,job,task,vertex,v4,jg,try,v1,connect,to,v2,v2,connect,to,v3,v3,connect,to,v4,catch,job,graph,definition,exception,ex,logger,get,logger,job,graph,test,class,get,name,log,level,severe,null,ex,v1,set,vertex,to,share,instances,with,v2,v3,set,vertex,to,share,instances,with,v2,v4,set,vertex,to,share,instances,with,v1,assert,equals,jg,is,instance,dependency,chain,acyclic,true,v2,set,vertex,to,share,instances,with,v4,assert,equals,jg,is,instance,dependency,chain,acyclic,false
JobGraphTest -> @Test 	public void detectCycleInInstanceSharingDependencyChain();1405090423;In this test we construct a job graph and set the dependency chain for instance sharing in a way that a cycle is_created. The test is considered successful if the cycle is detected.;@Test_	public void detectCycleInInstanceSharingDependencyChain() {__		final JobGraph jg = new JobGraph()___		final JobTaskVertex v1 = new JobTaskVertex("v1", jg)__		final JobTaskVertex v2 = new JobTaskVertex("v2", jg)__		final JobTaskVertex v3 = new JobTaskVertex("v3", jg)__		final JobTaskVertex v4 = new JobTaskVertex("v4", jg)___		try {_			v1.connectTo(v2)__			v2.connectTo(v3)__			v3.connectTo(v4)__		} catch (JobGraphDefinitionException ex) {_			Logger.getLogger(JobGraphTest.class.getName()).log(Level.SEVERE, null, ex)__		}__		_		v1.setVertexToShareInstancesWith(v2)__		v3.setVertexToShareInstancesWith(v2)__		v4.setVertexToShareInstancesWith(v1)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), true)___		_		v2.setVertexToShareInstancesWith(v4)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), false)__	};in,this,test,we,construct,a,job,graph,and,set,the,dependency,chain,for,instance,sharing,in,a,way,that,a,cycle,is,created,the,test,is,considered,successful,if,the,cycle,is,detected;test,public,void,detect,cycle,in,instance,sharing,dependency,chain,final,job,graph,jg,new,job,graph,final,job,task,vertex,v1,new,job,task,vertex,v1,jg,final,job,task,vertex,v2,new,job,task,vertex,v2,jg,final,job,task,vertex,v3,new,job,task,vertex,v3,jg,final,job,task,vertex,v4,new,job,task,vertex,v4,jg,try,v1,connect,to,v2,v2,connect,to,v3,v3,connect,to,v4,catch,job,graph,definition,exception,ex,logger,get,logger,job,graph,test,class,get,name,log,level,severe,null,ex,v1,set,vertex,to,share,instances,with,v2,v3,set,vertex,to,share,instances,with,v2,v4,set,vertex,to,share,instances,with,v1,assert,equals,jg,is,instance,dependency,chain,acyclic,true,v2,set,vertex,to,share,instances,with,v4,assert,equals,jg,is,instance,dependency,chain,acyclic,false
JobGraphTest -> @Test 	public void detectCycleInInstanceSharingDependencyChain();1405449173;In this test we construct a job graph and set the dependency chain for instance sharing in a way that a cycle is_created. The test is considered successful if the cycle is detected.;@Test_	public void detectCycleInInstanceSharingDependencyChain() {__		final JobGraph jg = new JobGraph()___		final JobTaskVertex v1 = new JobTaskVertex("v1", jg)__		final JobTaskVertex v2 = new JobTaskVertex("v2", jg)__		final JobTaskVertex v3 = new JobTaskVertex("v3", jg)__		final JobTaskVertex v4 = new JobTaskVertex("v4", jg)___		try {_			v1.connectTo(v2)__			v2.connectTo(v3)__			v3.connectTo(v4)__		} catch (JobGraphDefinitionException ex) {_			Logger.getLogger(JobGraphTest.class.getName()).log(Level.SEVERE, null, ex)__		}__		_		v1.setVertexToShareInstancesWith(v2)__		v3.setVertexToShareInstancesWith(v2)__		v4.setVertexToShareInstancesWith(v1)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), true)___		_		v2.setVertexToShareInstancesWith(v4)___		assertEquals(jg.isInstanceDependencyChainAcyclic(), false)__	};in,this,test,we,construct,a,job,graph,and,set,the,dependency,chain,for,instance,sharing,in,a,way,that,a,cycle,is,created,the,test,is,considered,successful,if,the,cycle,is,detected;test,public,void,detect,cycle,in,instance,sharing,dependency,chain,final,job,graph,jg,new,job,graph,final,job,task,vertex,v1,new,job,task,vertex,v1,jg,final,job,task,vertex,v2,new,job,task,vertex,v2,jg,final,job,task,vertex,v3,new,job,task,vertex,v3,jg,final,job,task,vertex,v4,new,job,task,vertex,v4,jg,try,v1,connect,to,v2,v2,connect,to,v3,v3,connect,to,v4,catch,job,graph,definition,exception,ex,logger,get,logger,job,graph,test,class,get,name,log,level,severe,null,ex,v1,set,vertex,to,share,instances,with,v2,v3,set,vertex,to,share,instances,with,v2,v4,set,vertex,to,share,instances,with,v1,assert,equals,jg,is,instance,dependency,chain,acyclic,true,v2,set,vertex,to,share,instances,with,v4,assert,equals,jg,is,instance,dependency,chain,acyclic,false
