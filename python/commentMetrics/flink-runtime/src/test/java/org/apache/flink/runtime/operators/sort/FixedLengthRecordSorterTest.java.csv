# id;timestamp;commentText;codeText;commentWords;codeWords
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1405024514;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1405090423;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1411473593;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1441738685;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1442870284;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,sorter,dispose,this,memory,manager,release,memory
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1443521929;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,sorter,dispose,this,memory,manager,release,memory
FixedLengthRecordSorterTest -> @Test 	public void testSwap() throws Exception;1513075800;The swap test fills the sort buffer and swaps all elements such that they are_backwards. It then resets the generator, goes backwards through the buffer_and compares for equality.;@Test_	public void testSwap() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		RandomIntPairGenerator generator = new RandomIntPairGenerator(SEED)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		int start = 0, end = num - 1__		while (start < end) {_			sorter.swap(start++, end--)__		}_		_		_		generator.reset()__		IntPair readTarget = new IntPair()__		_		int i = num - 1__		while (i >= 0) {_			generator.next(record)__			readTarget = sorter.getRecord(readTarget, i--)__			_			int rk = readTarget.getKey()__			int gk = record.getKey()__			_			int rv = readTarget.getValue()__			int gv = record.getValue()__			_			Assert.assertEquals("The re-read key is wrong", gk, rk)__			Assert.assertEquals("The re-read value is wrong", gv, rv)__		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,swap,test,fills,the,sort,buffer,and,swaps,all,elements,such,that,they,are,backwards,it,then,resets,the,generator,goes,backwards,through,the,buffer,and,compares,for,equality;test,public,void,test,swap,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,random,int,pair,generator,generator,new,random,int,pair,generator,seed,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,int,start,0,end,num,1,while,start,end,sorter,swap,start,end,generator,reset,int,pair,read,target,new,int,pair,int,i,num,1,while,i,0,generator,next,record,read,target,sorter,get,record,read,target,i,int,rk,read,target,get,key,int,gk,record,get,key,int,rv,read,target,get,value,int,gv,record,get,value,assert,assert,equals,the,re,read,key,is,wrong,gk,rk,assert,assert,equals,the,re,read,value,is,wrong,gv,rv,sorter,dispose,this,memory,manager,release,memory
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1405024514;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1405090423;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1411473593;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1441738685;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		this.memoryManager.release(sorter.dispose())__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,this,memory,manager,release,sorter,dispose
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1442870284;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,sorter,dispose,this,memory,manager,release,memory
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1443521929;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,sorter,dispose,this,memory,manager,release,memory
FixedLengthRecordSorterTest -> @Test 	public void testCompare() throws Exception;1513075800;The compare test creates a sorted stream, writes it to the buffer and_compares random elements. It expects that earlier elements are lower than later_ones.;@Test_	public void testCompare() throws Exception {_		final int numSegments = MEMORY_SIZE / MEMORY_PAGE_SIZE__		final List<MemorySegment> memory = this.memoryManager.allocatePages(new DummyInvokable(), numSegments)__		_		FixedLengthRecordSorter<IntPair> sorter = newSortBuffer(memory)__		UniformIntPairGenerator generator = new UniformIntPairGenerator(Integer.MAX_VALUE, 1, true)__		_		_		IntPair record = new IntPair()__		int num = -1__		do {_			generator.next(record)__			num++__		}_		while (sorter.write(record) && num < 3354624)__		_		_		Random rnd = new Random(SEED << 1)__		for (int i = 0_ i < 2 * num_ i++) {_			int pos1 = rnd.nextInt(num)__			int pos2 = rnd.nextInt(num)__			_			int cmp = sorter.compare(pos1, pos2)__			_			if (pos1 < pos2) {_				Assert.assertTrue(cmp <= 0)__			}_			else {_				Assert.assertTrue(cmp >= 0)__			}_		}_		_		_		sorter.dispose()__		this.memoryManager.release(memory)__	};the,compare,test,creates,a,sorted,stream,writes,it,to,the,buffer,and,compares,random,elements,it,expects,that,earlier,elements,are,lower,than,later,ones;test,public,void,test,compare,throws,exception,final,int,num,segments,final,list,memory,segment,memory,this,memory,manager,allocate,pages,new,dummy,invokable,num,segments,fixed,length,record,sorter,int,pair,sorter,new,sort,buffer,memory,uniform,int,pair,generator,generator,new,uniform,int,pair,generator,integer,1,true,int,pair,record,new,int,pair,int,num,1,do,generator,next,record,num,while,sorter,write,record,num,3354624,random,rnd,new,random,seed,1,for,int,i,0,i,2,num,i,int,pos1,rnd,next,int,num,int,pos2,rnd,next,int,num,int,cmp,sorter,compare,pos1,pos2,if,pos1,pos2,assert,assert,true,cmp,0,else,assert,assert,true,cmp,0,sorter,dispose,this,memory,manager,release,memory
