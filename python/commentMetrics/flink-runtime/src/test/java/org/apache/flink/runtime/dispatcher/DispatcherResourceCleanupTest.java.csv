# id;timestamp;commentText;codeText;commentWords;codeWords
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1531351523;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1531921883;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1536954663;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1547806302;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1549360057;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> @Test 	public void testJobRecoveryWithPendingTermination() throws Exception;1550005040;Tests that recovered jobs will only be started after the complete termination of any_other previously running JobMasters for the same job.;@Test_	public void testJobRecoveryWithPendingTermination() throws Exception {_		submitJob()__		runningJobsRegistry.setJobRunning(jobId)___		dispatcherLeaderElectionService.notLeader()__		final UUID leaderSessionId = UUID.randomUUID()__		final CompletableFuture<UUID> leaderFuture = dispatcherLeaderElectionService.isLeader(leaderSessionId)___		try {_			leaderFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("We should not become leader before all previously running JobMasters have terminated.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(leaderFuture.get(), equalTo(leaderSessionId))__	};tests,that,recovered,jobs,will,only,be,started,after,the,complete,termination,of,any,other,previously,running,job,masters,for,the,same,job;test,public,void,test,job,recovery,with,pending,termination,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,dispatcher,leader,election,service,not,leader,final,uuid,leader,session,id,uuid,random,uuid,final,completable,future,uuid,leader,future,dispatcher,leader,election,service,is,leader,leader,session,id,try,leader,future,get,10l,time,unit,milliseconds,fail,we,should,not,become,leader,before,all,previously,running,job,masters,have,terminated,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,leader,future,get,equal,to,leader,session,id
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1526549506;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1527173115;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1528982883;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1531351523;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1531921883;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1536954663;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1547806302;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1549360057;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> TestingBlobServer -> public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException;1550005040;Instantiates a new BLOB server and binds it to a free network port.__@param config    Configuration to be used to instantiate the BlobServer_@param blobStore BlobStore to store blobs persistently_@param cleanupJobFuture_@throws IOException thrown if the BLOB server cannot bind to a free network port or if the_(local or distributed) file storage cannot be created or is not usable;public TestingBlobServer(Configuration config, BlobStore blobStore, CompletableFuture<JobID> cleanupJobFuture) throws IOException {_			super(config, blobStore)__			this.cleanupJobFuture = cleanupJobFuture__		};instantiates,a,new,blob,server,and,binds,it,to,a,free,network,port,param,config,configuration,to,be,used,to,instantiate,the,blob,server,param,blob,store,blob,store,to,store,blobs,persistently,param,cleanup,job,future,throws,ioexception,thrown,if,the,blob,server,cannot,bind,to,a,free,network,port,or,if,the,local,or,distributed,file,storage,cannot,be,created,or,is,not,usable;public,testing,blob,server,configuration,config,blob,store,blob,store,completable,future,job,id,cleanup,job,future,throws,ioexception,super,config,blob,store,this,cleanup,job,future,cleanup,job,future
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1527173115;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1528982883;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1531351523;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1531921883;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1536954663;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1547806302;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1549360057;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testRunningJobsRegistryCleanup() throws Exception;1550005040;Tests that the {@link RunningJobsRegistry} entries are cleared after the_job reached a terminal state.;@Test_	public void testRunningJobsRegistryCleanup() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		assertThat(runningJobsRegistry.contains(jobId), is(true))___		resultFuture.complete(new ArchivedExecutionGraphBuilder().setState(JobStatus.FINISHED).setJobID(jobId).build())__		terminationFuture.complete(null)___		_		clearedJobLatch.await()___		assertThat(runningJobsRegistry.contains(jobId), is(false))__	};tests,that,the,link,running,jobs,registry,entries,are,cleared,after,the,job,reached,a,terminal,state;test,public,void,test,running,jobs,registry,cleanup,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,assert,that,running,jobs,registry,contains,job,id,is,true,result,future,complete,new,archived,execution,graph,builder,set,state,job,status,finished,set,job,id,job,id,build,termination,future,complete,null,cleared,job,latch,await,assert,that,running,jobs,registry,contains,job,id,is,false
DispatcherResourceCleanupTest -> @Test 	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception;1547806302;Tests that the uploaded blobs are being cleaned up in case of a job submission failure.;@Test_	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception {_		failJobMasterCreationWith.set(() -> new FlinkException("Test exception."))__		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get()__			fail("Job submission was expected to fail.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobSubmissionException.class).isPresent(), is(true))__		}__		assertThatHABlobsHaveBeenRemoved()__	};tests,that,the,uploaded,blobs,are,being,cleaned,up,in,case,of,a,job,submission,failure;test,public,void,test,blob,server,cleanup,when,job,submission,fails,throws,exception,fail,job,master,creation,with,set,new,flink,exception,test,exception,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,fail,job,submission,was,expected,to,fail,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,submission,exception,class,is,present,is,true,assert,that,hablobs,have,been,removed
DispatcherResourceCleanupTest -> @Test 	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception;1549360057;Tests that the uploaded blobs are being cleaned up in case of a job submission failure.;@Test_	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception {_		failJobMasterCreationWith.set(() -> new FlinkException("Test exception."))__		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get()__			fail("Job submission was expected to fail.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobSubmissionException.class).isPresent(), is(true))__		}__		assertThatHABlobsHaveBeenRemoved()__	};tests,that,the,uploaded,blobs,are,being,cleaned,up,in,case,of,a,job,submission,failure;test,public,void,test,blob,server,cleanup,when,job,submission,fails,throws,exception,fail,job,master,creation,with,set,new,flink,exception,test,exception,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,fail,job,submission,was,expected,to,fail,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,submission,exception,class,is,present,is,true,assert,that,hablobs,have,been,removed
DispatcherResourceCleanupTest -> @Test 	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception;1550005040;Tests that the uploaded blobs are being cleaned up in case of a job submission failure.;@Test_	public void testBlobServerCleanupWhenJobSubmissionFails() throws Exception {_		failJobMasterCreationWith.set(() -> new FlinkException("Test exception."))__		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get()__			fail("Job submission was expected to fail.")__		} catch (ExecutionException ee) {_			assertThat(ExceptionUtils.findThrowable(ee, JobSubmissionException.class).isPresent(), is(true))__		}__		assertThatHABlobsHaveBeenRemoved()__	};tests,that,the,uploaded,blobs,are,being,cleaned,up,in,case,of,a,job,submission,failure;test,public,void,test,blob,server,cleanup,when,job,submission,fails,throws,exception,fail,job,master,creation,with,set,new,flink,exception,test,exception,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,fail,job,submission,was,expected,to,fail,catch,execution,exception,ee,assert,that,exception,utils,find,throwable,ee,job,submission,exception,class,is,present,is,true,assert,that,hablobs,have,been,removed
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1531351523;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1531921883;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1536954663;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1547806302;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1549360057;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
DispatcherResourceCleanupTest -> @Test 	public void testJobSubmissionUnderSameJobId() throws Exception;1550005040;Tests that the previous JobManager needs to be completely terminated_before a new job with the same {@link JobID} is started.;@Test_	public void testJobSubmissionUnderSameJobId() throws Exception {_		submitJob()___		runningJobsRegistry.setJobRunning(jobId)__		resultFuture.completeExceptionally(new JobNotFinishedException(jobId))___		final CompletableFuture<Acknowledge> submissionFuture = dispatcherGateway.submitJob(jobGraph, timeout)___		try {_			submissionFuture.get(10L, TimeUnit.MILLISECONDS)__			fail("The job submission future should not complete until the previous JobManager " +_				"termination future has been completed.")__		} catch (TimeoutException ignored) {_			_		} finally {_			terminationFuture.complete(null)__		}__		assertThat(submissionFuture.get(), equalTo(Acknowledge.get()))__	};tests,that,the,previous,job,manager,needs,to,be,completely,terminated,before,a,new,job,with,the,same,link,job,id,is,started;test,public,void,test,job,submission,under,same,job,id,throws,exception,submit,job,running,jobs,registry,set,job,running,job,id,result,future,complete,exceptionally,new,job,not,finished,exception,job,id,final,completable,future,acknowledge,submission,future,dispatcher,gateway,submit,job,job,graph,timeout,try,submission,future,get,10l,time,unit,milliseconds,fail,the,job,submission,future,should,not,complete,until,the,previous,job,manager,termination,future,has,been,completed,catch,timeout,exception,ignored,finally,termination,future,complete,null,assert,that,submission,future,get,equal,to,acknowledge,get
