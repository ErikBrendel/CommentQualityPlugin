# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1482522859;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1482522860;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1482522861;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1482522864;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1482522864;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1489413798;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1490031358;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1490174800;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1490273924;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1490273924;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1493146240;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(rmLeaderSessionId, differentLeaderSessionID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1493308611;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1493386068;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1501760738;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1502452184;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,rm,leader,session,id,different,leader,session,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1502706197;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			rmLeaderSessionId,_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,rm,leader,session,id,different,leader,session,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1504525441;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentLeaderSessionID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,leader,session,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1504608225;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1506034747;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1509547920;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1515481550;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1517915730;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1519406526;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1519638690;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1522268075;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1522681180;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1526494919;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1532290976;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1539582211;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentJobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,job,master,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1550238837;Test receive registration with unmatched leadershipId from job master.;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_				_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManagerGateway.registerJobManager(_			differentJobMasterId,_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)__		assertTrue(unMatchedLeaderFuture.get() instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,resource,manager,gateway,register,job,manager,different,job,master,id,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,assert,true,un,matched,leader,future,get,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception;1550568581;Test receive registration with unmatched leadershipId from job master.;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId2() throws Exception {_				_		JobMasterId differentJobMasterId = JobMasterId.generate()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManagerGateway.registerJobManager(_			differentJobMasterId,_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)__		assertTrue(unMatchedLeaderFuture.get() instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id2,throws,exception,job,master,id,different,job,master,id,job,master,id,generate,completable,future,registration,response,un,matched,leader,future,resource,manager,gateway,register,job,manager,different,job,master,id,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,assert,true,un,matched,leader,future,get,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1482522859;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1482522860;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1482522861;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1482522864;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1482522864;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1489413798;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1490031358;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1490174800;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1490273924;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1490273924;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1493146240;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, invalidAddress, jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1493308611;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			invalidAddress,_			jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1493386068;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		Future<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			invalidAddress,_			jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1501760738;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			invalidAddress,_			jobID)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,invalid,address,job,id,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1502452184;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1502706197;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1504525441;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			HighAvailabilityServices.DEFAULT_LEADER_ID,_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1504608225;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1506034747;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1509547920;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1515481550;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1517915730;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1519406526;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1519638690;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1522268075;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1522681180;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1526494919;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1532290976;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1539582211;Test receive registration with invalid address from job master;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			invalidAddress,_			jobID,_			timeout)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1550238837;Test receive registration with invalid address from job master.;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = resourceManagerGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jobMasterResourceId,_			invalidAddress,_			jobId,_			TIMEOUT)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,resource,manager,gateway,register,job,manager,new,job,master,id,high,availability,services,job,master,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterFromInvalidAddress() throws Exception;1550568581;Test receive registration with invalid address from job master.;@Test_	public void testRegisterJobMasterFromInvalidAddress() throws Exception {_		_		String invalidAddress = "/jobMasterAddress2"__		CompletableFuture<RegistrationResponse> invalidAddressFuture = resourceManagerGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jobMasterResourceId,_			invalidAddress,_			jobId,_			TIMEOUT)__		assertTrue(invalidAddressFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,invalid,address,from,job,master;test,public,void,test,register,job,master,from,invalid,address,throws,exception,string,invalid,address,job,master,address2,completable,future,registration,response,invalid,address,future,resource,manager,gateway,register,job,manager,new,job,master,id,high,availability,services,job,master,resource,id,invalid,address,job,id,timeout,assert,true,invalid,address,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1482522859;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)__	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1482522860;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)__	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1482522861;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)__	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1482522864;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1482522864;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1489413798;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1490031358;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1490174800;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1490273924;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1490273924;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1493146240;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderID, jobMasterAddress, jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1493308611;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1493386068;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		Future<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1501760738;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		CompletableFuture<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,completable,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1502452184;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		CompletableFuture<RegistrationResponse> successfulFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(5L, TimeUnit.SECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,completable,future,registration,response,successful,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,5l,time,unit,seconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1502706197;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			rmLeaderSessionId,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,rm,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1504525441;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1504608225;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1506034747;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1509547920;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1515481550;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1517915730;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1519406526;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1519638690;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1522268075;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1522681180;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1526494919;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1532290976;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1539582211;Test receive normal registration from job master and receive duplicate registration from job master;@Test_	public void testRegisterJobMaster() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> successfulFuture = rmGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		RegistrationResponse response = successfulFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,successful,future,rm,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1550238837;Test receive normal registration from job master and receive duplicate_registration from job master.;@Test_	public void testRegisterJobMaster() throws Exception {_		_		CompletableFuture<RegistrationResponse> successfulFuture = resourceManagerGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)__		RegistrationResponse response = successfulFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)__	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,completable,future,registration,response,successful,future,resource,manager,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMaster() throws Exception;1550568581;Test receive normal registration from job master and receive duplicate_registration from job master.;@Test_	public void testRegisterJobMaster() throws Exception {_		_		CompletableFuture<RegistrationResponse> successfulFuture = resourceManagerGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)__		RegistrationResponse response = successfulFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof JobMasterRegistrationSuccess)__	};test,receive,normal,registration,from,job,master,and,receive,duplicate,registration,from,job,master;test,public,void,test,register,job,master,throws,exception,completable,future,registration,response,successful,future,resource,manager,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,registration,response,response,successful,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,job,master,registration,success
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1482522859;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1482522860;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1482522861;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)__	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1482522864;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobMaster(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,master,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1482522864;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1489413798;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1490031358;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1490174800;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1490273924;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1490273924;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1493146240;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(differentLeaderSessionID, jmLeaderID, jobMasterAddress, jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1493308611;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			differentLeaderSessionID,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1493386068;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		Future<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			differentLeaderSessionID,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1501760738;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			differentLeaderSessionID,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1502452184;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = resourceManager.registerJobManager(_			differentLeaderSessionID,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,resource,manager,register,job,manager,different,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1502706197;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		_		UUID differentLeaderSessionID = UUID.randomUUID()__		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = rmGateway.registerJobManager(_			differentLeaderSessionID,_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)__		assertTrue(unMatchedLeaderFuture.get(5, TimeUnit.SECONDS) instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,uuid,different,leader,session,id,uuid,random,uuid,completable,future,registration,response,un,matched,leader,future,rm,gateway,register,job,manager,different,leader,session,id,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,assert,true,un,matched,leader,future,get,5,time,unit,seconds,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1504525441;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		UUID jmLeaderID = UUID.randomUUID()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jmLeaderID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jmLeaderID,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenMismatchException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,uuid,jm,leader,id,uuid,random,uuid,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,jm,leader,id,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,jm,leader,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,mismatch,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1504608225;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenMismatchException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,mismatch,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1506034747;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1509547920;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1515481550;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1517915730;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1519406526;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1519638690;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1522268075;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1522681180;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1526494919;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1532290976;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1539582211;Test receive registration with unmatched leadershipId from job master;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		JobMasterId jobMasterId = JobMasterId.generate()__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(jobMasterAddress, jobMasterId.toUUID())__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(mock(LeaderElectionService.class), jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterId,_			jmResourceId,_			jobMasterAddress,_			jobID,_			timeout)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}__		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,job,master,id,job,master,id,job,master,id,generate,final,resource,id,jm,resource,id,new,resource,id,job,master,address,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,job,master,address,job,master,id,to,uuid,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,mock,leader,election,service,class,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,id,jm,resource,id,job,master,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1550238837;Test receive registration with unmatched leadershipId from job master.;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception;1550568581;Test receive registration with unmatched leadershipId from job master.;@Test_	public void testRegisterJobMasterWithUnmatchedLeaderSessionId1() throws Exception {_		final ResourceManagerGateway wronglyFencedGateway = rpcService.connect(resourceManager.getAddress(), ResourceManagerId.generate(), ResourceManagerGateway.class)_			.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)___		_		CompletableFuture<RegistrationResponse> unMatchedLeaderFuture = wronglyFencedGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			jobId,_			TIMEOUT)___		try {_			unMatchedLeaderFuture.get(5L, TimeUnit.SECONDS)__			fail("Should fail because we are using the wrong fencing token.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof FencingTokenException)__		}_	};test,receive,registration,with,unmatched,leadership,id,from,job,master;test,public,void,test,register,job,master,with,unmatched,leader,session,id1,throws,exception,final,resource,manager,gateway,wrongly,fenced,gateway,rpc,service,connect,resource,manager,get,address,resource,manager,id,generate,resource,manager,gateway,class,get,timeout,to,milliseconds,time,unit,milliseconds,completable,future,registration,response,un,matched,leader,future,wrongly,fenced,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,job,id,timeout,try,un,matched,leader,future,get,5l,time,unit,seconds,fail,should,fail,because,we,are,using,the,wrong,fencing,token,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,fencing,token,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1482522859;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)__	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1482522860;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)__	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1482522861;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)__	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1482522864;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobMaster(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,master,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1482522864;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1489413798;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1490031358;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService()__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1490174800;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1490273924;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1490273924;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1493146240;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(rmLeaderSessionId, jmLeaderSessionId, jobMasterAddress, unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1493308611;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1493386068;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()__		_		Future<RegistrationResponse> declineFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1501760738;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()__		_		CompletableFuture<RegistrationResponse> declineFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,job,master,address,unknown,job,idto,haservices,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1502452184;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(resourceManagerLeaderElectionService, jobID, jobMasterLeaderRetrievalService, testingFatalErrorHandler)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()__		_		CompletableFuture<RegistrationResponse> declineFuture = resourceManager.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)__		RegistrationResponse response = declineFuture.get(5, TimeUnit.SECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,decline,future,resource,manager,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,registration,response,response,decline,future,get,5,time,unit,seconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1502706197;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final UUID rmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final UUID jmLeaderSessionId = grantResourceManagerLeadership(resourceManagerLeaderElectionService)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()__		_		CompletableFuture<RegistrationResponse> declineFuture = rmGateway.registerJobManager(_			rmLeaderSessionId,_			jmLeaderSessionId,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)__		RegistrationResponse response = declineFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		assertTrue(response instanceof RegistrationResponse.Decline)___		if (testingFatalErrorHandler.hasExceptionOccurred()) {_			testingFatalErrorHandler.rethrowError()__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,uuid,rm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,uuid,jm,leader,session,id,grant,resource,manager,leadership,resource,manager,leader,election,service,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,decline,future,rm,gateway,register,job,manager,rm,leader,session,id,jm,leader,session,id,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,registration,response,response,decline,future,get,timeout,to,milliseconds,time,unit,milliseconds,assert,true,response,instanceof,registration,response,decline,if,testing,fatal,error,handler,has,exception,occurred,testing,fatal,error,handler,rethrow,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1504525441;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			HighAvailabilityServices.DEFAULT_LEADER_ID,_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1504608225;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1506034747;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1509547920;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1515481550;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1517915730;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1519406526;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		TestingLeaderRetrievalService jobMasterLeaderRetrievalService = new TestingLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,testing,leader,retrieval,service,job,master,leader,retrieval,service,new,testing,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1519638690;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1522268075;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1522681180;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1526494919;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1532290976;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1539582211;Check and verify return RegistrationResponse.Decline when failed to start a job master Leader retrieval listener;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		String jobMasterAddress = "/jobMasterAddress1"__		JobID jobID = mockJobMaster(jobMasterAddress)__		TestingLeaderElectionService resourceManagerLeaderElectionService = new TestingLeaderElectionService()__		SettableLeaderRetrievalService jobMasterLeaderRetrievalService = new SettableLeaderRetrievalService(_			"localhost",_			HighAvailabilityServices.DEFAULT_LEADER_ID)__		TestingFatalErrorHandler testingFatalErrorHandler = new TestingFatalErrorHandler()__		final ResourceManager<?> resourceManager = createAndStartResourceManager(_			resourceManagerLeaderElectionService,_			jobID,_			jobMasterLeaderRetrievalService,_			testingFatalErrorHandler)__		final ResourceManagerGateway rmGateway = resourceManager.getSelfGateway(ResourceManagerGateway.class)__		final ResourceID jmResourceId = new ResourceID(jobMasterAddress)___		JobID unknownJobIDToHAServices = new JobID()___		_		resourceManagerLeaderElectionService.isLeader(UUID.randomUUID()).get()___		_		CompletableFuture<RegistrationResponse> registrationFuture = rmGateway.registerJobManager(_			new JobMasterId(HighAvailabilityServices.DEFAULT_LEADER_ID),_			jmResourceId,_			jobMasterAddress,_			unknownJobIDToHAServices,_			timeout)___		try {_			registrationFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}_	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,string,job,master,address,job,master,address1,job,id,job,id,mock,job,master,job,master,address,testing,leader,election,service,resource,manager,leader,election,service,new,testing,leader,election,service,settable,leader,retrieval,service,job,master,leader,retrieval,service,new,settable,leader,retrieval,service,localhost,high,availability,services,testing,fatal,error,handler,testing,fatal,error,handler,new,testing,fatal,error,handler,final,resource,manager,resource,manager,create,and,start,resource,manager,resource,manager,leader,election,service,job,id,job,master,leader,retrieval,service,testing,fatal,error,handler,final,resource,manager,gateway,rm,gateway,resource,manager,get,self,gateway,resource,manager,gateway,class,final,resource,id,jm,resource,id,new,resource,id,job,master,address,job,id,unknown,job,idto,haservices,new,job,id,resource,manager,leader,election,service,is,leader,uuid,random,uuid,get,completable,future,registration,response,registration,future,rm,gateway,register,job,manager,new,job,master,id,high,availability,services,jm,resource,id,job,master,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1550238837;Check and verify return RegistrationResponse. Decline when failed to start a_job master Leader retrieval listener.;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		JobID unknownJobIDToHAServices = new JobID()___		_		CompletableFuture<RegistrationResponse> registrationFuture = resourceManagerGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			unknownJobIDToHAServices,_			TIMEOUT)___		try {_			registrationFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			fail("Expected to fail with a ResourceManagerException.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}__		_		testingFatalErrorHandler.clearError()__	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,registration,future,resource,manager,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,expected,to,fail,with,a,resource,manager,exception,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception,testing,fatal,error,handler,clear,error
ResourceManagerJobMasterTest -> @Test 	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception;1550568581;Check and verify return RegistrationResponse. Decline when failed to start a_job master Leader retrieval listener.;@Test_	public void testRegisterJobMasterWithFailureLeaderListener() throws Exception {_		JobID unknownJobIDToHAServices = new JobID()___		_		CompletableFuture<RegistrationResponse> registrationFuture = resourceManagerGateway.registerJobManager(_			jobMasterGateway.getFencingToken(),_			jobMasterResourceId,_			jobMasterGateway.getAddress(),_			unknownJobIDToHAServices,_			TIMEOUT)___		try {_			registrationFuture.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS)__			fail("Expected to fail with a ResourceManagerException.")__		} catch (ExecutionException e) {_			assertTrue(ExceptionUtils.stripExecutionException(e) instanceof ResourceManagerException)__		}__		_		testingFatalErrorHandler.clearError()__	};check,and,verify,return,registration,response,decline,when,failed,to,start,a,job,master,leader,retrieval,listener;test,public,void,test,register,job,master,with,failure,leader,listener,throws,exception,job,id,unknown,job,idto,haservices,new,job,id,completable,future,registration,response,registration,future,resource,manager,gateway,register,job,manager,job,master,gateway,get,fencing,token,job,master,resource,id,job,master,gateway,get,address,unknown,job,idto,haservices,timeout,try,registration,future,get,timeout,to,milliseconds,time,unit,milliseconds,fail,expected,to,fail,with,a,resource,manager,exception,catch,execution,exception,e,assert,true,exception,utils,strip,execution,exception,e,instanceof,resource,manager,exception,testing,fatal,error,handler,clear,error
