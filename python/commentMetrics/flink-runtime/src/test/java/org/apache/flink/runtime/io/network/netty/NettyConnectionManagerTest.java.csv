# id;timestamp;commentText;codeText;commentWords;codeWords
NettyConnectionManagerTest -> @Test 	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception;1454855326;Tests that the number of arenas and number of threads of the client and_server are set to the same number, that is the number of configured_task slots.;@Test_	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception {_		_		int numberOfSlots = 2___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				numberOfSlots,_				new Configuration())___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class),_				mock(NetworkBufferPool.class))___		assertEquals(numberOfSlots, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,number,of,threads,of,the,client,and,server,are,set,to,the,same,number,that,is,the,number,of,configured,task,slots;test,public,void,test,matching,number,of,arenas,and,threads,as,default,throws,exception,int,number,of,slots,2,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,number,of,slots,new,configuration,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,mock,network,buffer,pool,class,assert,equals,number,of,slots,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length
NettyConnectionManagerTest -> @Test 	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception;1493724918;Tests that the number of arenas and number of threads of the client and_server are set to the same number, that is the number of configured_task slots.;@Test_	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception {_		_		int numberOfSlots = 2___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				numberOfSlots,_				new Configuration())___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class))___		assertEquals(numberOfSlots, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,number,of,threads,of,the,client,and,server,are,set,to,the,same,number,that,is,the,number,of,configured,task,slots;test,public,void,test,matching,number,of,arenas,and,threads,as,default,throws,exception,int,number,of,slots,2,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,number,of,slots,new,configuration,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,assert,equals,number,of,slots,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length
NettyConnectionManagerTest -> @Test 	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception;1502111816;Tests that the number of arenas and number of threads of the client and_server are set to the same number, that is the number of configured_task slots.;@Test_	public void testMatchingNumberOfArenasAndThreadsAsDefault() throws Exception {_		_		int numberOfSlots = 2___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				numberOfSlots,_				new Configuration())___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class))___		assertEquals(numberOfSlots, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfSlots, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,number,of,threads,of,the,client,and,server,are,set,to,the,same,number,that,is,the,number,of,configured,task,slots;test,public,void,test,matching,number,of,arenas,and,threads,as,default,throws,exception,int,number,of,slots,2,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,number,of,slots,new,configuration,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,assert,equals,number,of,slots,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,slots,event,executors,length
NettyConnectionManagerTest -> @Test 	public void testManualConfiguration() throws Exception;1454855326;Tests that the number of arenas and threads can be configured manually.;@Test_	public void testManualConfiguration() throws Exception {_		_		int numberOfArenas = 1__		int numberOfClientThreads = 3__		int numberOfServerThreads = 4___		_		Configuration flinkConfig = new Configuration()__		flinkConfig.setInteger(NettyConfig.NUM_ARENAS, numberOfArenas)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_CLIENT, 3)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_SERVER, 4)___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				1337,_				flinkConfig)___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class),_				mock(NetworkBufferPool.class))___		assertEquals(numberOfArenas, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfClientThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,threads,can,be,configured,manually;test,public,void,test,manual,configuration,throws,exception,int,number,of,arenas,1,int,number,of,client,threads,3,int,number,of,server,threads,4,configuration,flink,config,new,configuration,flink,config,set,integer,netty,config,number,of,arenas,flink,config,set,integer,netty,config,3,flink,config,set,integer,netty,config,4,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,1337,flink,config,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,mock,network,buffer,pool,class,assert,equals,number,of,arenas,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,client,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length
NettyConnectionManagerTest -> @Test 	public void testManualConfiguration() throws Exception;1493724918;Tests that the number of arenas and threads can be configured manually.;@Test_	public void testManualConfiguration() throws Exception {_		_		int numberOfArenas = 1__		int numberOfClientThreads = 3__		int numberOfServerThreads = 4___		_		Configuration flinkConfig = new Configuration()__		flinkConfig.setInteger(NettyConfig.NUM_ARENAS, numberOfArenas)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_CLIENT, 3)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_SERVER, 4)___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				1337,_				flinkConfig)___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class))___		assertEquals(numberOfArenas, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfClientThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,threads,can,be,configured,manually;test,public,void,test,manual,configuration,throws,exception,int,number,of,arenas,1,int,number,of,client,threads,3,int,number,of,server,threads,4,configuration,flink,config,new,configuration,flink,config,set,integer,netty,config,number,of,arenas,flink,config,set,integer,netty,config,3,flink,config,set,integer,netty,config,4,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,1337,flink,config,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,assert,equals,number,of,arenas,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,client,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length
NettyConnectionManagerTest -> @Test 	public void testManualConfiguration() throws Exception;1502111816;Tests that the number of arenas and threads can be configured manually.;@Test_	public void testManualConfiguration() throws Exception {_		_		int numberOfArenas = 1__		int numberOfClientThreads = 3__		int numberOfServerThreads = 4___		_		Configuration flinkConfig = new Configuration()__		flinkConfig.setInteger(NettyConfig.NUM_ARENAS, numberOfArenas)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_CLIENT, 3)__		flinkConfig.setInteger(NettyConfig.NUM_THREADS_SERVER, 4)___		NettyConfig config = new NettyConfig(_				InetAddress.getLocalHost(),_				NetUtils.getAvailablePort(),_				1024,_				1337,_				flinkConfig)___		NettyConnectionManager connectionManager = new NettyConnectionManager(config)___		connectionManager.start(_				mock(ResultPartitionProvider.class),_				mock(TaskEventDispatcher.class))___		assertEquals(numberOfArenas, connectionManager.getBufferPool().getNumberOfArenas())___		{_			_			Bootstrap boostrap = connectionManager.getClient().getBootstrap()__			EventLoopGroup group = boostrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfClientThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.group()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}__		{_			_			ServerBootstrap bootstrap = connectionManager.getServer().getBootstrap()__			EventLoopGroup group = bootstrap.childGroup()___			Field f = group.getClass().getSuperclass().getSuperclass().getDeclaredField("children")__			f.setAccessible(true)__			Object[] eventExecutors = (Object[]) f.get(group)___			assertEquals(numberOfServerThreads, eventExecutors.length)__		}_	};tests,that,the,number,of,arenas,and,threads,can,be,configured,manually;test,public,void,test,manual,configuration,throws,exception,int,number,of,arenas,1,int,number,of,client,threads,3,int,number,of,server,threads,4,configuration,flink,config,new,configuration,flink,config,set,integer,netty,config,number,of,arenas,flink,config,set,integer,netty,config,3,flink,config,set,integer,netty,config,4,netty,config,config,new,netty,config,inet,address,get,local,host,net,utils,get,available,port,1024,1337,flink,config,netty,connection,manager,connection,manager,new,netty,connection,manager,config,connection,manager,start,mock,result,partition,provider,class,mock,task,event,dispatcher,class,assert,equals,number,of,arenas,connection,manager,get,buffer,pool,get,number,of,arenas,bootstrap,boostrap,connection,manager,get,client,get,bootstrap,event,loop,group,group,boostrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,client,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length,server,bootstrap,bootstrap,connection,manager,get,server,get,bootstrap,event,loop,group,group,bootstrap,child,group,field,f,group,get,class,get,superclass,get,superclass,get,declared,field,children,f,set,accessible,true,object,event,executors,object,f,get,group,assert,equals,number,of,server,threads,event,executors,length
