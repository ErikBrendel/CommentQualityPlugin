# id;timestamp;commentText;codeText;commentWords;codeWords
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1482522861;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			new DirectExecutorService(),_			scheduledExecutorService,_			LOG)___		heartbeatManager.start(heartbeatListener)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).sendHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.sendHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,new,direct,executor,service,scheduled,executor,service,log,heartbeat,manager,start,heartbeat,listener,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,send,heartbeat,own,resource,id,expected,object,heartbeat,manager,send,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1489762322;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutorService,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,service,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1489766404;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1499497171;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1501620216;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1508501697;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1508858189;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1515177485;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1515481550;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload()__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1521554023;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload(any(ResourceID.class))__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,any,resource,id,class,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1522681180;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload(any(ResourceID.class))__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,any,resource,id,class,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1526494919;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload(any(ResourceID.class))__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,any,resource,id,class,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testRegularHeartbeat();1545300278;Tests that regular heartbeat signal triggers the right callback functions in the_{@link HeartbeatListener}.;@Test_	public void testRegularHeartbeat() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			Executors.directExecutor(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.requestHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(1)).reportPayload(targetResourceID, expectedObject)__		verify(heartbeatListener, times(1)).retrievePayload(any(ResourceID.class))__		verify(heartbeatTarget, times(1)).receiveHeartbeat(ownResourceID, expectedObject)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(heartbeatListener, times(2)).reportPayload(targetResourceID, expectedObject)__	};tests,that,regular,heartbeat,signal,triggers,the,right,callback,functions,in,the,link,heartbeat,listener;test,public,void,test,regular,heartbeat,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,executors,direct,executor,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,request,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,1,report,payload,target,resource,id,expected,object,verify,heartbeat,listener,times,1,retrieve,payload,any,resource,id,class,verify,heartbeat,target,times,1,receive,heartbeat,own,resource,id,expected,object,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,heartbeat,listener,times,2,report,payload,target,resource,id,expected,object
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerTargetPayload();1521554023;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerImpl}.;@Test_	public void testHeartbeatManagerTargetPayload() {_		final long heartbeatTimeout = 100L___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()__		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver()__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver()___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			heartbeatManager.requestHeartbeat(someTargetId, null)__			assertEquals(defaultResponse, someHeartbeatTarget.getLastReceivedHeartbeatPayload())___			heartbeatManager.requestHeartbeat(specialTargetId, null)__			assertEquals(specialResponse, specialHeartbeatTarget.getLastReceivedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,impl;test,public,void,test,heartbeat,manager,target,payload,final,long,heartbeat,timeout,100l,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,heartbeat,manager,request,heartbeat,some,target,id,null,assert,equals,default,response,some,heartbeat,target,get,last,received,heartbeat,payload,heartbeat,manager,request,heartbeat,special,target,id,null,assert,equals,special,response,special,heartbeat,target,get,last,received,heartbeat,payload,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerTargetPayload();1522681180;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerImpl}.;@Test_	public void testHeartbeatManagerTargetPayload() {_		final long heartbeatTimeout = 100L___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()__		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver()__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver()___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			heartbeatManager.requestHeartbeat(someTargetId, null)__			assertEquals(defaultResponse, someHeartbeatTarget.getLastReceivedHeartbeatPayload())___			heartbeatManager.requestHeartbeat(specialTargetId, null)__			assertEquals(specialResponse, specialHeartbeatTarget.getLastReceivedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,impl;test,public,void,test,heartbeat,manager,target,payload,final,long,heartbeat,timeout,100l,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,heartbeat,manager,request,heartbeat,some,target,id,null,assert,equals,default,response,some,heartbeat,target,get,last,received,heartbeat,payload,heartbeat,manager,request,heartbeat,special,target,id,null,assert,equals,special,response,special,heartbeat,target,get,last,received,heartbeat,payload,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerTargetPayload();1526494919;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerImpl}.;@Test_	public void testHeartbeatManagerTargetPayload() {_		final long heartbeatTimeout = 100L___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()__		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver()__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver()___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			heartbeatManager.requestHeartbeat(someTargetId, null)__			assertEquals(defaultResponse, someHeartbeatTarget.getLastReceivedHeartbeatPayload())___			heartbeatManager.requestHeartbeat(specialTargetId, null)__			assertEquals(specialResponse, specialHeartbeatTarget.getLastReceivedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,impl;test,public,void,test,heartbeat,manager,target,payload,final,long,heartbeat,timeout,100l,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,heartbeat,manager,request,heartbeat,some,target,id,null,assert,equals,default,response,some,heartbeat,target,get,last,received,heartbeat,payload,heartbeat,manager,request,heartbeat,special,target,id,null,assert,equals,special,response,special,heartbeat,target,get,last,received,heartbeat,payload,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerTargetPayload();1545300278;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerImpl}.;@Test_	public void testHeartbeatManagerTargetPayload() {_		final long heartbeatTimeout = 100L___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()__		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver()__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver()___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			heartbeatManager.requestHeartbeat(someTargetId, null)__			assertEquals(defaultResponse, someHeartbeatTarget.getLastReceivedHeartbeatPayload())___			heartbeatManager.requestHeartbeat(specialTargetId, null)__			assertEquals(specialResponse, specialHeartbeatTarget.getLastReceivedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,impl;test,public,void,test,heartbeat,manager,target,payload,final,long,heartbeat,timeout,100l,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,heartbeat,manager,request,heartbeat,some,target,id,null,assert,equals,default,response,some,heartbeat,target,get,last,received,heartbeat,payload,heartbeat,manager,request,heartbeat,special,target,id,null,assert,equals,special,response,special,heartbeat,target,get,last,received,heartbeat,payload,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1482522861;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		Future<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)____		heartbeatManager.start(heartbeatListener)__		heartbeatManager2.start(heartbeatListener2)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,start,heartbeat,listener,heartbeat,manager2,start,heartbeat,listener2,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1489762322;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		Future<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)____		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1489766404;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		Future<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)____		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1499497171;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		Future<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1501620216;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1508501697;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1508858189;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1515177485;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1515481550;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1521554023;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1522681180;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1526494919;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatCluster() throws Exception;1545300278;Tests the heartbeat interplay between the {@link HeartbeatManagerImpl} and the_{@link HeartbeatManagerSenderImpl}. The sender should regularly trigger heartbeat requests_which are fulfilled by the receiver. Upon stopping the receiver, the sender should notify_the heartbeat listener about the heartbeat timeout.__@throws Exception;@Test_	public void testHeartbeatCluster() throws Exception {_		long heartbeatTimeout = 100L__		long heartbeatPeriod = 20L__		Object object = new Object()__		Object object2 = new Object()__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID resourceID2 = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(object))___		TestingHeartbeatListener heartbeatListener2 = new TestingHeartbeatListener(object2)___		CompletableFuture<ResourceID> futureTimeout = heartbeatListener2.getTimeoutFuture()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatManagerSenderImpl<Object, Object> heartbeatManager2 = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			resourceID2,_			heartbeatListener2,_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(resourceID2, heartbeatManager2)__		heartbeatManager2.monitorTarget(resourceID, heartbeatManager)___		Thread.sleep(2 * heartbeatTimeout)___		assertFalse(futureTimeout.isDone())___		heartbeatManager.stop()___		ResourceID timeoutResourceID = futureTimeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(resourceID, timeoutResourceID)___		int numberHeartbeats = (int) (2 * heartbeatTimeout / heartbeatPeriod)___		verify(heartbeatListener, atLeast(numberHeartbeats / 2)).reportPayload(resourceID2, object2)__		assertTrue(heartbeatListener2.getNumberHeartbeatReports() >= numberHeartbeats / 2)__	};tests,the,heartbeat,interplay,between,the,link,heartbeat,manager,impl,and,the,link,heartbeat,manager,sender,impl,the,sender,should,regularly,trigger,heartbeat,requests,which,are,fulfilled,by,the,receiver,upon,stopping,the,receiver,the,sender,should,notify,the,heartbeat,listener,about,the,heartbeat,timeout,throws,exception;test,public,void,test,heartbeat,cluster,throws,exception,long,heartbeat,timeout,100l,long,heartbeat,period,20l,object,object,new,object,object,object2,new,object,resource,id,resource,id,new,resource,id,foobar,resource,id,resource,id2,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,object,testing,heartbeat,listener,heartbeat,listener2,new,testing,heartbeat,listener,object2,completable,future,resource,id,future,timeout,heartbeat,listener2,get,timeout,future,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,sender,impl,object,object,heartbeat,manager2,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id2,heartbeat,listener2,executors,direct,executor,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,resource,id2,heartbeat,manager2,heartbeat,manager2,monitor,target,resource,id,heartbeat,manager,thread,sleep,2,heartbeat,timeout,assert,false,future,timeout,is,done,heartbeat,manager,stop,resource,id,timeout,resource,id,future,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,resource,id,timeout,resource,id,int,number,heartbeats,int,2,heartbeat,timeout,heartbeat,period,verify,heartbeat,listener,at,least,number,heartbeats,2,report,payload,resource,id2,object2,assert,true,heartbeat,listener2,get,number,heartbeat,reports,number,heartbeats,2
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerSenderTargetPayload() throws Exception;1521554023;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerSenderImpl}.;@Test_	public void testHeartbeatManagerSenderTargetPayload() throws Exception {_		final long heartbeatTimeout = 100L__		final long heartbeatPeriod = 2000L___		final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1)___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()___		final OneShotLatch someTargetReceivedLatch = new OneShotLatch()__		final OneShotLatch specialTargetReceivedLatch = new OneShotLatch()___		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver(someTargetReceivedLatch)__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver(specialTargetReceivedLatch)___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(scheduledThreadPoolExecutor),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			someTargetReceivedLatch.await(5, TimeUnit.SECONDS)__			specialTargetReceivedLatch.await(5, TimeUnit.SECONDS)___			assertEquals(defaultResponse, someHeartbeatTarget.getLastRequestedHeartbeatPayload())__			assertEquals(specialResponse, specialHeartbeatTarget.getLastRequestedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__			scheduledThreadPoolExecutor.shutdown()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,sender,impl;test,public,void,test,heartbeat,manager,sender,target,payload,throws,exception,final,long,heartbeat,timeout,100l,final,long,heartbeat,period,2000l,final,scheduled,thread,pool,executor,scheduled,thread,pool,executor,new,scheduled,thread,pool,executor,1,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,one,shot,latch,some,target,received,latch,new,one,shot,latch,final,one,shot,latch,special,target,received,latch,new,one,shot,latch,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,some,target,received,latch,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,special,target,received,latch,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,new,scheduled,executor,service,adapter,scheduled,thread,pool,executor,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,some,target,received,latch,await,5,time,unit,seconds,special,target,received,latch,await,5,time,unit,seconds,assert,equals,default,response,some,heartbeat,target,get,last,requested,heartbeat,payload,assert,equals,special,response,special,heartbeat,target,get,last,requested,heartbeat,payload,finally,heartbeat,manager,stop,scheduled,thread,pool,executor,shutdown
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerSenderTargetPayload() throws Exception;1522681180;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerSenderImpl}.;@Test_	public void testHeartbeatManagerSenderTargetPayload() throws Exception {_		final long heartbeatTimeout = 100L__		final long heartbeatPeriod = 2000L___		final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1)___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()___		final OneShotLatch someTargetReceivedLatch = new OneShotLatch()__		final OneShotLatch specialTargetReceivedLatch = new OneShotLatch()___		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver(someTargetReceivedLatch)__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver(specialTargetReceivedLatch)___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(scheduledThreadPoolExecutor),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			someTargetReceivedLatch.await(5, TimeUnit.SECONDS)__			specialTargetReceivedLatch.await(5, TimeUnit.SECONDS)___			assertEquals(defaultResponse, someHeartbeatTarget.getLastRequestedHeartbeatPayload())__			assertEquals(specialResponse, specialHeartbeatTarget.getLastRequestedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__			scheduledThreadPoolExecutor.shutdown()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,sender,impl;test,public,void,test,heartbeat,manager,sender,target,payload,throws,exception,final,long,heartbeat,timeout,100l,final,long,heartbeat,period,2000l,final,scheduled,thread,pool,executor,scheduled,thread,pool,executor,new,scheduled,thread,pool,executor,1,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,one,shot,latch,some,target,received,latch,new,one,shot,latch,final,one,shot,latch,special,target,received,latch,new,one,shot,latch,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,some,target,received,latch,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,special,target,received,latch,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,new,scheduled,executor,service,adapter,scheduled,thread,pool,executor,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,some,target,received,latch,await,5,time,unit,seconds,special,target,received,latch,await,5,time,unit,seconds,assert,equals,default,response,some,heartbeat,target,get,last,requested,heartbeat,payload,assert,equals,special,response,special,heartbeat,target,get,last,requested,heartbeat,payload,finally,heartbeat,manager,stop,scheduled,thread,pool,executor,shutdown
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerSenderTargetPayload() throws Exception;1526494919;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerSenderImpl}.;@Test_	public void testHeartbeatManagerSenderTargetPayload() throws Exception {_		final long heartbeatTimeout = 100L__		final long heartbeatPeriod = 2000L___		final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1)___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()___		final OneShotLatch someTargetReceivedLatch = new OneShotLatch()__		final OneShotLatch specialTargetReceivedLatch = new OneShotLatch()___		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver(someTargetReceivedLatch)__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver(specialTargetReceivedLatch)___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(scheduledThreadPoolExecutor),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			someTargetReceivedLatch.await(5, TimeUnit.SECONDS)__			specialTargetReceivedLatch.await(5, TimeUnit.SECONDS)___			assertEquals(defaultResponse, someHeartbeatTarget.getLastRequestedHeartbeatPayload())__			assertEquals(specialResponse, specialHeartbeatTarget.getLastRequestedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__			scheduledThreadPoolExecutor.shutdown()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,sender,impl;test,public,void,test,heartbeat,manager,sender,target,payload,throws,exception,final,long,heartbeat,timeout,100l,final,long,heartbeat,period,2000l,final,scheduled,thread,pool,executor,scheduled,thread,pool,executor,new,scheduled,thread,pool,executor,1,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,one,shot,latch,some,target,received,latch,new,one,shot,latch,final,one,shot,latch,special,target,received,latch,new,one,shot,latch,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,some,target,received,latch,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,special,target,received,latch,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,new,scheduled,executor,service,adapter,scheduled,thread,pool,executor,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,some,target,received,latch,await,5,time,unit,seconds,special,target,received,latch,await,5,time,unit,seconds,assert,equals,default,response,some,heartbeat,target,get,last,requested,heartbeat,payload,assert,equals,special,response,special,heartbeat,target,get,last,requested,heartbeat,payload,finally,heartbeat,manager,stop,scheduled,thread,pool,executor,shutdown
HeartbeatManagerTest -> @Test 	public void testHeartbeatManagerSenderTargetPayload() throws Exception;1545300278;Tests that the heartbeat target {@link ResourceID} is properly passed to the {@link HeartbeatListener} by the_{@link HeartbeatManagerSenderImpl}.;@Test_	public void testHeartbeatManagerSenderTargetPayload() throws Exception {_		final long heartbeatTimeout = 100L__		final long heartbeatPeriod = 2000L___		final ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1)___		final ResourceID someTargetId = ResourceID.generate()__		final ResourceID specialTargetId = ResourceID.generate()___		final OneShotLatch someTargetReceivedLatch = new OneShotLatch()__		final OneShotLatch specialTargetReceivedLatch = new OneShotLatch()___		final TargetDependentHeartbeatReceiver someHeartbeatTarget = new TargetDependentHeartbeatReceiver(someTargetReceivedLatch)__		final TargetDependentHeartbeatReceiver specialHeartbeatTarget = new TargetDependentHeartbeatReceiver(specialTargetReceivedLatch)___		final int defaultResponse = 0__		final int specialResponse = 1___		HeartbeatManager<?, Integer> heartbeatManager = new HeartbeatManagerSenderImpl<>(_			heartbeatPeriod,_			heartbeatTimeout,_			ResourceID.generate(),_			new TargetDependentHeartbeatSender(specialTargetId, specialResponse, defaultResponse),_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(scheduledThreadPoolExecutor),_			LOG)___		try {_			heartbeatManager.monitorTarget(someTargetId, someHeartbeatTarget)__			heartbeatManager.monitorTarget(specialTargetId, specialHeartbeatTarget)___			someTargetReceivedLatch.await(5, TimeUnit.SECONDS)__			specialTargetReceivedLatch.await(5, TimeUnit.SECONDS)___			assertEquals(defaultResponse, someHeartbeatTarget.getLastRequestedHeartbeatPayload())__			assertEquals(specialResponse, specialHeartbeatTarget.getLastRequestedHeartbeatPayload())__		} finally {_			heartbeatManager.stop()__			scheduledThreadPoolExecutor.shutdown()__		}_	};tests,that,the,heartbeat,target,link,resource,id,is,properly,passed,to,the,link,heartbeat,listener,by,the,link,heartbeat,manager,sender,impl;test,public,void,test,heartbeat,manager,sender,target,payload,throws,exception,final,long,heartbeat,timeout,100l,final,long,heartbeat,period,2000l,final,scheduled,thread,pool,executor,scheduled,thread,pool,executor,new,scheduled,thread,pool,executor,1,final,resource,id,some,target,id,resource,id,generate,final,resource,id,special,target,id,resource,id,generate,final,one,shot,latch,some,target,received,latch,new,one,shot,latch,final,one,shot,latch,special,target,received,latch,new,one,shot,latch,final,target,dependent,heartbeat,receiver,some,heartbeat,target,new,target,dependent,heartbeat,receiver,some,target,received,latch,final,target,dependent,heartbeat,receiver,special,heartbeat,target,new,target,dependent,heartbeat,receiver,special,target,received,latch,final,int,default,response,0,final,int,special,response,1,heartbeat,manager,integer,heartbeat,manager,new,heartbeat,manager,sender,impl,heartbeat,period,heartbeat,timeout,resource,id,generate,new,target,dependent,heartbeat,sender,special,target,id,special,response,default,response,executors,direct,executor,new,scheduled,executor,service,adapter,scheduled,thread,pool,executor,log,try,heartbeat,manager,monitor,target,some,target,id,some,heartbeat,target,heartbeat,manager,monitor,target,special,target,id,special,heartbeat,target,some,target,received,latch,await,5,time,unit,seconds,special,target,received,latch,await,5,time,unit,seconds,assert,equals,default,response,some,heartbeat,target,get,last,requested,heartbeat,payload,assert,equals,special,response,special,heartbeat,target,get,last,requested,heartbeat,payload,finally,heartbeat,manager,stop,scheduled,thread,pool,executor,shutdown
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1482522861;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		heartbeatManager.start(heartbeatListener)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		Future<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.sendHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,start,heartbeat,listener,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,send,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1489762322;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		Future<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1489766404;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		Future<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1499497171;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		Future<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1501620216;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1508501697;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1508858189;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1515177485;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1515481550;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1521554023;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1522681180;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1526494919;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testHeartbeatTimeout() throws Exception;1545300278;Tests that a heartbeat timeout is signaled if the heartbeat is not reported in time.__@throws Exception;@Test_	public void testHeartbeatTimeout() throws Exception {_		long heartbeatTimeout = 100L__		int numHeartbeats = 10__		long heartbeatInterval = 20L__		Object payload = new Object()___		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(payload)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		CompletableFuture<ResourceID> timeoutFuture = heartbeatListener.getTimeoutFuture()___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		for (int i = 0_ i < numHeartbeats_ i++) {_			heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)__			Thread.sleep(heartbeatInterval)__		}__		assertFalse(timeoutFuture.isDone())___		ResourceID timeoutResourceID = timeoutFuture.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)___		assertEquals(targetResourceID, timeoutResourceID)__	};tests,that,a,heartbeat,timeout,is,signaled,if,the,heartbeat,is,not,reported,in,time,throws,exception;test,public,void,test,heartbeat,timeout,throws,exception,long,heartbeat,timeout,100l,int,num,heartbeats,10,long,heartbeat,interval,20l,object,payload,new,object,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,payload,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,executors,direct,executor,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,completable,future,resource,id,timeout,future,heartbeat,listener,get,timeout,future,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,for,int,i,0,i,num,heartbeats,i,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,thread,sleep,heartbeat,interval,assert,false,timeout,future,is,done,resource,id,timeout,resource,id,timeout,future,get,2,heartbeat,timeout,time,unit,milliseconds,assert,equals,target,resource,id,timeout,resource,id
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1508501697;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1508858189;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1515177485;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1515481550;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1521554023;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1522681180;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1526494919;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFromUnregisteredTarget();1545300278;Tests that the last heartbeat from an unregistered target equals -1.;@Test_	public void testLastHeartbeatFromUnregisteredTarget() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)___		HeartbeatManager<?, ?> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			assertEquals(-1L, heartbeatManager.getLastHeartbeatFrom(ResourceID.generate()))__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,the,last,heartbeat,from,an,unregistered,target,equals,1;test,public,void,test,last,heartbeat,from,unregistered,target,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,heartbeat,manager,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,assert,equals,1l,heartbeat,manager,get,last,heartbeat,from,resource,id,generate,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1482522861;Tests that after unmonitoring a target, there won't be a timeout triggered;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		heartbeatManager.start(heartbeatListener)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		Future<ResourceID> timeout = heartbeatListener.getTimeoutFuture()____		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,start,heartbeat,listener,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1489762322;Tests that after unmonitoring a target, there won't be a timeout triggered;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledThreadPoolExecutor(1),_			LOG)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		Future<ResourceID> timeout = heartbeatListener.getTimeoutFuture()____		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1489766404;Tests that after unmonitoring a target, there won't be a timeout triggered;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		Future<ResourceID> timeout = heartbeatListener.getTimeoutFuture()____		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1499497171;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		Future<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1501620216;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1508501697;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		heartbeatManager.monitorTarget(targetID, mock(HeartbeatTarget.class))___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,heartbeat,manager,monitor,target,target,id,mock,heartbeat,target,class,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1508858189;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1515177485;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1515481550;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1521554023;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1522681180;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1526494919;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			new DirectExecutorService(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,new,direct,executor,service,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException;1545300278;Tests that after unmonitoring a target, there won't be a timeout triggered.;@Test_	public void testTargetUnmonitoring() throws InterruptedException, ExecutionException {_		_		long heartbeatTimeout = 100L__		ResourceID resourceID = new ResourceID("foobar")__		ResourceID targetID = new ResourceID("target")__		Object object = new Object()___		TestingHeartbeatListener heartbeatListener = new TestingHeartbeatListener(object)___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceID,_			heartbeatListener,_			Executors.directExecutor(),_			new ScheduledExecutorServiceAdapter(new ScheduledThreadPoolExecutor(1)),_			LOG)___		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		heartbeatManager.monitorTarget(targetID, heartbeatTarget)___		heartbeatManager.unmonitorTarget(targetID)___		CompletableFuture<ResourceID> timeout = heartbeatListener.getTimeoutFuture()___		try {_			timeout.get(2 * heartbeatTimeout, TimeUnit.MILLISECONDS)__			fail("Timeout should time out.")__		} catch (TimeoutException e) {_			_		}_	};tests,that,after,unmonitoring,a,target,there,won,t,be,a,timeout,triggered;test,public,void,test,target,unmonitoring,throws,interrupted,exception,execution,exception,long,heartbeat,timeout,100l,resource,id,resource,id,new,resource,id,foobar,resource,id,target,id,new,resource,id,target,object,object,new,object,testing,heartbeat,listener,heartbeat,listener,new,testing,heartbeat,listener,object,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,new,scheduled,executor,service,adapter,new,scheduled,thread,pool,executor,1,log,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,id,heartbeat,target,heartbeat,manager,unmonitor,target,target,id,completable,future,resource,id,timeout,heartbeat,listener,get,timeout,future,try,timeout,get,2,heartbeat,timeout,time,unit,milliseconds,fail,timeout,should,time,out,catch,timeout,exception,e
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1482522861;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			new DirectExecutorService(),_			scheduledExecutorService,_			LOG)___		heartbeatManager.start(heartbeatListener)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.sendHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutorService, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,new,direct,executor,service,scheduled,executor,service,log,heartbeat,manager,start,heartbeat,listener,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,send,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,service,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1489762322;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutorService scheduledExecutorService = mock(ScheduledExecutorService.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutorService).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutorService,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutorService, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,service,scheduled,executor,service,mock,scheduled,executor,service,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,service,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,service,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,service,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1489766404;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1499497171;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(FlinkCompletableFuture.completed(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,flink,completable,future,completed,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1501620216;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1508501697;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1508858189;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1515177485;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1515481550;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload()).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1521554023;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1522681180;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1526494919;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			new DirectExecutorService(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,new,direct,executor,service,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testHeartbeatMonitorUpdate();1545300278;Tests that the heartbeat monitors are updated when receiving a new heartbeat signal.;@Test_	public void testHeartbeatMonitorUpdate() {_		long heartbeatTimeout = 1000L__		ResourceID ownResourceID = new ResourceID("foobar")__		ResourceID targetResourceID = new ResourceID("barfoo")__		@SuppressWarnings("unchecked")_		HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		ScheduledExecutor scheduledExecutor = mock(ScheduledExecutor.class)__		ScheduledFuture<?> scheduledFuture = mock(ScheduledFuture.class)___		doReturn(scheduledFuture).when(scheduledExecutor).schedule(any(Runnable.class), anyLong(), any(TimeUnit.class))___		Object expectedObject = new Object()___		when(heartbeatListener.retrievePayload(any(ResourceID.class))).thenReturn(CompletableFuture.completedFuture(expectedObject))___		HeartbeatManagerImpl<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			ownResourceID,_			heartbeatListener,_			Executors.directExecutor(),_			scheduledExecutor,_			LOG)___		@SuppressWarnings("unchecked")_		HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)___		heartbeatManager.monitorTarget(targetResourceID, heartbeatTarget)___		heartbeatManager.receiveHeartbeat(targetResourceID, expectedObject)___		verify(scheduledFuture, times(1)).cancel(true)__		verify(scheduledExecutor, times(2)).schedule(any(Runnable.class), eq(heartbeatTimeout), eq(TimeUnit.MILLISECONDS))__	};tests,that,the,heartbeat,monitors,are,updated,when,receiving,a,new,heartbeat,signal;test,public,void,test,heartbeat,monitor,update,long,heartbeat,timeout,1000l,resource,id,own,resource,id,new,resource,id,foobar,resource,id,target,resource,id,new,resource,id,barfoo,suppress,warnings,unchecked,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,scheduled,executor,scheduled,executor,mock,scheduled,executor,class,scheduled,future,scheduled,future,mock,scheduled,future,class,do,return,scheduled,future,when,scheduled,executor,schedule,any,runnable,class,any,long,any,time,unit,class,object,expected,object,new,object,when,heartbeat,listener,retrieve,payload,any,resource,id,class,then,return,completable,future,completed,future,expected,object,heartbeat,manager,impl,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,own,resource,id,heartbeat,listener,executors,direct,executor,scheduled,executor,log,suppress,warnings,unchecked,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,heartbeat,manager,monitor,target,target,resource,id,heartbeat,target,heartbeat,manager,receive,heartbeat,target,resource,id,expected,object,verify,scheduled,future,times,1,cancel,true,verify,scheduled,executor,times,2,schedule,any,runnable,class,eq,heartbeat,timeout,eq,time,unit,milliseconds
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1508501697;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1508858189;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1515177485;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1515481550;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1521554023;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1522681180;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1526494919;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
HeartbeatManagerTest -> @Test 	public void testLastHeartbeatFrom();1545300278;Tests that we can correctly retrieve the last heartbeat for registered targets.;@Test_	public void testLastHeartbeatFrom() {_		final long heartbeatTimeout = 100L__		final ResourceID resourceId = ResourceID.generate()__		@SuppressWarnings("unchecked")_		final HeartbeatListener<Object, Object> heartbeatListener = mock(HeartbeatListener.class)__		@SuppressWarnings("unchecked")_		final HeartbeatTarget<Object> heartbeatTarget = mock(HeartbeatTarget.class)__		final ResourceID target = ResourceID.generate()___		HeartbeatManager<Object, Object> heartbeatManager = new HeartbeatManagerImpl<>(_			heartbeatTimeout,_			resourceId,_			heartbeatListener,_			Executors.directExecutor(),_			mock(ScheduledExecutor.class),_			LOG)___		try {_			heartbeatManager.monitorTarget(target, heartbeatTarget)___			assertEquals(0L, heartbeatManager.getLastHeartbeatFrom(target))___			final long currentTime = System.currentTimeMillis()___			heartbeatManager.receiveHeartbeat(target, null)___			assertTrue(heartbeatManager.getLastHeartbeatFrom(target) >= currentTime)__		} finally {_			heartbeatManager.stop()__		}_	};tests,that,we,can,correctly,retrieve,the,last,heartbeat,for,registered,targets;test,public,void,test,last,heartbeat,from,final,long,heartbeat,timeout,100l,final,resource,id,resource,id,resource,id,generate,suppress,warnings,unchecked,final,heartbeat,listener,object,object,heartbeat,listener,mock,heartbeat,listener,class,suppress,warnings,unchecked,final,heartbeat,target,object,heartbeat,target,mock,heartbeat,target,class,final,resource,id,target,resource,id,generate,heartbeat,manager,object,object,heartbeat,manager,new,heartbeat,manager,impl,heartbeat,timeout,resource,id,heartbeat,listener,executors,direct,executor,mock,scheduled,executor,class,log,try,heartbeat,manager,monitor,target,target,heartbeat,target,assert,equals,0l,heartbeat,manager,get,last,heartbeat,from,target,final,long,current,time,system,current,time,millis,heartbeat,manager,receive,heartbeat,target,null,assert,true,heartbeat,manager,get,last,heartbeat,from,target,current,time,finally,heartbeat,manager,stop
