# id;timestamp;commentText;codeText;commentWords;codeWords
InputChannelTestUtils -> public static Buffer createMockBuffer(int size);1480624969;Creates a simple Buffer that is not recycled (never will be) of the given size.;public static Buffer createMockBuffer(int size) {_		final Buffer mockBuffer = mock(Buffer.class)__		when(mockBuffer.isBuffer()).thenReturn(true)__		when(mockBuffer.getSize()).thenReturn(size)__		when(mockBuffer.isRecycled()).thenReturn(false)___		return mockBuffer__	};creates,a,simple,buffer,that,is,not,recycled,never,will,be,of,the,given,size;public,static,buffer,create,mock,buffer,int,size,final,buffer,mock,buffer,mock,buffer,class,when,mock,buffer,is,buffer,then,return,true,when,mock,buffer,get,size,then,return,size,when,mock,buffer,is,recycled,then,return,false,return,mock,buffer
InputChannelTestUtils -> public static Buffer createMockBuffer(int size);1493724918;Creates a simple Buffer that is not recycled (never will be) of the given size.;public static Buffer createMockBuffer(int size) {_		final Buffer mockBuffer = mock(Buffer.class)__		when(mockBuffer.isBuffer()).thenReturn(true)__		when(mockBuffer.getSize()).thenReturn(size)__		when(mockBuffer.isRecycled()).thenReturn(false)___		return mockBuffer__	};creates,a,simple,buffer,that,is,not,recycled,never,will,be,of,the,given,size;public,static,buffer,create,mock,buffer,int,size,final,buffer,mock,buffer,mock,buffer,class,when,mock,buffer,is,buffer,then,return,true,when,mock,buffer,get,size,then,return,size,when,mock,buffer,is,recycled,then,return,false,return,mock,buffer
InputChannelTestUtils -> public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception;1480624969;Creates a result partition manager that ignores all IDs, and simply returns the given_subpartitions in sequence.;public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {__		final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {__			private int num = 0___			@Override_			public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {_				BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[3]__				return sources[num++].createReadView(null, channel)__			}_		}___		ResultPartitionManager manager = mock(ResultPartitionManager.class)__		when(manager.createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferProvider.class), any(BufferAvailabilityListener.class)))_				.thenAnswer(viewCreator)___		return manager__	};creates,a,result,partition,manager,that,ignores,all,ids,and,simply,returns,the,given,subpartitions,in,sequence;public,static,result,partition,manager,create,result,partition,manager,final,result,subpartition,sources,throws,exception,final,answer,result,subpartition,view,view,creator,new,answer,result,subpartition,view,private,int,num,0,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,throws,throwable,buffer,availability,listener,channel,buffer,availability,listener,invocation,get,arguments,3,return,sources,num,create,read,view,null,channel,result,partition,manager,manager,mock,result,partition,manager,class,when,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,provider,class,any,buffer,availability,listener,class,then,answer,view,creator,return,manager
InputChannelTestUtils -> public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception;1493724918;Creates a result partition manager that ignores all IDs, and simply returns the given_subpartitions in sequence.;public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {__		final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {__			private int num = 0___			@Override_			public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {_				BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2]__				return sources[num++].createReadView(channel)__			}_		}___		ResultPartitionManager manager = mock(ResultPartitionManager.class)__		when(manager.createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_				.thenAnswer(viewCreator)___		return manager__	};creates,a,result,partition,manager,that,ignores,all,ids,and,simply,returns,the,given,subpartitions,in,sequence;public,static,result,partition,manager,create,result,partition,manager,final,result,subpartition,sources,throws,exception,final,answer,result,subpartition,view,view,creator,new,answer,result,subpartition,view,private,int,num,0,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,throws,throwable,buffer,availability,listener,channel,buffer,availability,listener,invocation,get,arguments,2,return,sources,num,create,read,view,channel,result,partition,manager,manager,mock,result,partition,manager,class,when,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,view,creator,return,manager
InputChannelTestUtils -> public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception;1516285456;Creates a result partition manager that ignores all IDs, and simply returns the given_subpartitions in sequence.;public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {__		final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {__			private int num = 0___			@Override_			public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {_				BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2]__				return sources[num++].createReadView(channel)__			}_		}___		ResultPartitionManager manager = mock(ResultPartitionManager.class)__		when(manager.createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_				.thenAnswer(viewCreator)___		return manager__	};creates,a,result,partition,manager,that,ignores,all,ids,and,simply,returns,the,given,subpartitions,in,sequence;public,static,result,partition,manager,create,result,partition,manager,final,result,subpartition,sources,throws,exception,final,answer,result,subpartition,view,view,creator,new,answer,result,subpartition,view,private,int,num,0,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,throws,throwable,buffer,availability,listener,channel,buffer,availability,listener,invocation,get,arguments,2,return,sources,num,create,read,view,channel,result,partition,manager,manager,mock,result,partition,manager,class,when,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,view,creator,return,manager
InputChannelTestUtils -> public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception;1524407315;Creates a result partition manager that ignores all IDs, and simply returns the given_subpartitions in sequence.;public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {__		final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {__			private int num = 0___			@Override_			public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {_				BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2]__				return sources[num++].createReadView(channel)__			}_		}___		ResultPartitionManager manager = mock(ResultPartitionManager.class)__		when(manager.createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_				.thenAnswer(viewCreator)___		return manager__	};creates,a,result,partition,manager,that,ignores,all,ids,and,simply,returns,the,given,subpartitions,in,sequence;public,static,result,partition,manager,create,result,partition,manager,final,result,subpartition,sources,throws,exception,final,answer,result,subpartition,view,view,creator,new,answer,result,subpartition,view,private,int,num,0,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,throws,throwable,buffer,availability,listener,channel,buffer,availability,listener,invocation,get,arguments,2,return,sources,num,create,read,view,channel,result,partition,manager,manager,mock,result,partition,manager,class,when,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,view,creator,return,manager
InputChannelTestUtils -> public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception;1537385496;Creates a result partition manager that ignores all IDs, and simply returns the given_subpartitions in sequence.;public static ResultPartitionManager createResultPartitionManager(final ResultSubpartition[] sources) throws Exception {__		final Answer<ResultSubpartitionView> viewCreator = new Answer<ResultSubpartitionView>() {__			private int num = 0___			@Override_			public ResultSubpartitionView answer(InvocationOnMock invocation) throws Throwable {_				BufferAvailabilityListener channel = (BufferAvailabilityListener) invocation.getArguments()[2]__				return sources[num++].createReadView(channel)__			}_		}___		ResultPartitionManager manager = mock(ResultPartitionManager.class)__		when(manager.createSubpartitionView(_				any(ResultPartitionID.class), anyInt(), any(BufferAvailabilityListener.class)))_				.thenAnswer(viewCreator)___		return manager__	};creates,a,result,partition,manager,that,ignores,all,ids,and,simply,returns,the,given,subpartitions,in,sequence;public,static,result,partition,manager,create,result,partition,manager,final,result,subpartition,sources,throws,exception,final,answer,result,subpartition,view,view,creator,new,answer,result,subpartition,view,private,int,num,0,override,public,result,subpartition,view,answer,invocation,on,mock,invocation,throws,throwable,buffer,availability,listener,channel,buffer,availability,listener,invocation,get,arguments,2,return,sources,num,create,read,view,channel,result,partition,manager,manager,mock,result,partition,manager,class,when,manager,create,subpartition,view,any,result,partition,id,class,any,int,any,buffer,availability,listener,class,then,answer,view,creator,return,manager
InputChannelTestUtils -> private InputChannelTestUtils();1480624969;This class is not meant to be instantiated;private InputChannelTestUtils() {};this,class,is,not,meant,to,be,instantiated;private,input,channel,test,utils
InputChannelTestUtils -> private InputChannelTestUtils();1493724918;This class is not meant to be instantiated;private InputChannelTestUtils() {};this,class,is,not,meant,to,be,instantiated;private,input,channel,test,utils
InputChannelTestUtils -> private InputChannelTestUtils();1516285456;This class is not meant to be instantiated;private InputChannelTestUtils() {};this,class,is,not,meant,to,be,instantiated;private,input,channel,test,utils
InputChannelTestUtils -> private InputChannelTestUtils();1524407315;This class is not meant to be instantiated;private InputChannelTestUtils() {};this,class,is,not,meant,to,be,instantiated;private,input,channel,test,utils
InputChannelTestUtils -> private InputChannelTestUtils();1537385496;This class is not meant to be instantiated.;private InputChannelTestUtils() {};this,class,is,not,meant,to,be,instantiated;private,input,channel,test,utils
