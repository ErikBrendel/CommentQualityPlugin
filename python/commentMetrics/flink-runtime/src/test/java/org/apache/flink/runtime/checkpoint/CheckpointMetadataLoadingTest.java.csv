# id;timestamp;commentText;codeText;commentWords;codeWords
CheckpointMetadataLoadingTest -> @Test 	public void testLoadAndValidateSavepoint() throws Exception;1516295283;Tests loading and validation of savepoints with correct setup,_parallelism mismatch, and a missing task.;@Test_	public void testLoadAndValidateSavepoint() throws Exception {_		File tmp = tmpFolder.newFolder()___		int parallelism = 128128__		long checkpointId = Integer.MAX_VALUE + 123123L__		JobVertexID jobVertexID = new JobVertexID()__		OperatorID operatorID = OperatorID.fromJobVertexID(jobVertexID)___		OperatorSubtaskState subtaskState = new OperatorSubtaskState(_				new OperatorStateHandle(Collections.emptyMap(), new ByteStreamStateHandle("testHandler", new byte[0])),_				null,_				null,_				null)___		OperatorState state = new OperatorState(operatorID, parallelism, parallelism)__		state.putState(0, subtaskState)___		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(operatorID, state)___		JobID jobId = new JobID()___		_		final SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values(), Collections.emptyList())__		final StreamStateHandle serializedMetadata___		try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {_			Checkpoints.storeCheckpointMetadata(savepoint, os)__			serializedMetadata = new ByteStreamStateHandle("checkpoint", os.toByteArray())__		}__		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class)__		when(vertex.getParallelism()).thenReturn(parallelism)__		when(vertex.getMaxParallelism()).thenReturn(parallelism)__		when(vertex.getOperatorIDs()).thenReturn(Collections.singletonList(operatorID))___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexID, vertex)___		ClassLoader ucl = Thread.currentThread().getContextClassLoader()___		_		CompletedCheckpoint loaded = Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)___		assertEquals(jobId, loaded.getJobId())__		assertEquals(checkpointId, loaded.getCheckpointID())___		_		when(vertex.getMaxParallelism()).thenReturn(222)__		when(vertex.isMaxParallelismConfigured()).thenReturn(true)___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("Max parallelism mismatch"))__		}__		_		assertNotNull(tasks.remove(jobVertexID))___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("allowNonRestoredState"))__		}__		_		Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, true)__	};tests,loading,and,validation,of,savepoints,with,correct,setup,parallelism,mismatch,and,a,missing,task;test,public,void,test,load,and,validate,savepoint,throws,exception,file,tmp,tmp,folder,new,folder,int,parallelism,128128,long,checkpoint,id,integer,123123l,job,vertex,id,job,vertex,id,new,job,vertex,id,operator,id,operator,id,operator,id,from,job,vertex,id,job,vertex,id,operator,subtask,state,subtask,state,new,operator,subtask,state,new,operator,state,handle,collections,empty,map,new,byte,stream,state,handle,test,handler,new,byte,0,null,null,null,operator,state,state,new,operator,state,operator,id,parallelism,parallelism,state,put,state,0,subtask,state,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,operator,id,state,job,id,job,id,new,job,id,final,savepoint,v2,savepoint,new,savepoint,v2,checkpoint,id,task,states,values,collections,empty,list,final,stream,state,handle,serialized,metadata,try,byte,array,output,stream,os,new,byte,array,output,stream,checkpoints,store,checkpoint,metadata,savepoint,os,serialized,metadata,new,byte,stream,state,handle,checkpoint,os,to,byte,array,execution,job,vertex,vertex,mock,execution,job,vertex,class,when,vertex,get,parallelism,then,return,parallelism,when,vertex,get,max,parallelism,then,return,parallelism,when,vertex,get,operator,ids,then,return,collections,singleton,list,operator,id,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id,vertex,class,loader,ucl,thread,current,thread,get,context,class,loader,completed,checkpoint,loaded,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,assert,equals,job,id,loaded,get,job,id,assert,equals,checkpoint,id,loaded,get,checkpoint,id,when,vertex,get,max,parallelism,then,return,222,when,vertex,is,max,parallelism,configured,then,return,true,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,max,parallelism,mismatch,assert,not,null,tasks,remove,job,vertex,id,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,allow,non,restored,state,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,true
CheckpointMetadataLoadingTest -> @Test 	public void testLoadAndValidateSavepoint() throws Exception;1516626397;Tests loading and validation of savepoints with correct setup,_parallelism mismatch, and a missing task.;@Test_	public void testLoadAndValidateSavepoint() throws Exception {_		File tmp = tmpFolder.newFolder()___		int parallelism = 128128__		long checkpointId = Integer.MAX_VALUE + 123123L__		JobVertexID jobVertexID = new JobVertexID()__		OperatorID operatorID = OperatorID.fromJobVertexID(jobVertexID)___		OperatorSubtaskState subtaskState = new OperatorSubtaskState(_				new OperatorStateHandle(_				Collections.emptyMap(),_				new ByteStreamStateHandle("testHandler", new byte[0])),_				null,_				null,_				null)___		OperatorState state = new OperatorState(operatorID, parallelism, parallelism)__		state.putState(0, subtaskState)___		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(operatorID, state)___		JobID jobId = new JobID()___		_		final SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values(), Collections.emptyList())__		final StreamStateHandle serializedMetadata___		try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {_			Checkpoints.storeCheckpointMetadata(savepoint, os)__			serializedMetadata = new ByteStreamStateHandle("checkpoint", os.toByteArray())__		}__		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class)__		when(vertex.getParallelism()).thenReturn(parallelism)__		when(vertex.getMaxParallelism()).thenReturn(parallelism)__		when(vertex.getOperatorIDs()).thenReturn(Collections.singletonList(operatorID))___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexID, vertex)___		ClassLoader ucl = Thread.currentThread().getContextClassLoader()___		_		CompletedCheckpoint loaded = Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)___		assertEquals(jobId, loaded.getJobId())__		assertEquals(checkpointId, loaded.getCheckpointID())___		_		when(vertex.getMaxParallelism()).thenReturn(222)__		when(vertex.isMaxParallelismConfigured()).thenReturn(true)___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("Max parallelism mismatch"))__		}__		_		assertNotNull(tasks.remove(jobVertexID))___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("allowNonRestoredState"))__		}__		_		Checkpoints.loadAndValidateCheckpoint(jobId, tasks, "fake/path", serializedMetadata, ucl, true)__	};tests,loading,and,validation,of,savepoints,with,correct,setup,parallelism,mismatch,and,a,missing,task;test,public,void,test,load,and,validate,savepoint,throws,exception,file,tmp,tmp,folder,new,folder,int,parallelism,128128,long,checkpoint,id,integer,123123l,job,vertex,id,job,vertex,id,new,job,vertex,id,operator,id,operator,id,operator,id,from,job,vertex,id,job,vertex,id,operator,subtask,state,subtask,state,new,operator,subtask,state,new,operator,state,handle,collections,empty,map,new,byte,stream,state,handle,test,handler,new,byte,0,null,null,null,operator,state,state,new,operator,state,operator,id,parallelism,parallelism,state,put,state,0,subtask,state,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,operator,id,state,job,id,job,id,new,job,id,final,savepoint,v2,savepoint,new,savepoint,v2,checkpoint,id,task,states,values,collections,empty,list,final,stream,state,handle,serialized,metadata,try,byte,array,output,stream,os,new,byte,array,output,stream,checkpoints,store,checkpoint,metadata,savepoint,os,serialized,metadata,new,byte,stream,state,handle,checkpoint,os,to,byte,array,execution,job,vertex,vertex,mock,execution,job,vertex,class,when,vertex,get,parallelism,then,return,parallelism,when,vertex,get,max,parallelism,then,return,parallelism,when,vertex,get,operator,ids,then,return,collections,singleton,list,operator,id,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id,vertex,class,loader,ucl,thread,current,thread,get,context,class,loader,completed,checkpoint,loaded,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,assert,equals,job,id,loaded,get,job,id,assert,equals,checkpoint,id,loaded,get,checkpoint,id,when,vertex,get,max,parallelism,then,return,222,when,vertex,is,max,parallelism,configured,then,return,true,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,max,parallelism,mismatch,assert,not,null,tasks,remove,job,vertex,id,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,allow,non,restored,state,checkpoints,load,and,validate,checkpoint,job,id,tasks,fake,path,serialized,metadata,ucl,true
CheckpointMetadataLoadingTest -> @Test 	public void testLoadAndValidateSavepoint() throws Exception;1517489696;Tests loading and validation of savepoints with correct setup,_parallelism mismatch, and a missing task.;@Test_	public void testLoadAndValidateSavepoint() throws Exception {_		File tmp = tmpFolder.newFolder()___		int parallelism = 128128__		long checkpointId = Integer.MAX_VALUE + 123123L__		JobVertexID jobVertexID = new JobVertexID()__		OperatorID operatorID = OperatorID.fromJobVertexID(jobVertexID)___		OperatorSubtaskState subtaskState = new OperatorSubtaskState(_				new OperatorStateHandle(_				Collections.emptyMap(),_				new ByteStreamStateHandle("testHandler", new byte[0])),_				null,_				null,_				null)___		OperatorState state = new OperatorState(operatorID, parallelism, parallelism)__		state.putState(0, subtaskState)___		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(operatorID, state)___		JobID jobId = new JobID()___		_		final SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values(), Collections.emptyList())__		final StreamStateHandle serializedMetadata___		try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {_			Checkpoints.storeCheckpointMetadata(savepoint, os)__			serializedMetadata = new ByteStreamStateHandle("checkpoint", os.toByteArray())__		}__		final CompletedCheckpointStorageLocation storageLocation = new TestCompletedCheckpointStorageLocation(_				serializedMetadata, "dummy/pointer")___		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class)__		when(vertex.getParallelism()).thenReturn(parallelism)__		when(vertex.getMaxParallelism()).thenReturn(parallelism)__		when(vertex.getOperatorIDs()).thenReturn(Collections.singletonList(operatorID))___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexID, vertex)___		ClassLoader ucl = Thread.currentThread().getContextClassLoader()___		_		CompletedCheckpoint loaded = Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)___		assertEquals(jobId, loaded.getJobId())__		assertEquals(checkpointId, loaded.getCheckpointID())___		_		when(vertex.getMaxParallelism()).thenReturn(222)__		when(vertex.isMaxParallelismConfigured()).thenReturn(true)___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("Max parallelism mismatch"))__		}__		_		assertNotNull(tasks.remove(jobVertexID))___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("allowNonRestoredState"))__		}__		_		Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, true)__	};tests,loading,and,validation,of,savepoints,with,correct,setup,parallelism,mismatch,and,a,missing,task;test,public,void,test,load,and,validate,savepoint,throws,exception,file,tmp,tmp,folder,new,folder,int,parallelism,128128,long,checkpoint,id,integer,123123l,job,vertex,id,job,vertex,id,new,job,vertex,id,operator,id,operator,id,operator,id,from,job,vertex,id,job,vertex,id,operator,subtask,state,subtask,state,new,operator,subtask,state,new,operator,state,handle,collections,empty,map,new,byte,stream,state,handle,test,handler,new,byte,0,null,null,null,operator,state,state,new,operator,state,operator,id,parallelism,parallelism,state,put,state,0,subtask,state,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,operator,id,state,job,id,job,id,new,job,id,final,savepoint,v2,savepoint,new,savepoint,v2,checkpoint,id,task,states,values,collections,empty,list,final,stream,state,handle,serialized,metadata,try,byte,array,output,stream,os,new,byte,array,output,stream,checkpoints,store,checkpoint,metadata,savepoint,os,serialized,metadata,new,byte,stream,state,handle,checkpoint,os,to,byte,array,final,completed,checkpoint,storage,location,storage,location,new,test,completed,checkpoint,storage,location,serialized,metadata,dummy,pointer,execution,job,vertex,vertex,mock,execution,job,vertex,class,when,vertex,get,parallelism,then,return,parallelism,when,vertex,get,max,parallelism,then,return,parallelism,when,vertex,get,operator,ids,then,return,collections,singleton,list,operator,id,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id,vertex,class,loader,ucl,thread,current,thread,get,context,class,loader,completed,checkpoint,loaded,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,assert,equals,job,id,loaded,get,job,id,assert,equals,checkpoint,id,loaded,get,checkpoint,id,when,vertex,get,max,parallelism,then,return,222,when,vertex,is,max,parallelism,configured,then,return,true,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,max,parallelism,mismatch,assert,not,null,tasks,remove,job,vertex,id,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,allow,non,restored,state,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,true
CheckpointMetadataLoadingTest -> @Test 	public void testLoadAndValidateSavepoint() throws Exception;1519568061;Tests loading and validation of savepoints with correct setup,_parallelism mismatch, and a missing task.;@Test_	public void testLoadAndValidateSavepoint() throws Exception {_		File tmp = tmpFolder.newFolder()___		int parallelism = 128128__		long checkpointId = Integer.MAX_VALUE + 123123L__		JobVertexID jobVertexID = new JobVertexID()__		OperatorID operatorID = OperatorID.fromJobVertexID(jobVertexID)___		OperatorSubtaskState subtaskState = new OperatorSubtaskState(_				new OperatorStreamStateHandle(_				Collections.emptyMap(),_				new ByteStreamStateHandle("testHandler", new byte[0])),_				null,_				null,_				null)___		OperatorState state = new OperatorState(operatorID, parallelism, parallelism)__		state.putState(0, subtaskState)___		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(operatorID, state)___		JobID jobId = new JobID()___		_		final SavepointV2 savepoint = new SavepointV2(checkpointId, taskStates.values(), Collections.emptyList())__		final StreamStateHandle serializedMetadata___		try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {_			Checkpoints.storeCheckpointMetadata(savepoint, os)__			serializedMetadata = new ByteStreamStateHandle("checkpoint", os.toByteArray())__		}__		final CompletedCheckpointStorageLocation storageLocation = new TestCompletedCheckpointStorageLocation(_				serializedMetadata, "dummy/pointer")___		ExecutionJobVertex vertex = mock(ExecutionJobVertex.class)__		when(vertex.getParallelism()).thenReturn(parallelism)__		when(vertex.getMaxParallelism()).thenReturn(parallelism)__		when(vertex.getOperatorIDs()).thenReturn(Collections.singletonList(operatorID))___		Map<JobVertexID, ExecutionJobVertex> tasks = new HashMap<>()__		tasks.put(jobVertexID, vertex)___		ClassLoader ucl = Thread.currentThread().getContextClassLoader()___		_		CompletedCheckpoint loaded = Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)___		assertEquals(jobId, loaded.getJobId())__		assertEquals(checkpointId, loaded.getCheckpointID())___		_		when(vertex.getMaxParallelism()).thenReturn(222)__		when(vertex.isMaxParallelismConfigured()).thenReturn(true)___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("Max parallelism mismatch"))__		}__		_		assertNotNull(tasks.remove(jobVertexID))___		try {_			Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, false)__			fail("Did not throw expected Exception")__		} catch (IllegalStateException expected) {_			assertTrue(expected.getMessage().contains("allowNonRestoredState"))__		}__		_		Checkpoints.loadAndValidateCheckpoint(jobId, tasks, storageLocation, ucl, true)__	};tests,loading,and,validation,of,savepoints,with,correct,setup,parallelism,mismatch,and,a,missing,task;test,public,void,test,load,and,validate,savepoint,throws,exception,file,tmp,tmp,folder,new,folder,int,parallelism,128128,long,checkpoint,id,integer,123123l,job,vertex,id,job,vertex,id,new,job,vertex,id,operator,id,operator,id,operator,id,from,job,vertex,id,job,vertex,id,operator,subtask,state,subtask,state,new,operator,subtask,state,new,operator,stream,state,handle,collections,empty,map,new,byte,stream,state,handle,test,handler,new,byte,0,null,null,null,operator,state,state,new,operator,state,operator,id,parallelism,parallelism,state,put,state,0,subtask,state,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,operator,id,state,job,id,job,id,new,job,id,final,savepoint,v2,savepoint,new,savepoint,v2,checkpoint,id,task,states,values,collections,empty,list,final,stream,state,handle,serialized,metadata,try,byte,array,output,stream,os,new,byte,array,output,stream,checkpoints,store,checkpoint,metadata,savepoint,os,serialized,metadata,new,byte,stream,state,handle,checkpoint,os,to,byte,array,final,completed,checkpoint,storage,location,storage,location,new,test,completed,checkpoint,storage,location,serialized,metadata,dummy,pointer,execution,job,vertex,vertex,mock,execution,job,vertex,class,when,vertex,get,parallelism,then,return,parallelism,when,vertex,get,max,parallelism,then,return,parallelism,when,vertex,get,operator,ids,then,return,collections,singleton,list,operator,id,map,job,vertex,id,execution,job,vertex,tasks,new,hash,map,tasks,put,job,vertex,id,vertex,class,loader,ucl,thread,current,thread,get,context,class,loader,completed,checkpoint,loaded,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,assert,equals,job,id,loaded,get,job,id,assert,equals,checkpoint,id,loaded,get,checkpoint,id,when,vertex,get,max,parallelism,then,return,222,when,vertex,is,max,parallelism,configured,then,return,true,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,max,parallelism,mismatch,assert,not,null,tasks,remove,job,vertex,id,try,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,false,fail,did,not,throw,expected,exception,catch,illegal,state,exception,expected,assert,true,expected,get,message,contains,allow,non,restored,state,checkpoints,load,and,validate,checkpoint,job,id,tasks,storage,location,ucl,true
