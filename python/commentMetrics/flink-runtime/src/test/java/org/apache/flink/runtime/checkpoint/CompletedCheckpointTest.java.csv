# id;timestamp;commentText;codeText;commentWords;codeWords
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1476432306;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, externalPath)___			checkpoint.discard(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, null)___			checkpoint.discard(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,external,path,checkpoint,discard,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,null,checkpoint,discard,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1484038132;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, externalPath)___			checkpoint.discard(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, null)___			checkpoint.discard(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,external,path,checkpoint,discard,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,null,checkpoint,discard,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1485790402;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, externalPath)___			checkpoint.discard(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props, null)___			checkpoint.discard(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,external,path,checkpoint,discard,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,null,checkpoint,discard,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1488304750;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			checkpoint.discard(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props)___			checkpoint.discard(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,checkpoint,discard,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,checkpoint,discard,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1492867556;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStates(sharedStateRegistry)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())__			verify(state, times(0)).unregisterSharedStates(sharedStateRegistry)___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1, new HashMap<>(taskStates), props)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(1)).discardState()__			verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,0,discard,state,assert,equals,true,file,exists,verify,state,times,0,unregister,shared,states,shared,state,registry,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,props,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1493236605;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(taskStates),_					Collections.<MasterState>emptyList(),_					props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStates(sharedStateRegistry)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())__			verify(state, times(0)).unregisterSharedStates(sharedStateRegistry)___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(taskStates),_					Collections.<MasterState>emptyList(),_					props)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(1)).discardState()__			verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,collections,master,state,empty,list,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,0,discard,state,assert,equals,true,file,exists,verify,state,times,0,unregister,shared,states,shared,state,registry,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,collections,master,state,empty,list,props,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1493403095;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStates(sharedStateRegistry)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())__			verify(state, times(0)).unregisterSharedStates(sharedStateRegistry)___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					null,_					null)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(1)).discardState()__			verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,0,discard,state,assert,equals,true,file,exists,verify,state,times,0,unregister,shared,states,shared,state,registry,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,null,null,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1495184252;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStates(sharedStateRegistry)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					null,_					null)___			checkpoint.discardOnShutdown(status, sharedStateRegistry)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,null,null,checkpoint,discard,on,shutdown,status,shared,state,registry,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1495287945;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)___			checkpoint.discardOnShutdown(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					null,_					null)___			checkpoint.discardOnShutdown(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,null,null,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1502802710;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		File file = tmpFolder.newFile()__		String externalPath = file.getAbsolutePath()___		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		for (JobStatus status : terminalStates) {_			Mockito.reset(state)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					new FileStateHandle(new Path(file.toURI()), file.length()),_					externalPath)___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)___			checkpoint.discardOnShutdown(status)__			verify(state, times(0)).discardState()__			assertEquals(true, file.exists())___			_			props = new CheckpointProperties(false, false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					null,_					null)___			checkpoint.discardOnShutdown(status)__			verify(state, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,file,file,tmp,folder,new,file,string,external,path,file,get,absolute,path,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,for,job,status,status,terminal,states,mockito,reset,state,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,new,file,state,handle,new,path,file,to,uri,file,length,external,path,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,assert,equals,true,file,exists,props,new,checkpoint,properties,false,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,null,null,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1516295283;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		for (JobStatus status : terminalStates) {__			OperatorState state = mock(OperatorState.class)__			Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__			operatorStates.put(new OperatorID(), state)___			StreamStateHandle metadataHandle = mock(StreamStateHandle.class)___			_			CheckpointProperties props = new CheckpointProperties(false, true, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					metadataHandle,_					"mock://some/pointer")___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)___			checkpoint.discardOnShutdown(status)__			verify(state, times(0)).discardState()__			verify(metadataHandle, times(0)).discardState()___			_			props = new CheckpointProperties(false, false, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					metadataHandle,_					"pointer")___			checkpoint.discardOnShutdown(status)__			verify(state, times(1)).discardState()__			verify(metadataHandle, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,for,job,status,status,terminal,states,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,stream,state,handle,metadata,handle,mock,stream,state,handle,class,checkpoint,properties,props,new,checkpoint,properties,false,true,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,metadata,handle,mock,some,pointer,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,verify,metadata,handle,times,0,discard,state,props,new,checkpoint,properties,false,false,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,metadata,handle,pointer,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state,verify,metadata,handle,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1517489694;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		for (JobStatus status : terminalStates) {__			OperatorState state = mock(OperatorState.class)__			Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__			operatorStates.put(new OperatorID(), state)___			StreamStateHandle metadataHandle = mock(StreamStateHandle.class)___			_			CheckpointProperties props = new CheckpointProperties(false, CheckpointType.SAVEPOINT, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					metadataHandle,_					"mock://some/pointer")___			SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__			checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)___			checkpoint.discardOnShutdown(status)__			verify(state, times(0)).discardState()__			verify(metadataHandle, times(0)).discardState()___			_			props = new CheckpointProperties(false, CheckpointType.CHECKPOINT, true, true, true, true, true)__			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.<MasterState>emptyList(),_					props,_					metadataHandle,_					"pointer")___			checkpoint.discardOnShutdown(status)__			verify(state, times(1)).discardState()__			verify(metadataHandle, times(1)).discardState()__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,for,job,status,status,terminal,states,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,stream,state,handle,metadata,handle,mock,stream,state,handle,class,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,savepoint,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,metadata,handle,mock,some,pointer,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,verify,metadata,handle,times,0,discard,state,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,props,metadata,handle,pointer,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state,verify,metadata,handle,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1517489696;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		for (JobStatus status : terminalStates) {__			OperatorState state = mock(OperatorState.class)__			Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__			operatorStates.put(new OperatorID(), state)___			EmptyStreamStateHandle retainedHandle = new EmptyStreamStateHandle()__			TestCompletedCheckpointStorageLocation retainedLocation =_					new TestCompletedCheckpointStorageLocation(retainedHandle, "ptr")___			_			CheckpointProperties retainProps = new CheckpointProperties(false, CheckpointType.CHECKPOINT, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.emptyList(),_					retainProps,_					retainedLocation)___			checkpoint.discardOnShutdown(status)___			verify(state, times(0)).discardState()__			assertFalse(retainedLocation.isDisposed())__			assertFalse(retainedHandle.isDisposed())___			_			EmptyStreamStateHandle discardHandle = new EmptyStreamStateHandle()__			TestCompletedCheckpointStorageLocation discardLocation =_					new TestCompletedCheckpointStorageLocation(discardHandle, "ptr")___			_			CheckpointProperties discardProps = new CheckpointProperties(false, CheckpointType.CHECKPOINT, true, true, true, true, true)___			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.emptyList(),_					discardProps,_					discardLocation)___			checkpoint.discardOnShutdown(status)___			verify(state, times(1)).discardState()__			assertTrue(discardLocation.isDisposed())__			assertTrue(discardHandle.isDisposed())__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,for,job,status,status,terminal,states,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,empty,stream,state,handle,retained,handle,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,retained,location,new,test,completed,checkpoint,storage,location,retained,handle,ptr,checkpoint,properties,retain,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,empty,list,retain,props,retained,location,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,assert,false,retained,location,is,disposed,assert,false,retained,handle,is,disposed,empty,stream,state,handle,discard,handle,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,discard,location,new,test,completed,checkpoint,storage,location,discard,handle,ptr,checkpoint,properties,discard,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,empty,list,discard,props,discard,location,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state,assert,true,discard,location,is,disposed,assert,true,discard,handle,is,disposed
CompletedCheckpointTest -> @Test 	public void testCleanUpOnShutdown() throws Exception;1520429742;Tests that the garbage collection properties are respected when shutting down.;@Test_	public void testCleanUpOnShutdown() throws Exception {_		JobStatus[] terminalStates = new JobStatus[] {_				JobStatus.FINISHED, JobStatus.CANCELED, JobStatus.FAILED, JobStatus.SUSPENDED_		}___		for (JobStatus status : terminalStates) {__			OperatorState state = mock(OperatorState.class)__			Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__			operatorStates.put(new OperatorID(), state)___			EmptyStreamStateHandle retainedHandle = new EmptyStreamStateHandle()__			TestCompletedCheckpointStorageLocation retainedLocation =_					new TestCompletedCheckpointStorageLocation(retainedHandle, "ptr")___			_			CheckpointProperties retainProps = new CheckpointProperties(false, CheckpointType.CHECKPOINT, false, false, false, false, false)__			CompletedCheckpoint checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.emptyList(),_					retainProps,_					retainedLocation)___			checkpoint.discardOnShutdown(status)___			verify(state, times(0)).discardState()__			assertFalse(retainedLocation.isDisposed())__			assertFalse(retainedHandle.isDisposed())___			_			EmptyStreamStateHandle discardHandle = new EmptyStreamStateHandle()__			TestCompletedCheckpointStorageLocation discardLocation =_					new TestCompletedCheckpointStorageLocation(discardHandle, "ptr")___			_			CheckpointProperties discardProps = new CheckpointProperties(false, CheckpointType.CHECKPOINT, true, true, true, true, true)___			checkpoint = new CompletedCheckpoint(_					new JobID(), 0, 0, 1,_					new HashMap<>(operatorStates),_					Collections.emptyList(),_					discardProps,_					discardLocation)___			checkpoint.discardOnShutdown(status)___			verify(state, times(1)).discardState()__			assertTrue(discardLocation.isDisposed())__			assertTrue(discardHandle.isDisposed())__		}_	};tests,that,the,garbage,collection,properties,are,respected,when,shutting,down;test,public,void,test,clean,up,on,shutdown,throws,exception,job,status,terminal,states,new,job,status,job,status,finished,job,status,canceled,job,status,failed,job,status,suspended,for,job,status,status,terminal,states,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,empty,stream,state,handle,retained,handle,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,retained,location,new,test,completed,checkpoint,storage,location,retained,handle,ptr,checkpoint,properties,retain,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,false,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,empty,list,retain,props,retained,location,checkpoint,discard,on,shutdown,status,verify,state,times,0,discard,state,assert,false,retained,location,is,disposed,assert,false,retained,handle,is,disposed,empty,stream,state,handle,discard,handle,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,discard,location,new,test,completed,checkpoint,storage,location,discard,handle,ptr,checkpoint,properties,discard,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,true,true,true,true,true,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,empty,list,discard,props,discard,location,checkpoint,discard,on,shutdown,status,verify,state,times,1,discard,state,assert,true,discard,location,is,disposed,assert,true,discard,handle,is,disposed
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1476432306;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, props, null)___		_		checkpoint.subsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,props,null,checkpoint,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1484038132;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, props, null)___		_		checkpoint.subsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,props,null,checkpoint,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1485790402;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, props, null)___		_		checkpoint.subsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,props,null,checkpoint,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1488304750;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, props)___		_		checkpoint.subsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,props,checkpoint,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1492867556;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, props)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStates(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume(sharedStateRegistry)___		verify(state, times(1)).discardState()__		verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,props,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1493236605;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				props)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStates(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume(sharedStateRegistry)___		verify(state, times(1)).discardState()__		verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,props,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1493403095;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				null,_				null)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStates(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume(sharedStateRegistry)___		verify(state, times(1)).discardState()__		verify(state, times(1)).unregisterSharedStates(sharedStateRegistry)__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,null,null,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,shared,state,registry,verify,state,times,1,discard,state,verify,state,times,1,unregister,shared,states,shared,state,registry
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1495184252;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				null,_				null)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStates(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume(sharedStateRegistry)___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,null,null,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,shared,state,registry,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1495287945;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				null,_				null)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,null,null,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1502802710;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				null,_				null)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,null,null,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1516295283;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		StreamStateHandle metadataHandle = mock(StreamStateHandle.class)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, false, discardSubsumed, true, true, true, true)__		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				metadataHandle,_				"some/mock/pointer")___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__		verify(metadataHandle).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,stream,state,handle,metadata,handle,mock,stream,state,handle,class,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,false,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,metadata,handle,some,mock,pointer,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state,verify,metadata,handle,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1517489694;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		StreamStateHandle metadataHandle = mock(StreamStateHandle.class)___		boolean discardSubsumed = true__		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.CHECKPOINT, discardSubsumed, true, true, true, true)___		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.<MasterState>emptyList(),_				props,_				metadataHandle,_				"some/mock/pointer")___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__		verify(metadataHandle).discardState()__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,stream,state,handle,metadata,handle,mock,stream,state,handle,class,boolean,discard,subsumed,true,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,discard,subsumed,true,true,true,true,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,master,state,empty,list,props,metadata,handle,some,mock,pointer,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state,verify,metadata,handle,discard,state
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1517489696;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		EmptyStreamStateHandle metadata = new EmptyStreamStateHandle()__		TestCompletedCheckpointStorageLocation location =_				new TestCompletedCheckpointStorageLocation(metadata, "ptr")___		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.CHECKPOINT, true, false, false, false, false)___		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.emptyList(),_				props,_				location)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__		assertTrue(location.isDisposed())__		assertTrue(metadata.isDisposed())__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,empty,stream,state,handle,metadata,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,location,new,test,completed,checkpoint,storage,location,metadata,ptr,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,true,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,empty,list,props,location,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state,assert,true,location,is,disposed,assert,true,metadata,is,disposed
CompletedCheckpointTest -> @Test 	public void testCleanUpOnSubsume() throws Exception;1520429742;Tests that the garbage collection properties are respected when subsuming checkpoints.;@Test_	public void testCleanUpOnSubsume() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		EmptyStreamStateHandle metadata = new EmptyStreamStateHandle()__		TestCompletedCheckpointStorageLocation location =_				new TestCompletedCheckpointStorageLocation(metadata, "ptr")___		CheckpointProperties props = new CheckpointProperties(false, CheckpointType.CHECKPOINT, true, false, false, false, false)___		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				operatorStates,_				Collections.emptyList(),_				props,_				location)___		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		checkpoint.registerSharedStatesAfterRestored(sharedStateRegistry)__		verify(state, times(1)).registerSharedStates(sharedStateRegistry)___		_		checkpoint.discardOnSubsume()___		verify(state, times(1)).discardState()__		assertTrue(location.isDisposed())__		assertTrue(metadata.isDisposed())__	};tests,that,the,garbage,collection,properties,are,respected,when,subsuming,checkpoints;test,public,void,test,clean,up,on,subsume,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,empty,stream,state,handle,metadata,new,empty,stream,state,handle,test,completed,checkpoint,storage,location,location,new,test,completed,checkpoint,storage,location,metadata,ptr,checkpoint,properties,props,new,checkpoint,properties,false,checkpoint,type,checkpoint,true,false,false,false,false,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,operator,states,collections,empty,list,props,location,shared,state,registry,shared,state,registry,new,shared,state,registry,checkpoint,register,shared,states,after,restored,shared,state,registry,verify,state,times,1,register,shared,states,shared,state,registry,checkpoint,discard,on,subsume,verify,state,times,1,discard,state,assert,true,location,is,disposed,assert,true,metadata,is,disposed
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1484038132;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(taskStates),_			CheckpointProperties.forStandardCheckpoint(),_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discard(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,checkpoint,properties,for,standard,checkpoint,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1485790402;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(taskStates),_			CheckpointProperties.forStandardCheckpoint(),_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discard(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,checkpoint,properties,for,standard,checkpoint,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1488304750;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(taskStates),_			CheckpointProperties.forStandardCheckpoint())___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discard(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,checkpoint,properties,for,standard,checkpoint,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1492867556;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(taskStates),_			CheckpointProperties.forStandardCheckpoint())___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED, new SharedStateRegistry())__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,checkpoint,properties,for,standard,checkpoint,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,new,shared,state,registry,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1493236605;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(taskStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint())___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED, new SharedStateRegistry())__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,new,shared,state,registry,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1493403095;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED, new SharedStateRegistry())__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,new,shared,state,registry,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1495184252;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED, new SharedStateRegistry())__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,new,shared,state,registry,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1495287945;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1502802710;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forStandardCheckpoint(),_			null,_			null)___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,null,null,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1516295283;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			mock(StreamStateHandle.class),_			"pointer")___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,mock,stream,state,handle,class,pointer,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1517489694;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> operatorStates = new HashMap<>()__		operatorStates.put(new OperatorID(), state)___		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			new HashMap<>(operatorStates),_			Collections.<MasterState>emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			mock(StreamStateHandle.class),_			"pointer")___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,operator,states,new,hash,map,operator,states,put,new,operator,id,state,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,new,hash,map,operator,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,mock,stream,state,handle,class,pointer,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1517489696;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			Collections.emptyMap(),_			Collections.emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,collections,empty,map,collections,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testCompletedCheckpointStatsCallbacks() throws Exception;1520429742;Tests that the stats callbacks happen if the callback is registered.;@Test_	public void testCompletedCheckpointStatsCallbacks() throws Exception {_		CompletedCheckpoint completed = new CompletedCheckpoint(_			new JobID(),_			0,_			0,_			1,_			Collections.emptyMap(),_			Collections.emptyList(),_			CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_			new TestCompletedCheckpointStorageLocation())___		CompletedCheckpointStats.DiscardCallback callback = mock(CompletedCheckpointStats.DiscardCallback.class)__		completed.setDiscardCallback(callback)___		completed.discardOnShutdown(JobStatus.FINISHED)__		verify(callback, times(1)).notifyDiscardedCheckpoint()__	};tests,that,the,stats,callbacks,happen,if,the,callback,is,registered;test,public,void,test,completed,checkpoint,stats,callbacks,throws,exception,completed,checkpoint,completed,new,completed,checkpoint,new,job,id,0,0,1,collections,empty,map,collections,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,test,completed,checkpoint,storage,location,completed,checkpoint,stats,discard,callback,callback,mock,completed,checkpoint,stats,discard,callback,class,completed,set,discard,callback,callback,completed,discard,on,shutdown,job,status,finished,verify,callback,times,1,notify,discarded,checkpoint
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1471454287;Tests that the `deleteStateWhenDisposed` flag is correctly forwarded.;@Test_	public void testDiscard() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 0, 1, taskStates, true)__		checkpoint.discard(ClassLoader.getSystemClassLoader())__		verify(state, times(1)).discard(Matchers.any(ClassLoader.class))___		Mockito.reset(state)___		_		checkpoint = new CompletedCheckpoint(new JobID(), 0, 0, 1, taskStates, false)__		checkpoint.discard(ClassLoader.getSystemClassLoader())__		verify(state, times(0)).discard(Matchers.any(ClassLoader.class))__	};tests,that,the,delete,state,when,disposed,flag,is,correctly,forwarded;test,public,void,test,discard,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,true,checkpoint,discard,class,loader,get,system,class,loader,verify,state,times,1,discard,matchers,any,class,loader,class,mockito,reset,state,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,false,checkpoint,discard,class,loader,get,system,class,loader,verify,state,times,0,discard,matchers,any,class,loader,class
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1472663401;Tests that the `deleteStateWhenDisposed` flag is correctly forwarded.;@Test_	public void testDiscard() throws Exception {_		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(new JobID(), 0, 0, 1, taskStates, true)__		checkpoint.discardState()__		verify(state, times(1)).discardState()___		Mockito.reset(state)___		_		checkpoint = new CompletedCheckpoint(new JobID(), 0, 0, 1, taskStates, false)__		checkpoint.discardState()__		verify(state, times(0)).discardState()__	};tests,that,the,delete,state,when,disposed,flag,is,correctly,forwarded;test,public,void,test,discard,throws,exception,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,true,checkpoint,discard,state,verify,state,times,1,discard,state,mockito,reset,state,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,false,checkpoint,discard,state,verify,state,times,0,discard,state
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1476432306;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, CheckpointProperties.forStandardCheckpoint(), file.getAbsolutePath())___		checkpoint.discard(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,checkpoint,properties,for,standard,checkpoint,file,get,absolute,path,checkpoint,discard,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1484038132;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, CheckpointProperties.forStandardCheckpoint(), file.getAbsolutePath())___		checkpoint.discard(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,checkpoint,properties,for,standard,checkpoint,file,get,absolute,path,checkpoint,discard,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1485790402;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, CheckpointProperties.forStandardCheckpoint(), file.getAbsolutePath())___		checkpoint.discard(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,checkpoint,properties,for,standard,checkpoint,file,get,absolute,path,checkpoint,discard,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1488304750;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discard(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1492867556;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1, taskStates, CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED, new SharedStateRegistry())___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,new,shared,state,registry,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1493236605;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		TaskState state = mock(TaskState.class)__		Map<JobVertexID, TaskState> taskStates = new HashMap<>()__		taskStates.put(new JobVertexID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED, new SharedStateRegistry())___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,task,state,state,mock,task,state,class,map,job,vertex,id,task,state,task,states,new,hash,map,task,states,put,new,job,vertex,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,new,shared,state,registry,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1493403095;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED, new SharedStateRegistry())___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,new,shared,state,registry,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1495184252;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED, new SharedStateRegistry())___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,new,shared,state,registry,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1495287945;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1502802710;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forStandardCheckpoint(),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,standard,checkpoint,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1516295283;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,assert,equals,false,file,exists
CompletedCheckpointTest -> @Test 	public void testDiscard() throws Exception;1517489694;Tests that persistent checkpoints discard their header file.;@Test_	public void testDiscard() throws Exception {_		File file = tmpFolder.newFile()__		assertEquals(true, file.exists())___		OperatorState state = mock(OperatorState.class)__		Map<OperatorID, OperatorState> taskStates = new HashMap<>()__		taskStates.put(new OperatorID(), state)___		_		CompletedCheckpoint checkpoint = new CompletedCheckpoint(_				new JobID(), 0, 0, 1,_				taskStates,_				Collections.<MasterState>emptyList(),_				CheckpointProperties.forCheckpoint(CheckpointRetentionPolicy.NEVER_RETAIN_AFTER_TERMINATION),_				new FileStateHandle(new Path(file.toURI()), file.length()),_				file.getAbsolutePath())___		checkpoint.discardOnShutdown(JobStatus.FAILED)___		assertEquals(false, file.exists())__	};tests,that,persistent,checkpoints,discard,their,header,file;test,public,void,test,discard,throws,exception,file,file,tmp,folder,new,file,assert,equals,true,file,exists,operator,state,state,mock,operator,state,class,map,operator,id,operator,state,task,states,new,hash,map,task,states,put,new,operator,id,state,completed,checkpoint,checkpoint,new,completed,checkpoint,new,job,id,0,0,1,task,states,collections,master,state,empty,list,checkpoint,properties,for,checkpoint,checkpoint,retention,policy,new,file,state,handle,new,path,file,to,uri,file,length,file,get,absolute,path,checkpoint,discard,on,shutdown,job,status,failed,assert,equals,false,file,exists
