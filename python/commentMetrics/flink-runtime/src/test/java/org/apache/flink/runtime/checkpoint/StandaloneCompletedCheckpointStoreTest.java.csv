# id;timestamp;commentText;codeText;commentWords;codeWords
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1469190400;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1469525443;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.suspend()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,suspend,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1476432306;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1490012491;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown(JobStatus.SUSPENDED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1492867556;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<TaskState> taskStates = checkpoint.getTaskStates().values()___		store.addCheckpoint(checkpoint, sharedStateRegistry)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, sharedStateRegistry)___		store.shutdown(JobStatus.SUSPENDED, sharedStateRegistry)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,task,state,task,states,checkpoint,get,task,states,values,store,add,checkpoint,checkpoint,shared,state,registry,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,shared,state,registry,store,shutdown,job,status,suspended,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1492867556;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		AbstractCompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<TaskState> taskStates = checkpoint.getTaskStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, store.sharedStateRegistry)___		store.shutdown(JobStatus.SUSPENDED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,abstract,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,task,state,task,states,checkpoint,get,task,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,store,shared,state,registry,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1493403095;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		AbstractCompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<OperatorState> taskStates = checkpoint.getOperatorStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, store.sharedStateRegistry)___		store.shutdown(JobStatus.SUSPENDED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,abstract,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,operator,state,task,states,checkpoint,get,operator,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,store,shared,state,registry,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testSuspendDiscardsCheckpoints() throws Exception;1495287945;Tests that suspends discards all checkpoints (as they cannot be_recovered later in standalone recovery mode).;@Test_	public void testSuspendDiscardsCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)__		Collection<OperatorState> taskStates = checkpoint.getOperatorStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, sharedStateRegistry)___		store.shutdown(JobStatus.SUSPENDED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,suspends,discards,all,checkpoints,as,they,cannot,be,recovered,later,in,standalone,recovery,mode;test,public,void,test,suspend,discards,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,collection,operator,state,task,states,checkpoint,get,operator,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,shared,state,registry,store,shutdown,job,status,suspended,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1490012491;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		_		final int numCheckpointsToRetain = 1__		CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain)__		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doThrow(new IOException()).when(checkpointToAdd).subsume()__			_			try {_				store.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,int,num,checkpoints,to,retain,1,completed,checkpoint,store,store,create,completed,checkpoints,num,checkpoints,to,retain,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,throw,new,ioexception,when,checkpoint,to,add,subsume,try,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1492867556;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		_		final int numCheckpointsToRetain = 1__		CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getTaskStates()__			doThrow(new IOException()).when(checkpointToAdd).discardOnSubsume(sharedStateRegistry)__			_			try {_				store.addCheckpoint(checkpointToAdd, sharedStateRegistry)__				_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,int,num,checkpoints,to,retain,1,completed,checkpoint,store,store,create,completed,checkpoints,num,checkpoints,to,retain,shared,state,registry,shared,state,registry,new,shared,state,registry,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,task,states,do,throw,new,ioexception,when,checkpoint,to,add,discard,on,subsume,shared,state,registry,try,store,add,checkpoint,checkpoint,to,add,shared,state,registry,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1492867556;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		_		final int numCheckpointsToRetain = 1__		CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain)__		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getTaskStates()__			doThrow(new IOException()).when(checkpointToAdd).discardOnSubsume(any(SharedStateRegistry.class))__			_			try {_				store.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,int,num,checkpoints,to,retain,1,completed,checkpoint,store,store,create,completed,checkpoints,num,checkpoints,to,retain,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,task,states,do,throw,new,ioexception,when,checkpoint,to,add,discard,on,subsume,any,shared,state,registry,class,try,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1493403095;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {_		_		final int numCheckpointsToRetain = 1__		CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain)__		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			doThrow(new IOException()).when(checkpointToAdd).discardOnSubsume(any(SharedStateRegistry.class))__			_			try {_				store.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,int,num,checkpoints,to,retain,1,completed,checkpoint,store,store,create,completed,checkpoints,num,checkpoints,to,retain,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,do,throw,new,ioexception,when,checkpoint,to,add,discard,on,subsume,any,shared,state,registry,class,try,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testAddCheckpointWithFailedRemove() throws Exception;1495287945;Tests that the checkpoint does not exist in the store when we fail to add_it into the store (i.e., there exists an exception thrown by the method).;@Test_	public void testAddCheckpointWithFailedRemove() throws Exception {__		final int numCheckpointsToRetain = 1__		CompletedCheckpointStore store = createCompletedCheckpoints(numCheckpointsToRetain)__		_		for (long i = 0_ i <= numCheckpointsToRetain_ ++i) {_			CompletedCheckpoint checkpointToAdd = mock(CompletedCheckpoint.class)__			doReturn(i).when(checkpointToAdd).getCheckpointID()__			doReturn(Collections.emptyMap()).when(checkpointToAdd).getOperatorStates()__			doThrow(new IOException()).when(checkpointToAdd).discardOnSubsume()__			_			try {_				store.addCheckpoint(checkpointToAdd)__				_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertTrue(addedCheckpoints.contains(checkpointToAdd))__			} catch (Exception e) {_				_				List<CompletedCheckpoint> addedCheckpoints = store.getAllCheckpoints()__				assertFalse(addedCheckpoints.contains(checkpointToAdd))__			}_		}_	};tests,that,the,checkpoint,does,not,exist,in,the,store,when,we,fail,to,add,it,into,the,store,i,e,there,exists,an,exception,thrown,by,the,method;test,public,void,test,add,checkpoint,with,failed,remove,throws,exception,final,int,num,checkpoints,to,retain,1,completed,checkpoint,store,store,create,completed,checkpoints,num,checkpoints,to,retain,for,long,i,0,i,num,checkpoints,to,retain,i,completed,checkpoint,checkpoint,to,add,mock,completed,checkpoint,class,do,return,i,when,checkpoint,to,add,get,checkpoint,id,do,return,collections,empty,map,when,checkpoint,to,add,get,operator,states,do,throw,new,ioexception,when,checkpoint,to,add,discard,on,subsume,try,store,add,checkpoint,checkpoint,to,add,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,true,added,checkpoints,contains,checkpoint,to,add,catch,exception,e,list,completed,checkpoint,added,checkpoints,store,get,all,checkpoints,assert,false,added,checkpoints,contains,checkpoint,to,add
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1469190400;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1469525443;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1, ClassLoader.getSystemClassLoader())__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown()___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,class,loader,get,system,class,loader,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1476432306;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1490012491;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())___		store.shutdown(JobStatus.FINISHED)___		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1492867556;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<TaskState> taskStates = checkpoint.getTaskStates().values()___		store.addCheckpoint(checkpoint, sharedStateRegistry)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, sharedStateRegistry)___		store.shutdown(JobStatus.FINISHED, sharedStateRegistry)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,completed,checkpoint,store,store,create,completed,checkpoints,1,shared,state,registry,shared,state,registry,new,shared,state,registry,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,task,state,task,states,checkpoint,get,task,states,values,store,add,checkpoint,checkpoint,shared,state,registry,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,shared,state,registry,store,shutdown,job,status,finished,shared,state,registry,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1492867556;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		AbstractCompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<TaskState> taskStates = checkpoint.getTaskStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(taskStates, store.sharedStateRegistry)___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(taskStates)__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,abstract,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,task,state,task,states,checkpoint,get,task,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,task,states,store,shared,state,registry,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,task,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1493403095;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		AbstractCompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0)__		Collection<OperatorState> operatorStates = checkpoint.getOperatorStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(operatorStates, store.sharedStateRegistry)___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(operatorStates)__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,abstract,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,collection,operator,state,operator,states,checkpoint,get,operator,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,operator,states,store,shared,state,registry,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,operator,states
StandaloneCompletedCheckpointStoreTest -> @Test 	public void testShutdownDiscardsCheckpoints() throws Exception;1495287945;Tests that shutdown discards all checkpoints.;@Test_	public void testShutdownDiscardsCheckpoints() throws Exception {_		SharedStateRegistry sharedStateRegistry = new SharedStateRegistry()__		CompletedCheckpointStore store = createCompletedCheckpoints(1)__		TestCompletedCheckpoint checkpoint = createCheckpoint(0, sharedStateRegistry)__		Collection<OperatorState> operatorStates = checkpoint.getOperatorStates().values()___		store.addCheckpoint(checkpoint)__		assertEquals(1, store.getNumberOfRetainedCheckpoints())__		verifyCheckpointRegistered(operatorStates, sharedStateRegistry)___		store.shutdown(JobStatus.FINISHED)__		assertEquals(0, store.getNumberOfRetainedCheckpoints())__		assertTrue(checkpoint.isDiscarded())__		verifyCheckpointDiscarded(operatorStates)__	};tests,that,shutdown,discards,all,checkpoints;test,public,void,test,shutdown,discards,checkpoints,throws,exception,shared,state,registry,shared,state,registry,new,shared,state,registry,completed,checkpoint,store,store,create,completed,checkpoints,1,test,completed,checkpoint,checkpoint,create,checkpoint,0,shared,state,registry,collection,operator,state,operator,states,checkpoint,get,operator,states,values,store,add,checkpoint,checkpoint,assert,equals,1,store,get,number,of,retained,checkpoints,verify,checkpoint,registered,operator,states,shared,state,registry,store,shutdown,job,status,finished,assert,equals,0,store,get,number,of,retained,checkpoints,assert,true,checkpoint,is,discarded,verify,checkpoint,discarded,operator,states
