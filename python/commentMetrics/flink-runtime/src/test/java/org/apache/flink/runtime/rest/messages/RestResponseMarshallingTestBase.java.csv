# id;timestamp;commentText;codeText;commentWords;codeWords
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1507725680;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1509447226;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1511544647;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1512169878;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1515481550;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1519249749;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1522681180;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract R getTestResponseInstance() throws Exception_;1526494919;Returns an instance of a response to be tested.__@return instance of the expected test response;protected abstract R getTestResponseInstance() throws Exception_;returns,an,instance,of,a,response,to,be,tested,return,instance,of,the,expected,test,response;protected,abstract,r,get,test,response,instance,throws,exception
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1507725680;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1509447226;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1511544647;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1512169878;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1515481550;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1519249749;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1522681180;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected abstract Class<R> getTestResponseClass()_;1526494919;Returns the class of the test response.__@return class of the test response type;protected abstract Class<R> getTestResponseClass()_;returns,the,class,of,the,test,response,return,class,of,the,test,response,type;protected,abstract,class,r,get,test,response,class
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1511544647;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1512169878;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1515481550;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1519249749;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1522681180;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> protected void assertOriginalEqualsToUnmarshalled(R expected, R actual);1526494919;Asserts that two objects are equal. If they are not, an {@link AssertionError} is thrown.__@param expected expected value_@param actual   the value to check against expected;protected void assertOriginalEqualsToUnmarshalled(R expected, R actual) {_		Assert.assertEquals(expected, actual)__	};asserts,that,two,objects,are,equal,if,they,are,not,an,link,assertion,error,is,thrown,param,expected,expected,value,param,actual,the,value,to,check,against,expected;protected,void,assert,original,equals,to,unmarshalled,r,expected,r,actual,assert,assert,equals,expected,actual
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1507725680;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		JsonNode json = objectMapper.valueToTree(expected)___		final R unmarshalled = objectMapper.treeToValue(json, getTestResponseClass())__		Assert.assertEquals(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,json,node,json,object,mapper,value,to,tree,expected,final,r,unmarshalled,object,mapper,tree,to,value,json,get,test,response,class,assert,assert,equals,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1509447226;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		JsonNode json = objectMapper.valueToTree(expected)___		final R unmarshalled = objectMapper.treeToValue(json, getTestResponseClass())__		Assert.assertEquals(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,json,node,json,object,mapper,value,to,tree,expected,final,r,unmarshalled,object,mapper,tree,to,value,json,get,test,response,class,assert,assert,equals,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1511544647;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		JsonNode json = objectMapper.valueToTree(expected)___		final R unmarshalled = objectMapper.treeToValue(json, getTestResponseClass())__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,json,node,json,object,mapper,value,to,tree,expected,final,r,unmarshalled,object,mapper,tree,to,value,json,get,test,response,class,assert,original,equals,to,unmarshalled,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1512169878;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		final String marshalled = objectMapper.writeValueAsString(expected)___		final R unmarshalled = objectMapper.readValue(marshalled, getTestResponseClass())__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,final,string,marshalled,object,mapper,write,value,as,string,expected,final,r,unmarshalled,object,mapper,read,value,marshalled,get,test,response,class,assert,original,equals,to,unmarshalled,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1515481550;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		final String marshalled = objectMapper.writeValueAsString(expected)___		final R unmarshalled = objectMapper.readValue(marshalled, getTestResponseClass())__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,final,string,marshalled,object,mapper,write,value,as,string,expected,final,r,unmarshalled,object,mapper,read,value,marshalled,get,test,response,class,assert,original,equals,to,unmarshalled,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1519249749;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		final String marshalled = objectMapper.writeValueAsString(expected)___		final Collection<Class<?>> typeParameters = getTypeParameters()__		final JavaType type___		if (typeParameters.isEmpty()) {_			type = objectMapper.getTypeFactory().constructType(getTestResponseClass())__		} else {_			type = objectMapper.getTypeFactory().constructParametricType(_				getTestResponseClass(),_				typeParameters.toArray(new Class<?>[typeParameters.size()]))__		}__		final R unmarshalled = objectMapper.readValue(marshalled, type)__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,final,string,marshalled,object,mapper,write,value,as,string,expected,final,collection,class,type,parameters,get,type,parameters,final,java,type,type,if,type,parameters,is,empty,type,object,mapper,get,type,factory,construct,type,get,test,response,class,else,type,object,mapper,get,type,factory,construct,parametric,type,get,test,response,class,type,parameters,to,array,new,class,type,parameters,size,final,r,unmarshalled,object,mapper,read,value,marshalled,type,assert,original,equals,to,unmarshalled,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1522681180;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		final String marshalled = objectMapper.writeValueAsString(expected)___		final Collection<Class<?>> typeParameters = getTypeParameters()__		final JavaType type___		if (typeParameters.isEmpty()) {_			type = objectMapper.getTypeFactory().constructType(getTestResponseClass())__		} else {_			type = objectMapper.getTypeFactory().constructParametricType(_				getTestResponseClass(),_				typeParameters.toArray(new Class<?>[typeParameters.size()]))__		}__		final R unmarshalled = objectMapper.readValue(marshalled, type)__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,final,string,marshalled,object,mapper,write,value,as,string,expected,final,collection,class,type,parameters,get,type,parameters,final,java,type,type,if,type,parameters,is,empty,type,object,mapper,get,type,factory,construct,type,get,test,response,class,else,type,object,mapper,get,type,factory,construct,parametric,type,get,test,response,class,type,parameters,to,array,new,class,type,parameters,size,final,r,unmarshalled,object,mapper,read,value,marshalled,type,assert,original,equals,to,unmarshalled,expected,unmarshalled
RestResponseMarshallingTestBase -> @Test 	public void testJsonMarshalling() throws Exception;1526494919;Tests that we can marshal and unmarshal the response.;@Test_	public void testJsonMarshalling() throws Exception {_		final R expected = getTestResponseInstance()___		ObjectMapper objectMapper = RestMapperUtils.getStrictObjectMapper()__		final String marshalled = objectMapper.writeValueAsString(expected)___		final Collection<Class<?>> typeParameters = getTypeParameters()__		final JavaType type___		if (typeParameters.isEmpty()) {_			type = objectMapper.getTypeFactory().constructType(getTestResponseClass())__		} else {_			type = objectMapper.getTypeFactory().constructParametricType(_				getTestResponseClass(),_				typeParameters.toArray(new Class<?>[typeParameters.size()]))__		}__		final R unmarshalled = objectMapper.readValue(marshalled, type)__		assertOriginalEqualsToUnmarshalled(expected, unmarshalled)__	};tests,that,we,can,marshal,and,unmarshal,the,response;test,public,void,test,json,marshalling,throws,exception,final,r,expected,get,test,response,instance,object,mapper,object,mapper,rest,mapper,utils,get,strict,object,mapper,final,string,marshalled,object,mapper,write,value,as,string,expected,final,collection,class,type,parameters,get,type,parameters,final,java,type,type,if,type,parameters,is,empty,type,object,mapper,get,type,factory,construct,type,get,test,response,class,else,type,object,mapper,get,type,factory,construct,parametric,type,get,test,response,class,type,parameters,to,array,new,class,type,parameters,size,final,r,unmarshalled,object,mapper,read,value,marshalled,type,assert,original,equals,to,unmarshalled,expected,unmarshalled
