# id;timestamp;commentText;codeText;commentWords;codeWords
SpillingResettableIteratorTest -> @Test 	public void testNext();1405024514;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1405090423;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1406674317;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1411473593;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1412082638;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1415702894;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testNext();1441738685;Test whether next() depends on previous call of hasNext();@Test_	public void testNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			IntValue record__			int cnt = 0__			while (cnt < NUM_TESTRECORDS) {_				record = iterator.next()__				Assert.assertTrue("Record was not read from iterator", record != null)__				cnt++__			}_	_			try {_				record = iterator.next()__				Assert.fail("Too many records were read from iterator.")__			} catch (NoSuchElementException nseex) {_				_			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};test,whether,next,depends,on,previous,call,of,has,next;test,public,void,test,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,value,record,int,cnt,0,while,cnt,record,iterator,next,assert,assert,true,record,was,not,read,from,iterator,record,null,cnt,try,record,iterator,next,assert,fail,too,many,records,were,read,from,iterator,catch,no,such,element,exception,nseex,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1405024514;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1405090423;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1406674317;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1411473593;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1412082638;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1415702894;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIteratorInMemory();1441738685;Tests the resettable iterator with enough memory so that all data_is kept locally in a membuffer.;@Test_	public void testResettableIteratorInMemory() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 20, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,enough,memory,so,that,all,data,is,kept,locally,in,a,membuffer;test,public,void,test,resettable,iterator,in,memory,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,20,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1405024514;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1405090423;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1406674317;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1411473593;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1412082638;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1415702894;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testResettableIterator();1441738685;Tests the resettable iterator with too few memory, so that the data_has to be written to disk.;@Test_	public void testResettableIterator() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()___			_			int count = 0__			while (iterator.hasNext()) {_				Assert.assertEquals("In initial run, element " + count + " does not match expected value!", count++,_					iterator.next().getValue())__			}_			Assert.assertEquals("Too few elements were deserialzied in initial run!", NUM_TESTRECORDS, count)__			_			for (int j = 0_ j < 10_ ++j) {_				count = 0__				iterator.reset()__				_				while (iterator.hasNext()) {_					Assert.assertEquals("After reset nr. " + j + 1 + " element " + count_						+ " does not match expected value!", count++, iterator.next().getValue())__				}_				Assert.assertEquals("Too few elements were deserialzied after reset nr. " + j + 1 + "!", NUM_TESTRECORDS,_					count)__			}_			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,the,resettable,iterator,with,too,few,memory,so,that,the,data,has,to,be,written,to,disk;test,public,void,test,resettable,iterator,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,count,0,while,iterator,has,next,assert,assert,equals,in,initial,run,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,in,initial,run,count,for,int,j,0,j,10,j,count,0,iterator,reset,while,iterator,has,next,assert,assert,equals,after,reset,nr,j,1,element,count,does,not,match,expected,value,count,iterator,next,get,value,assert,assert,equals,too,few,elements,were,deserialzied,after,reset,nr,j,1,count,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1405024514;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1405090423;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1406674317;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1411473593;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1412082638;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1415702894;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
SpillingResettableIteratorTest -> @Test 	public void testHasNext();1441738685;Tests whether multiple call of hasNext() changes the state of the iterator;@Test_	public void testHasNext() {_		try {_			_			SpillingResettableIterator<IntValue> iterator = new SpillingResettableIterator<IntValue>(_					this.reader, this.serializer, this.memman, this.ioman, 2, this.memOwner)__			_			iterator.open()__	_			int cnt = 0__			while (iterator.hasNext()) {_				iterator.hasNext()__				iterator.next()__				cnt++__			}_	_			Assert.assertTrue(cnt + " elements read from iterator, but " + NUM_TESTRECORDS + " expected",_				cnt == NUM_TESTRECORDS)__			_			iterator.close()__		} catch (Exception ex)  {_			ex.printStackTrace()__			Assert.fail("Test encountered an exception.")__		}_	};tests,whether,multiple,call,of,has,next,changes,the,state,of,the,iterator;test,public,void,test,has,next,try,spilling,resettable,iterator,int,value,iterator,new,spilling,resettable,iterator,int,value,this,reader,this,serializer,this,memman,this,ioman,2,this,mem,owner,iterator,open,int,cnt,0,while,iterator,has,next,iterator,has,next,iterator,next,cnt,assert,assert,true,cnt,elements,read,from,iterator,but,expected,cnt,iterator,close,catch,exception,ex,ex,print,stack,trace,assert,fail,test,encountered,an,exception
