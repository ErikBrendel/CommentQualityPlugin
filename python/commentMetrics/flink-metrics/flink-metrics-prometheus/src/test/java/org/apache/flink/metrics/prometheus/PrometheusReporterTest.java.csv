# id;timestamp;commentText;codeText;commentWords;codeWords
PrometheusReporterTest -> PortRangeProvider -> public String next();1519141579;Returns the next port range containing exactly 100 ports.__@return next port range;public String next() {_			if (!hasNext()) {_				throw new NoSuchElementException()__			}_			int lowEnd = base__			int highEnd = base + 99__			base += 100__			return String.valueOf(lowEnd) + "-" + String.valueOf(highEnd)__		};returns,the,next,port,range,containing,exactly,100,ports,return,next,port,range;public,string,next,if,has,next,throw,new,no,such,element,exception,int,low,end,base,int,high,end,base,99,base,100,return,string,value,of,low,end,string,value,of,high,end
PrometheusReporterTest -> PortRangeProvider -> public String next();1519406529;Returns the next port range containing exactly 100 ports.__@return next port range;public String next() {_			if (!hasNext()) {_				throw new NoSuchElementException()__			}_			int lowEnd = base__			int highEnd = base + 99__			base += 100__			return String.valueOf(lowEnd) + "-" + String.valueOf(highEnd)__		};returns,the,next,port,range,containing,exactly,100,ports,return,next,port,range;public,string,next,if,has,next,throw,new,no,such,element,exception,int,low,end,base,int,high,end,base,99,base,100,return,string,value,of,low,end,string,value,of,high,end
PrometheusReporterTest -> PortRangeProvider -> public String next();1530605351;Returns the next port range containing exactly 100 ports.__@return next port range;public String next() {_			if (!hasNext()) {_				throw new NoSuchElementException()__			}_			int lowEnd = base__			int highEnd = base + 99__			base += 100__			return String.valueOf(lowEnd) + "-" + String.valueOf(highEnd)__		};returns,the,next,port,range,containing,exactly,100,ports,return,next,port,range;public,string,next,if,has,next,throw,new,no,such,element,exception,int,low,end,base,int,high,end,base,99,base,100,return,string,value,of,low,end,string,value,of,high,end
PrometheusReporterTest -> PortRangeProvider -> public String next();1531303507;Returns the next port range containing exactly 100 ports.__@return next port range;public String next() {_			if (!hasNext()) {_				throw new NoSuchElementException()__			}_			int lowEnd = base__			int highEnd = base + 99__			base += 100__			return String.valueOf(lowEnd) + "-" + String.valueOf(highEnd)__		};returns,the,next,port,range,containing,exactly,100,ports,return,next,port,range;public,string,next,if,has,next,throw,new,no,such,element,exception,int,low,end,base,int,high,end,base,99,base,100,return,string,value,of,low,end,string,value,of,high,end
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1509004101;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1509352668;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1509547920;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1512480704;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1513102155;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1519141538;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1519141579;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1519406529;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1530605351;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(PrometheusReporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,prometheus,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void stringGaugeCannotBeConverted();1531303507;Prometheus only supports numbers, so report non-numeric gauges as 0.;@Test_	public void stringGaugeCannotBeConverted() {_		assertThat(reporter.gaugeFrom(new Gauge<String>() {_			@Override_			public String getValue() {_				return "I am not a number"__			}_		}).get(), equalTo(0.))__	};prometheus,only,supports,numbers,so,report,non,numeric,gauges,as,0;test,public,void,string,gauge,cannot,be,converted,assert,that,reporter,gauge,from,new,gauge,string,override,public,string,get,value,return,i,am,not,a,number,get,equal,to,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1509004101;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1509352668;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1509547920;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1512480704;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1513102155;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1519141538;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1519141579;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1519406529;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1530605351;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
PrometheusReporterTest -> @Test 	public void counterIsReportedAsPrometheusGauge() throws UnirestException;1531303507;{@link io.prometheus.client.Counter} may not decrease, so report {@link Counter} as {@link io.prometheus.client.Gauge}.__@throws UnirestException Might be thrown on HTTP problems.;@Test_	public void counterIsReportedAsPrometheusGauge() throws UnirestException {_		Counter testCounter = new SimpleCounter()__		testCounter.inc(7)___		assertThatGaugeIsExported(testCounter, "testCounter", "7.0")__	};link,io,prometheus,client,counter,may,not,decrease,so,report,link,counter,as,link,io,prometheus,client,gauge,throws,unirest,exception,might,be,thrown,on,http,problems;test,public,void,counter,is,reported,as,prometheus,gauge,throws,unirest,exception,counter,test,counter,new,simple,counter,test,counter,inc,7,assert,that,gauge,is,exported,test,counter,test,counter,7,0
