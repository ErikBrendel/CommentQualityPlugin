# id;timestamp;commentText;codeText;commentWords;codeWords
AvroTestUtils -> public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getSimpleTestData();1509723634;Tests a simple Avro data types without nesting.;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getSimpleTestData() {_		final Address addr = Address.newBuilder()_			.setNum(42)_			.setStreet("Main Street 42")_			.setCity("Test City")_			.setState("Test State")_			.setZip("12345")_			.build()___		final Row rowAddr = new Row(5)__		rowAddr.setField(0, 42)__		rowAddr.setField(1, "Main Street 42")__		rowAddr.setField(2, "Test City")__		rowAddr.setField(3, "Test State")__		rowAddr.setField(4, "12345")___		final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>()__		t.f0 = Address.class__		t.f1 = addr__		t.f2 = rowAddr___		return t__	};tests,a,simple,avro,data,types,without,nesting;public,static,tuple3,class,extends,specific,record,specific,record,row,get,simple,test,data,final,address,addr,address,new,builder,set,num,42,set,street,main,street,42,set,city,test,city,set,state,test,state,set,zip,12345,build,final,row,row,addr,new,row,5,row,addr,set,field,0,42,row,addr,set,field,1,main,street,42,row,addr,set,field,2,test,city,row,addr,set,field,3,test,state,row,addr,set,field,4,12345,final,tuple3,class,extends,specific,record,specific,record,row,t,new,tuple3,t,f0,address,class,t,f1,addr,t,f2,row,addr,return,t
AvroTestUtils -> public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getSimpleTestData();1527085902;Tests a simple Avro data types without nesting.;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getSimpleTestData() {_		final Address addr = Address.newBuilder()_			.setNum(42)_			.setStreet("Main Street 42")_			.setCity("Test City")_			.setState("Test State")_			.setZip("12345")_			.build()___		final Row rowAddr = new Row(5)__		rowAddr.setField(0, 42)__		rowAddr.setField(1, "Main Street 42")__		rowAddr.setField(2, "Test City")__		rowAddr.setField(3, "Test State")__		rowAddr.setField(4, "12345")___		final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>()__		t.f0 = Address.class__		t.f1 = addr__		t.f2 = rowAddr___		return t__	};tests,a,simple,avro,data,types,without,nesting;public,static,tuple3,class,extends,specific,record,specific,record,row,get,simple,test,data,final,address,addr,address,new,builder,set,num,42,set,street,main,street,42,set,city,test,city,set,state,test,state,set,zip,12345,build,final,row,row,addr,new,row,5,row,addr,set,field,0,42,row,addr,set,field,1,main,street,42,row,addr,set,field,2,test,city,row,addr,set,field,3,test,state,row,addr,set,field,4,12345,final,tuple3,class,extends,specific,record,specific,record,row,t,new,tuple3,t,f0,address,class,t,f1,addr,t,f2,row,addr,return,t
AvroTestUtils -> public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException;1527085902;Writes given record using specified schema._@param record record to serialize_@param schema schema to use for serialization_@return serialized record;public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException {_		ByteArrayOutputStream stream = new ByteArrayOutputStream()__		BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(stream, null)___		new GenericDatumWriter<>(schema).write(record, encoder)__		encoder.flush()__		return stream.toByteArray()__	};writes,given,record,using,specified,schema,param,record,record,to,serialize,param,schema,schema,to,use,for,serialization,return,serialized,record;public,static,byte,write,record,generic,record,record,schema,schema,throws,ioexception,byte,array,output,stream,stream,new,byte,array,output,stream,binary,encoder,encoder,encoder,factory,get,binary,encoder,stream,null,new,generic,datum,writer,schema,write,record,encoder,encoder,flush,return,stream,to,byte,array
AvroTestUtils -> public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException;1527231728;Writes given record using specified schema._@param record record to serialize_@param schema schema to use for serialization_@return serialized record;public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException {_		ByteArrayOutputStream stream = new ByteArrayOutputStream()__		BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(stream, null)___		new GenericDatumWriter<>(schema).write(record, encoder)__		encoder.flush()__		return stream.toByteArray()__	};writes,given,record,using,specified,schema,param,record,record,to,serialize,param,schema,schema,to,use,for,serialization,return,serialized,record;public,static,byte,write,record,generic,record,record,schema,schema,throws,ioexception,byte,array,output,stream,stream,new,byte,array,output,stream,binary,encoder,encoder,encoder,factory,get,binary,encoder,stream,null,new,generic,datum,writer,schema,write,record,encoder,encoder,flush,return,stream,to,byte,array
AvroTestUtils -> public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException;1530625244;Writes given record using specified schema._@param record record to serialize_@param schema schema to use for serialization_@return serialized record;public static byte[] writeRecord(GenericRecord record, Schema schema) throws IOException {_		ByteArrayOutputStream stream = new ByteArrayOutputStream()__		BinaryEncoder encoder = EncoderFactory.get().binaryEncoder(stream, null)___		new GenericDatumWriter<>(schema).write(record, encoder)__		encoder.flush()__		return stream.toByteArray()__	};writes,given,record,using,specified,schema,param,record,record,to,serialize,param,schema,schema,to,use,for,serialization,return,serialized,record;public,static,byte,write,record,generic,record,record,schema,schema,throws,ioexception,byte,array,output,stream,stream,new,byte,array,output,stream,binary,encoder,encoder,encoder,factory,get,binary,encoder,stream,null,new,generic,datum,writer,schema,write,record,encoder,encoder,flush,return,stream,to,byte,array
AvroTestUtils -> public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes);1509723634;Creates a flat Avro Schema for testing.;public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes) {_		final SchemaBuilder.FieldAssembler<Schema> fieldAssembler = SchemaBuilder_			.record("BasicAvroRecord")_			.namespace(NAMESPACE)_			.fields()___		final Schema nullSchema = Schema.create(Schema.Type.NULL)___		for (int i = 0_ i < fieldNames.length_ i++) {_			Schema schema = ReflectData.get().getSchema(fieldTypes[i].getTypeClass())__			Schema unionSchema = Schema.createUnion(Arrays.asList(nullSchema, schema))__			fieldAssembler.name(fieldNames[i]).type(unionSchema).noDefault()__		}__		return fieldAssembler.endRecord()__	};creates,a,flat,avro,schema,for,testing;public,static,schema,create,flat,avro,schema,string,field,names,type,information,field,types,final,schema,builder,field,assembler,schema,field,assembler,schema,builder,record,basic,avro,record,namespace,namespace,fields,final,schema,null,schema,schema,create,schema,type,null,for,int,i,0,i,field,names,length,i,schema,schema,reflect,data,get,get,schema,field,types,i,get,type,class,schema,union,schema,schema,create,union,arrays,as,list,null,schema,schema,field,assembler,name,field,names,i,type,union,schema,no,default,return,field,assembler,end,record
AvroTestUtils -> public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes);1527085902;Creates a flat Avro Schema for testing.;public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes) {_		final SchemaBuilder.FieldAssembler<Schema> fieldAssembler = SchemaBuilder_			.record("BasicAvroRecord")_			.namespace(NAMESPACE)_			.fields()___		final Schema nullSchema = Schema.create(Schema.Type.NULL)___		for (int i = 0_ i < fieldNames.length_ i++) {_			Schema schema = ReflectData.get().getSchema(fieldTypes[i].getTypeClass())__			Schema unionSchema = Schema.createUnion(Arrays.asList(nullSchema, schema))__			fieldAssembler.name(fieldNames[i]).type(unionSchema).noDefault()__		}__		return fieldAssembler.endRecord()__	};creates,a,flat,avro,schema,for,testing;public,static,schema,create,flat,avro,schema,string,field,names,type,information,field,types,final,schema,builder,field,assembler,schema,field,assembler,schema,builder,record,basic,avro,record,namespace,namespace,fields,final,schema,null,schema,schema,create,schema,type,null,for,int,i,0,i,field,names,length,i,schema,schema,reflect,data,get,get,schema,field,types,i,get,type,class,schema,union,schema,schema,create,union,arrays,as,list,null,schema,schema,field,assembler,name,field,names,i,type,union,schema,no,default,return,field,assembler,end,record
AvroTestUtils -> public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes);1527231728;Creates a flat Avro Schema for testing.;public static Schema createFlatAvroSchema(String[] fieldNames, TypeInformation[] fieldTypes) {_		final SchemaBuilder.FieldAssembler<Schema> fieldAssembler = SchemaBuilder_			.record("BasicAvroRecord")_			.namespace(NAMESPACE)_			.fields()___		final Schema nullSchema = Schema.create(Schema.Type.NULL)___		for (int i = 0_ i < fieldNames.length_ i++) {_			Schema schema = ReflectData.get().getSchema(fieldTypes[i].getTypeClass())__			Schema unionSchema = Schema.createUnion(Arrays.asList(nullSchema, schema))__			fieldAssembler.name(fieldNames[i]).type(unionSchema).noDefault()__		}__		return fieldAssembler.endRecord()__	};creates,a,flat,avro,schema,for,testing;public,static,schema,create,flat,avro,schema,string,field,names,type,information,field,types,final,schema,builder,field,assembler,schema,field,assembler,schema,builder,record,basic,avro,record,namespace,namespace,fields,final,schema,null,schema,schema,create,schema,type,null,for,int,i,0,i,field,names,length,i,schema,schema,reflect,data,get,get,schema,field,types,i,get,type,class,schema,union,schema,schema,create,union,arrays,as,list,null,schema,schema,field,assembler,name,field,names,i,type,union,schema,no,default,return,field,assembler,end,record
AvroTestUtils -> public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getComplexTestData();1509723634;Tests all Avro data types as well as nested types.;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getComplexTestData() {_		final Address addr = Address.newBuilder()_			.setNum(42)_			.setStreet("Main Street 42")_			.setCity("Test City")_			.setState("Test State")_			.setZip("12345")_			.build()___		final Row rowAddr = new Row(5)__		rowAddr.setField(0, 42)__		rowAddr.setField(1, "Main Street 42")__		rowAddr.setField(2, "Test City")__		rowAddr.setField(3, "Test State")__		rowAddr.setField(4, "12345")___		final User user = User.newBuilder()_			.setName("Charlie")_			.setFavoriteNumber(null)_			.setFavoriteColor("blue")_			.setTypeLongTest(1337L)_			.setTypeDoubleTest(1.337d)_			.setTypeNullTest(null)_			.setTypeBoolTest(false)_			.setTypeArrayString(new ArrayList<CharSequence>())_			.setTypeArrayBoolean(new ArrayList<Boolean>())_			.setTypeNullableArray(null)_			.setTypeEnum(Colors.RED)_			.setTypeMap(new HashMap<CharSequence, Long>())_			.setTypeFixed(null)_			.setTypeUnion(null)_			.setTypeNested(addr)_			.build()___		final Row rowUser = new Row(15)__		rowUser.setField(0, "Charlie")__		rowUser.setField(1, null)__		rowUser.setField(2, "blue")__		rowUser.setField(3, 1337L)__		rowUser.setField(4, 1.337d)__		rowUser.setField(5, null)__		rowUser.setField(6, false)__		rowUser.setField(7, new ArrayList<CharSequence>())__		rowUser.setField(8, new ArrayList<Boolean>())__		rowUser.setField(9, null)__		rowUser.setField(10, Colors.RED)__		rowUser.setField(11, new HashMap<CharSequence, Long>())__		rowUser.setField(12, null)__		rowUser.setField(13, null)__		rowUser.setField(14, rowAddr)___		final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>()__		t.f0 = User.class__		t.f1 = user__		t.f2 = rowUser___		return t__	};tests,all,avro,data,types,as,well,as,nested,types;public,static,tuple3,class,extends,specific,record,specific,record,row,get,complex,test,data,final,address,addr,address,new,builder,set,num,42,set,street,main,street,42,set,city,test,city,set,state,test,state,set,zip,12345,build,final,row,row,addr,new,row,5,row,addr,set,field,0,42,row,addr,set,field,1,main,street,42,row,addr,set,field,2,test,city,row,addr,set,field,3,test,state,row,addr,set,field,4,12345,final,user,user,user,new,builder,set,name,charlie,set,favorite,number,null,set,favorite,color,blue,set,type,long,test,1337l,set,type,double,test,1,337d,set,type,null,test,null,set,type,bool,test,false,set,type,array,string,new,array,list,char,sequence,set,type,array,boolean,new,array,list,boolean,set,type,nullable,array,null,set,type,enum,colors,red,set,type,map,new,hash,map,char,sequence,long,set,type,fixed,null,set,type,union,null,set,type,nested,addr,build,final,row,row,user,new,row,15,row,user,set,field,0,charlie,row,user,set,field,1,null,row,user,set,field,2,blue,row,user,set,field,3,1337l,row,user,set,field,4,1,337d,row,user,set,field,5,null,row,user,set,field,6,false,row,user,set,field,7,new,array,list,char,sequence,row,user,set,field,8,new,array,list,boolean,row,user,set,field,9,null,row,user,set,field,10,colors,red,row,user,set,field,11,new,hash,map,char,sequence,long,row,user,set,field,12,null,row,user,set,field,13,null,row,user,set,field,14,row,addr,final,tuple3,class,extends,specific,record,specific,record,row,t,new,tuple3,t,f0,user,class,t,f1,user,t,f2,row,user,return,t
AvroTestUtils -> public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getComplexTestData();1527085902;Tests all Avro data types as well as nested types.;public static Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> getComplexTestData() {_		final Address addr = Address.newBuilder()_			.setNum(42)_			.setStreet("Main Street 42")_			.setCity("Test City")_			.setState("Test State")_			.setZip("12345")_			.build()___		final Row rowAddr = new Row(5)__		rowAddr.setField(0, 42)__		rowAddr.setField(1, "Main Street 42")__		rowAddr.setField(2, "Test City")__		rowAddr.setField(3, "Test State")__		rowAddr.setField(4, "12345")___		final User user = User.newBuilder()_			.setName("Charlie")_			.setFavoriteNumber(null)_			.setFavoriteColor("blue")_			.setTypeLongTest(1337L)_			.setTypeDoubleTest(1.337d)_			.setTypeNullTest(null)_			.setTypeBoolTest(false)_			.setTypeArrayString(new ArrayList<CharSequence>())_			.setTypeArrayBoolean(new ArrayList<Boolean>())_			.setTypeNullableArray(null)_			.setTypeEnum(Colors.RED)_			.setTypeMap(new HashMap<CharSequence, Long>())_			.setTypeFixed(null)_			.setTypeUnion(null)_			.setTypeNested(addr)_			.build()___		final Row rowUser = new Row(15)__		rowUser.setField(0, "Charlie")__		rowUser.setField(1, null)__		rowUser.setField(2, "blue")__		rowUser.setField(3, 1337L)__		rowUser.setField(4, 1.337d)__		rowUser.setField(5, null)__		rowUser.setField(6, false)__		rowUser.setField(7, new ArrayList<CharSequence>())__		rowUser.setField(8, new ArrayList<Boolean>())__		rowUser.setField(9, null)__		rowUser.setField(10, Colors.RED)__		rowUser.setField(11, new HashMap<CharSequence, Long>())__		rowUser.setField(12, null)__		rowUser.setField(13, null)__		rowUser.setField(14, rowAddr)___		final Tuple3<Class<? extends SpecificRecord>, SpecificRecord, Row> t = new Tuple3<>()__		t.f0 = User.class__		t.f1 = user__		t.f2 = rowUser___		return t__	};tests,all,avro,data,types,as,well,as,nested,types;public,static,tuple3,class,extends,specific,record,specific,record,row,get,complex,test,data,final,address,addr,address,new,builder,set,num,42,set,street,main,street,42,set,city,test,city,set,state,test,state,set,zip,12345,build,final,row,row,addr,new,row,5,row,addr,set,field,0,42,row,addr,set,field,1,main,street,42,row,addr,set,field,2,test,city,row,addr,set,field,3,test,state,row,addr,set,field,4,12345,final,user,user,user,new,builder,set,name,charlie,set,favorite,number,null,set,favorite,color,blue,set,type,long,test,1337l,set,type,double,test,1,337d,set,type,null,test,null,set,type,bool,test,false,set,type,array,string,new,array,list,char,sequence,set,type,array,boolean,new,array,list,boolean,set,type,nullable,array,null,set,type,enum,colors,red,set,type,map,new,hash,map,char,sequence,long,set,type,fixed,null,set,type,union,null,set,type,nested,addr,build,final,row,row,user,new,row,15,row,user,set,field,0,charlie,row,user,set,field,1,null,row,user,set,field,2,blue,row,user,set,field,3,1337l,row,user,set,field,4,1,337d,row,user,set,field,5,null,row,user,set,field,6,false,row,user,set,field,7,new,array,list,char,sequence,row,user,set,field,8,new,array,list,boolean,row,user,set,field,9,null,row,user,set,field,10,colors,red,row,user,set,field,11,new,hash,map,char,sequence,long,row,user,set,field,12,null,row,user,set,field,13,null,row,user,set,field,14,row,addr,final,tuple3,class,extends,specific,record,specific,record,row,t,new,tuple3,t,f0,user,class,t,f1,user,t,f2,row,user,return,t
