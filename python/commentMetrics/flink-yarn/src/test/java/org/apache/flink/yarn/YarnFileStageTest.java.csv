# id;timestamp;commentText;codeText;commentWords;codeWords
YarnFileStageTest -> static void testCopyFromLocalRecursive( 			FileSystem targetFileSystem, 			Path targetDir, 			TemporaryFolder tempFolder, 			boolean addSchemeToLocalPath) throws Exception;1512378085;Verifies that nested directories are properly copied with the given filesystem and paths.__@param targetFileSystem_file system of the target path_@param targetDir_target path (URI like <tt>hdfs://...</tt>)_@param tempFolder_JUnit temporary folder rule to create the source directory with_@param addSchemeToLocalPath_whether add the <tt>file://</tt> scheme to the local path to copy from;static void testCopyFromLocalRecursive(_			FileSystem targetFileSystem,_			Path targetDir,_			TemporaryFolder tempFolder,_			boolean addSchemeToLocalPath) throws Exception {__		_		assertFalse(targetFileSystem.exists(targetDir))___		final File srcDir = tempFolder.newFolder()__		final Path srcPath__		if (addSchemeToLocalPath) {_			srcPath = new Path("file://" + srcDir.getAbsolutePath())__		} else {_			srcPath = new Path(srcDir.getAbsolutePath())__		}__		HashMap<String ,  String> srcFiles = new HashMap<>(4)___		_		srcFiles.put("1", "Hello 1")__		srcFiles.put("2", "Hello 2")__		srcFiles.put("nested/3", "Hello nested/3")__		srcFiles.put("nested/4/5", "Hello nested/4/5")__		for (Map.Entry<String, String> src : srcFiles.entrySet()) {_			File file = new File(srcDir, src.getKey())__			_			file.getParentFile().mkdirs()__			try (DataOutputStream out = new DataOutputStream(new FileOutputStream(file))) {_				out.writeUTF(src.getValue())__			}_		}__		_		try {_			List<Path> remotePaths = new ArrayList<>()__			HashMap<String, LocalResource> localResources = new HashMap<>()__			AbstractYarnClusterDescriptor.uploadAndRegisterFiles(_				Collections.singletonList(new File(srcPath.toUri().getPath())),_				targetFileSystem,_				targetDir,_				ApplicationId.newInstance(0, 0),_				remotePaths,_				localResources,_				new StringBuilder())__			assertEquals(srcFiles.size(), localResources.size())___			Path workDir = ConverterUtils_				.getPathFromYarnURL(localResources.get(srcPath.getName() + "/1").getResource())_				.getParent()___			RemoteIterator<LocatedFileStatus> targetFilesIterator =_				targetFileSystem.listFiles(workDir, true)__			HashMap<String ,  String> targetFiles =_				new HashMap<>(4)___			final int workDirPrefixLength =_				workDir.toString().length() + 1_ _			while (targetFilesIterator.hasNext()) {_				LocatedFileStatus targetFile = targetFilesIterator.next()___				try (FSDataInputStream in = targetFileSystem.open(targetFile.getPath())) {_					String absolutePathString = targetFile.getPath().toString()__					String relativePath = absolutePathString.substring(workDirPrefixLength)__					targetFiles.put(relativePath, in.readUTF())___					assertEquals("extraneous data in file " + relativePath, -1, in.read())__				}_			}__			assertThat(targetFiles, equalTo(srcFiles))__		} finally {_			_			targetFileSystem.delete(targetDir, true)__		}_	};verifies,that,nested,directories,are,properly,copied,with,the,given,filesystem,and,paths,param,target,file,system,file,system,of,the,target,path,param,target,dir,target,path,uri,like,tt,hdfs,tt,param,temp,folder,junit,temporary,folder,rule,to,create,the,source,directory,with,param,add,scheme,to,local,path,whether,add,the,tt,file,tt,scheme,to,the,local,path,to,copy,from;static,void,test,copy,from,local,recursive,file,system,target,file,system,path,target,dir,temporary,folder,temp,folder,boolean,add,scheme,to,local,path,throws,exception,assert,false,target,file,system,exists,target,dir,final,file,src,dir,temp,folder,new,folder,final,path,src,path,if,add,scheme,to,local,path,src,path,new,path,file,src,dir,get,absolute,path,else,src,path,new,path,src,dir,get,absolute,path,hash,map,string,string,src,files,new,hash,map,4,src,files,put,1,hello,1,src,files,put,2,hello,2,src,files,put,nested,3,hello,nested,3,src,files,put,nested,4,5,hello,nested,4,5,for,map,entry,string,string,src,src,files,entry,set,file,file,new,file,src,dir,src,get,key,file,get,parent,file,mkdirs,try,data,output,stream,out,new,data,output,stream,new,file,output,stream,file,out,write,utf,src,get,value,try,list,path,remote,paths,new,array,list,hash,map,string,local,resource,local,resources,new,hash,map,abstract,yarn,cluster,descriptor,upload,and,register,files,collections,singleton,list,new,file,src,path,to,uri,get,path,target,file,system,target,dir,application,id,new,instance,0,0,remote,paths,local,resources,new,string,builder,assert,equals,src,files,size,local,resources,size,path,work,dir,converter,utils,get,path,from,yarn,url,local,resources,get,src,path,get,name,1,get,resource,get,parent,remote,iterator,located,file,status,target,files,iterator,target,file,system,list,files,work,dir,true,hash,map,string,string,target,files,new,hash,map,4,final,int,work,dir,prefix,length,work,dir,to,string,length,1,while,target,files,iterator,has,next,located,file,status,target,file,target,files,iterator,next,try,fsdata,input,stream,in,target,file,system,open,target,file,get,path,string,absolute,path,string,target,file,get,path,to,string,string,relative,path,absolute,path,string,substring,work,dir,prefix,length,target,files,put,relative,path,in,read,utf,assert,equals,extraneous,data,in,file,relative,path,1,in,read,assert,that,target,files,equal,to,src,files,finally,target,file,system,delete,target,dir,true
YarnFileStageTest -> static void testCopyFromLocalRecursive( 			FileSystem targetFileSystem, 			Path targetDir, 			TemporaryFolder tempFolder, 			boolean addSchemeToLocalPath) throws Exception;1520248673;Verifies that nested directories are properly copied with the given filesystem and paths.__@param targetFileSystem_file system of the target path_@param targetDir_target path (URI like <tt>hdfs://...</tt>)_@param tempFolder_JUnit temporary folder rule to create the source directory with_@param addSchemeToLocalPath_whether add the <tt>file://</tt> scheme to the local path to copy from;static void testCopyFromLocalRecursive(_			FileSystem targetFileSystem,_			Path targetDir,_			TemporaryFolder tempFolder,_			boolean addSchemeToLocalPath) throws Exception {__		_		assertFalse(targetFileSystem.exists(targetDir))___		final File srcDir = tempFolder.newFolder()__		final Path srcPath__		if (addSchemeToLocalPath) {_			srcPath = new Path("file://" + srcDir.getAbsolutePath())__		} else {_			srcPath = new Path(srcDir.getAbsolutePath())__		}__		HashMap<String ,  String> srcFiles = new HashMap<>(4)___		_		srcFiles.put("1", "Hello 1")__		srcFiles.put("2", "Hello 2")__		srcFiles.put("nested/3", "Hello nested/3")__		srcFiles.put("nested/4/5", "Hello nested/4/5")__		for (Map.Entry<String, String> src : srcFiles.entrySet()) {_			File file = new File(srcDir, src.getKey())__			_			file.getParentFile().mkdirs()__			try (DataOutputStream out = new DataOutputStream(new FileOutputStream(file))) {_				out.writeUTF(src.getValue())__			}_		}__		_		try {_			List<Path> remotePaths = new ArrayList<>()__			HashMap<String, LocalResource> localResources = new HashMap<>()__			AbstractYarnClusterDescriptor.uploadAndRegisterFiles(_				Collections.singletonList(new File(srcPath.toUri().getPath())),_				targetFileSystem,_				targetDir,_				ApplicationId.newInstance(0, 0),_				remotePaths,_				localResources,_				new StringBuilder())__			assertEquals(srcFiles.size(), localResources.size())___			Path workDir = ConverterUtils_				.getPathFromYarnURL(localResources.get(srcPath.getName() + "/1").getResource())_				.getParent()___			RemoteIterator<LocatedFileStatus> targetFilesIterator =_				targetFileSystem.listFiles(workDir, true)__			HashMap<String ,  String> targetFiles =_				new HashMap<>(4)___			final int workDirPrefixLength =_				workDir.toString().length() + 1_ _			while (targetFilesIterator.hasNext()) {_				LocatedFileStatus targetFile = targetFilesIterator.next()___				int retries = 5__				do {_					try (FSDataInputStream in = targetFileSystem.open(targetFile.getPath())) {_						String absolutePathString = targetFile.getPath().toString()__						String relativePath = absolutePathString.substring(workDirPrefixLength)__						targetFiles.put(relativePath, in.readUTF())___						assertEquals("extraneous data in file " + relativePath, -1, in.read())__						break__					} catch (FileNotFoundException e) {_						_						_						_						_						Thread.sleep(50)__					}_				} while ((retries--) > 0)__			}__			assertThat(targetFiles, equalTo(srcFiles))__		} finally {_			_			targetFileSystem.delete(targetDir, true)__		}_	};verifies,that,nested,directories,are,properly,copied,with,the,given,filesystem,and,paths,param,target,file,system,file,system,of,the,target,path,param,target,dir,target,path,uri,like,tt,hdfs,tt,param,temp,folder,junit,temporary,folder,rule,to,create,the,source,directory,with,param,add,scheme,to,local,path,whether,add,the,tt,file,tt,scheme,to,the,local,path,to,copy,from;static,void,test,copy,from,local,recursive,file,system,target,file,system,path,target,dir,temporary,folder,temp,folder,boolean,add,scheme,to,local,path,throws,exception,assert,false,target,file,system,exists,target,dir,final,file,src,dir,temp,folder,new,folder,final,path,src,path,if,add,scheme,to,local,path,src,path,new,path,file,src,dir,get,absolute,path,else,src,path,new,path,src,dir,get,absolute,path,hash,map,string,string,src,files,new,hash,map,4,src,files,put,1,hello,1,src,files,put,2,hello,2,src,files,put,nested,3,hello,nested,3,src,files,put,nested,4,5,hello,nested,4,5,for,map,entry,string,string,src,src,files,entry,set,file,file,new,file,src,dir,src,get,key,file,get,parent,file,mkdirs,try,data,output,stream,out,new,data,output,stream,new,file,output,stream,file,out,write,utf,src,get,value,try,list,path,remote,paths,new,array,list,hash,map,string,local,resource,local,resources,new,hash,map,abstract,yarn,cluster,descriptor,upload,and,register,files,collections,singleton,list,new,file,src,path,to,uri,get,path,target,file,system,target,dir,application,id,new,instance,0,0,remote,paths,local,resources,new,string,builder,assert,equals,src,files,size,local,resources,size,path,work,dir,converter,utils,get,path,from,yarn,url,local,resources,get,src,path,get,name,1,get,resource,get,parent,remote,iterator,located,file,status,target,files,iterator,target,file,system,list,files,work,dir,true,hash,map,string,string,target,files,new,hash,map,4,final,int,work,dir,prefix,length,work,dir,to,string,length,1,while,target,files,iterator,has,next,located,file,status,target,file,target,files,iterator,next,int,retries,5,do,try,fsdata,input,stream,in,target,file,system,open,target,file,get,path,string,absolute,path,string,target,file,get,path,to,string,string,relative,path,absolute,path,string,substring,work,dir,prefix,length,target,files,put,relative,path,in,read,utf,assert,equals,extraneous,data,in,file,relative,path,1,in,read,break,catch,file,not,found,exception,e,thread,sleep,50,while,retries,0,assert,that,target,files,equal,to,src,files,finally,target,file,system,delete,target,dir,true
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception;1510999087;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>/absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, false)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,without,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,false
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception;1512378085;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>/absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, false)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,without,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,false
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception;1520248673;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>/absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithoutScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, false)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,without,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,false
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithScheme() throws Exception;1510999087;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>file:///absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, true)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,file,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,with,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,true
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithScheme() throws Exception;1512378085;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>file:///absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, true)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,file,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,with,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,true
YarnFileStageTest -> @Test 	public void testCopyFromLocalRecursiveWithScheme() throws Exception;1520248673;Verifies that nested directories are properly copied with a <tt>hdfs://</tt> file_system (from a <tt>file:///absolute/path</tt> source path).;@Test_	public void testCopyFromLocalRecursiveWithScheme() throws Exception {_		final FileSystem targetFileSystem = hdfsRootPath.getFileSystem(hadoopConfig)__		final Path targetDir = targetFileSystem.getWorkingDirectory()___		testCopyFromLocalRecursive(targetFileSystem, targetDir, tempFolder, true)__	};verifies,that,nested,directories,are,properly,copied,with,a,tt,hdfs,tt,file,system,from,a,tt,file,absolute,path,tt,source,path;test,public,void,test,copy,from,local,recursive,with,scheme,throws,exception,final,file,system,target,file,system,hdfs,root,path,get,file,system,hadoop,config,final,path,target,dir,target,file,system,get,working,directory,test,copy,from,local,recursive,target,file,system,target,dir,temp,folder,true
