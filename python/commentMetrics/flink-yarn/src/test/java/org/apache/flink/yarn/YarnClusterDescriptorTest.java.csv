# id;timestamp;commentText;codeText;commentWords;codeWords
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1515699606;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			temporaryFolder.getRoot().getAbsolutePath(),_			YarnClient.createYarnClient())___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,create,yarn,client,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1515770044;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			temporaryFolder.getRoot().getAbsolutePath(),_			YarnClient.createYarnClient())___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,create,yarn,client,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1520030750;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1521626214;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1522681180;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1541670646;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testEnvironmentLibShipping() throws Exception;1542614389;Tests to ship a lib folder through the {@code ConfigConstants.ENV_FLINK_LIB_DIR}.;@Test_	public void testEnvironmentLibShipping() throws Exception {_		try (YarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)) {_			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()__			File libFile = new File(libFolder, "libFile.jar")__			libFile.createNewFile()___			Set<File> effectiveShipFiles = new HashSet<>()___			final Map<String, String> oldEnv = System.getenv()__			try {_				Map<String, String> env = new HashMap<>(1)__				env.put(ConfigConstants.ENV_FLINK_LIB_DIR, libFolder.getAbsolutePath())__				CommonTestUtils.setEnv(env)__				_				descriptor.addLibFolderToShipFiles(effectiveShipFiles)__			} finally {_				CommonTestUtils.setEnv(oldEnv)__			}__			_			Assert.assertFalse(effectiveShipFiles.contains(libFile))__			Assert.assertTrue(effectiveShipFiles.contains(libFolder))__			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))__		}_	};tests,to,ship,a,lib,folder,through,the,code,config,constants;test,public,void,test,environment,lib,shipping,throws,exception,try,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,file,lib,folder,temporary,folder,new,folder,get,absolute,file,file,lib,file,new,file,lib,folder,lib,file,jar,lib,file,create,new,file,set,file,effective,ship,files,new,hash,set,final,map,string,string,old,env,system,getenv,try,map,string,string,env,new,hash,map,1,env,put,config,constants,lib,folder,get,absolute,path,common,test,utils,set,env,env,descriptor,add,lib,folder,to,ship,files,effective,ship,files,finally,common,test,utils,set,env,old,env,assert,assert,false,effective,ship,files,contains,lib,file,assert,assert,true,effective,ship,files,contains,lib,folder,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1515699606;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			temporaryFolder.getRoot().getAbsolutePath(),_			YarnClient.createYarnClient())___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,create,yarn,client,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1515770044;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			temporaryFolder.getRoot().getAbsolutePath(),_			YarnClient.createYarnClient())___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,create,yarn,client,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1520030750;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1521626214;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1522681180;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1541670646;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		AbstractYarnClusterDescriptor descriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		try {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		} finally {_			descriptor.close()__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,abstract,yarn,cluster,descriptor,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,try,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,finally,descriptor,close
YarnClusterDescriptorTest -> @Test 	public void testExplicitLibShipping() throws Exception;1542614389;Tests to ship a lib folder through the {@code YarnClusterDescriptor.addShipFiles}.;@Test_	public void testExplicitLibShipping() throws Exception {_		try (YarnClusterDescriptor descriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)) {_			descriptor.setLocalJarPath(new Path("/path/to/flink.jar"))___			File libFile = temporaryFolder.newFile("libFile.jar")__			File libFolder = temporaryFolder.newFolder().getAbsoluteFile()___			Assert.assertFalse(descriptor.shipFiles.contains(libFile))__			Assert.assertFalse(descriptor.shipFiles.contains(libFolder))___			List<File> shipFiles = new ArrayList<>()__			shipFiles.add(libFile)__			shipFiles.add(libFolder)___			descriptor.addShipFiles(shipFiles)___			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))___			_			Set<File> effectiveShipFiles = new HashSet<>()__			descriptor.addLibFolderToShipFiles(effectiveShipFiles)___			Assert.assertEquals(0, effectiveShipFiles.size())__			Assert.assertEquals(2, descriptor.shipFiles.size())__			Assert.assertTrue(descriptor.shipFiles.contains(libFile))__			Assert.assertTrue(descriptor.shipFiles.contains(libFolder))__		}_	};tests,to,ship,a,lib,folder,through,the,code,yarn,cluster,descriptor,add,ship,files;test,public,void,test,explicit,lib,shipping,throws,exception,try,yarn,cluster,descriptor,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,descriptor,set,local,jar,path,new,path,path,to,flink,jar,file,lib,file,temporary,folder,new,file,lib,file,jar,file,lib,folder,temporary,folder,new,folder,get,absolute,file,assert,assert,false,descriptor,ship,files,contains,lib,file,assert,assert,false,descriptor,ship,files,contains,lib,folder,list,file,ship,files,new,array,list,ship,files,add,lib,file,ship,files,add,lib,folder,descriptor,add,ship,files,ship,files,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder,set,file,effective,ship,files,new,hash,set,descriptor,add,lib,folder,to,ship,files,effective,ship,files,assert,assert,equals,0,effective,ship,files,size,assert,assert,equals,2,descriptor,ship,files,size,assert,assert,true,descriptor,ship,files,contains,lib,file,assert,assert,true,descriptor,ship,files,contains,lib,folder
YarnClusterDescriptorTest -> @Test 	public void testYarnClientShutDown();1520030750;Tests that the YarnClient is only shut down if it is not shared.;@Test_	public void testYarnClientShutDown() {_		YarnClusterDescriptor yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		yarnClusterDescriptor.close()___		assertTrue(yarnClient.isInState(Service.STATE.STARTED))___		final YarnClient closableYarnClient = YarnClient.createYarnClient()__		closableYarnClient.init(yarnConfiguration)__		closableYarnClient.start()___		yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			closableYarnClient,_			false)___		yarnClusterDescriptor.close()___		assertTrue(closableYarnClient.isInState(Service.STATE.STOPPED))__	};tests,that,the,yarn,client,is,only,shut,down,if,it,is,not,shared;test,public,void,test,yarn,client,shut,down,yarn,cluster,descriptor,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,yarn,cluster,descriptor,close,assert,true,yarn,client,is,in,state,service,state,started,final,yarn,client,closable,yarn,client,yarn,client,create,yarn,client,closable,yarn,client,init,yarn,configuration,closable,yarn,client,start,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,closable,yarn,client,false,yarn,cluster,descriptor,close,assert,true,closable,yarn,client,is,in,state,service,state,stopped
YarnClusterDescriptorTest -> @Test 	public void testYarnClientShutDown();1521626214;Tests that the YarnClient is only shut down if it is not shared.;@Test_	public void testYarnClientShutDown() {_		YarnClusterDescriptor yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		yarnClusterDescriptor.close()___		assertTrue(yarnClient.isInState(Service.STATE.STARTED))___		final YarnClient closableYarnClient = YarnClient.createYarnClient()__		closableYarnClient.init(yarnConfiguration)__		closableYarnClient.start()___		yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			closableYarnClient,_			false)___		yarnClusterDescriptor.close()___		assertTrue(closableYarnClient.isInState(Service.STATE.STOPPED))__	};tests,that,the,yarn,client,is,only,shut,down,if,it,is,not,shared;test,public,void,test,yarn,client,shut,down,yarn,cluster,descriptor,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,yarn,cluster,descriptor,close,assert,true,yarn,client,is,in,state,service,state,started,final,yarn,client,closable,yarn,client,yarn,client,create,yarn,client,closable,yarn,client,init,yarn,configuration,closable,yarn,client,start,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,closable,yarn,client,false,yarn,cluster,descriptor,close,assert,true,closable,yarn,client,is,in,state,service,state,stopped
YarnClusterDescriptorTest -> @Test 	public void testYarnClientShutDown();1522681180;Tests that the YarnClient is only shut down if it is not shared.;@Test_	public void testYarnClientShutDown() {_		LegacyYarnClusterDescriptor yarnClusterDescriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		yarnClusterDescriptor.close()___		assertTrue(yarnClient.isInState(Service.STATE.STARTED))___		final YarnClient closableYarnClient = YarnClient.createYarnClient()__		closableYarnClient.init(yarnConfiguration)__		closableYarnClient.start()___		yarnClusterDescriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			closableYarnClient,_			false)___		yarnClusterDescriptor.close()___		assertTrue(closableYarnClient.isInState(Service.STATE.STOPPED))__	};tests,that,the,yarn,client,is,only,shut,down,if,it,is,not,shared;test,public,void,test,yarn,client,shut,down,legacy,yarn,cluster,descriptor,yarn,cluster,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,yarn,cluster,descriptor,close,assert,true,yarn,client,is,in,state,service,state,started,final,yarn,client,closable,yarn,client,yarn,client,create,yarn,client,closable,yarn,client,init,yarn,configuration,closable,yarn,client,start,yarn,cluster,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,closable,yarn,client,false,yarn,cluster,descriptor,close,assert,true,closable,yarn,client,is,in,state,service,state,stopped
YarnClusterDescriptorTest -> @Test 	public void testYarnClientShutDown();1541670646;Tests that the YarnClient is only shut down if it is not shared.;@Test_	public void testYarnClientShutDown() {_		LegacyYarnClusterDescriptor yarnClusterDescriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		yarnClusterDescriptor.close()___		assertTrue(yarnClient.isInState(Service.STATE.STARTED))___		final YarnClient closableYarnClient = YarnClient.createYarnClient()__		closableYarnClient.init(yarnConfiguration)__		closableYarnClient.start()___		yarnClusterDescriptor = new LegacyYarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			closableYarnClient,_			false)___		yarnClusterDescriptor.close()___		assertTrue(closableYarnClient.isInState(Service.STATE.STOPPED))__	};tests,that,the,yarn,client,is,only,shut,down,if,it,is,not,shared;test,public,void,test,yarn,client,shut,down,legacy,yarn,cluster,descriptor,yarn,cluster,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,yarn,cluster,descriptor,close,assert,true,yarn,client,is,in,state,service,state,started,final,yarn,client,closable,yarn,client,yarn,client,create,yarn,client,closable,yarn,client,init,yarn,configuration,closable,yarn,client,start,yarn,cluster,descriptor,new,legacy,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,closable,yarn,client,false,yarn,cluster,descriptor,close,assert,true,closable,yarn,client,is,in,state,service,state,stopped
YarnClusterDescriptorTest -> @Test 	public void testYarnClientShutDown();1542614389;Tests that the YarnClient is only shut down if it is not shared.;@Test_	public void testYarnClientShutDown() {_		YarnClusterDescriptor yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			yarnClient,_			true)___		yarnClusterDescriptor.close()___		assertTrue(yarnClient.isInState(Service.STATE.STARTED))___		final YarnClient closableYarnClient = YarnClient.createYarnClient()__		closableYarnClient.init(yarnConfiguration)__		closableYarnClient.start()___		yarnClusterDescriptor = new YarnClusterDescriptor(_			new Configuration(),_			yarnConfiguration,_			temporaryFolder.getRoot().getAbsolutePath(),_			closableYarnClient,_			false)___		yarnClusterDescriptor.close()___		assertTrue(closableYarnClient.isInState(Service.STATE.STOPPED))__	};tests,that,the,yarn,client,is,only,shut,down,if,it,is,not,shared;test,public,void,test,yarn,client,shut,down,yarn,cluster,descriptor,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,yarn,client,true,yarn,cluster,descriptor,close,assert,true,yarn,client,is,in,state,service,state,started,final,yarn,client,closable,yarn,client,yarn,client,create,yarn,client,closable,yarn,client,init,yarn,configuration,closable,yarn,client,start,yarn,cluster,descriptor,new,yarn,cluster,descriptor,new,configuration,yarn,configuration,temporary,folder,get,root,get,absolute,path,closable,yarn,client,false,yarn,cluster,descriptor,close,assert,true,closable,yarn,client,is,in,state,service,state,stopped
