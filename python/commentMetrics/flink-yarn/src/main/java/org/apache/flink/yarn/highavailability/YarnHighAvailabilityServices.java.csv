# id;timestamp;commentText;codeText;commentWords;codeWords
YarnHighAvailabilityServices -> boolean enterUnlessClosed();1482522867;Acquires the lock and checks whether the services are already closed. If they are_already closed, the method releases the lock and returns {@code false}.__@return True, if the lock was acquired and the services are not closed, false if the services are closed.;boolean enterUnlessClosed() {_		lock.lock()__		if (!closed) {_			return true__		} else {_			lock.unlock()__			return false__		}_	};acquires,the,lock,and,checks,whether,the,services,are,already,closed,if,they,are,already,closed,the,method,releases,the,lock,and,returns,code,false,return,true,if,the,lock,was,acquired,and,the,services,are,not,closed,false,if,the,services,are,closed;boolean,enter,unless,closed,lock,lock,if,closed,return,true,else,lock,unlock,return,false
YarnHighAvailabilityServices -> boolean enterUnlessClosed();1493975155;Acquires the lock and checks whether the services are already closed. If they are_already closed, the method releases the lock and returns {@code false}.__@return True, if the lock was acquired and the services are not closed, false if the services are closed.;boolean enterUnlessClosed() {_		lock.lock()__		if (!closed) {_			return true__		} else {_			lock.unlock()__			return false__		}_	};acquires,the,lock,and,checks,whether,the,services,are,already,closed,if,they,are,already,closed,the,method,releases,the,lock,and,returns,code,false,return,true,if,the,lock,was,acquired,and,the,services,are,not,closed,false,if,the,services,are,closed;boolean,enter,unless,closed,lock,lock,if,closed,return,true,else,lock,unlock,return,false
YarnHighAvailabilityServices -> boolean enterUnlessClosed();1495001929;Acquires the lock and checks whether the services are already closed. If they are_already closed, the method releases the lock and returns {@code false}.__@return True, if the lock was acquired and the services are not closed, false if the services are closed.;boolean enterUnlessClosed() {_		lock.lock()__		if (!closed) {_			return true__		} else {_			lock.unlock()__			return false__		}_	};acquires,the,lock,and,checks,whether,the,services,are,already,closed,if,they,are,already,closed,the,method,releases,the,lock,and,returns,code,false,return,true,if,the,lock,was,acquired,and,the,services,are,not,closed,false,if,the,services,are,closed;boolean,enter,unless,closed,lock,lock,if,closed,return,true,else,lock,unlock,return,false
YarnHighAvailabilityServices -> boolean enterUnlessClosed();1495819079;Acquires the lock and checks whether the services are already closed. If they are_already closed, the method releases the lock and returns {@code false}.__@return True, if the lock was acquired and the services are not closed, false if the services are closed.;boolean enterUnlessClosed() {_		lock.lock()__		if (!closed) {_			return true__		} else {_			lock.unlock()__			return false__		}_	};acquires,the,lock,and,checks,whether,the,services,are,already,closed,if,they,are,already,closed,the,method,releases,the,lock,and,returns,code,false,return,true,if,the,lock,was,acquired,and,the,services,are,not,closed,false,if,the,services,are,closed;boolean,enter,unless,closed,lock,lock,if,closed,return,true,else,lock,unlock,return,false
YarnHighAvailabilityServices -> boolean enterUnlessClosed();1507281370;Acquires the lock and checks whether the services are already closed. If they are_already closed, the method releases the lock and returns {@code false}.__@return True, if the lock was acquired and the services are not closed, false if the services are closed.;boolean enterUnlessClosed() {_		lock.lock()__		if (!closed) {_			return true__		} else {_			lock.unlock()__			return false__		}_	};acquires,the,lock,and,checks,whether,the,services,are,already,closed,if,they,are,already,closed,the,method,releases,the,lock,and,returns,code,false,return,true,if,the,lock,was,acquired,and,the,services,are,not,closed,false,if,the,services,are,closed;boolean,enter,unless,closed,lock,lock,if,closed,return,true,else,lock,unlock,return,false
YarnHighAvailabilityServices -> public boolean isClosed();1482522867;Checks whether these services have been shut down.__@return True, if this instance has been shut down, false if it still operational.;public boolean isClosed() {_		return closed__	};checks,whether,these,services,have,been,shut,down,return,true,if,this,instance,has,been,shut,down,false,if,it,still,operational;public,boolean,is,closed,return,closed
YarnHighAvailabilityServices -> public boolean isClosed();1493975155;Checks whether these services have been shut down.__@return True, if this instance has been shut down, false if it still operational.;public boolean isClosed() {_		return closed__	};checks,whether,these,services,have,been,shut,down,return,true,if,this,instance,has,been,shut,down,false,if,it,still,operational;public,boolean,is,closed,return,closed
YarnHighAvailabilityServices -> public boolean isClosed();1495001929;Checks whether these services have been shut down.__@return True, if this instance has been shut down, false if it still operational.;public boolean isClosed() {_		return closed__	};checks,whether,these,services,have,been,shut,down,return,true,if,this,instance,has,been,shut,down,false,if,it,still,operational;public,boolean,is,closed,return,closed
YarnHighAvailabilityServices -> public boolean isClosed();1495819079;Checks whether these services have been shut down.__@return True, if this instance has been shut down, false if it still operational.;public boolean isClosed() {_		return closed__	};checks,whether,these,services,have,been,shut,down,return,true,if,this,instance,has,been,shut,down,false,if,it,still,operational;public,boolean,is,closed,return,closed
YarnHighAvailabilityServices -> public boolean isClosed();1507281370;Checks whether these services have been shut down.__@return True, if this instance has been shut down, false if it still operational.;public boolean isClosed() {_		return closed__	};checks,whether,these,services,have,been,shut,down,return,true,if,this,instance,has,been,shut,down,false,if,it,still,operational;public,boolean,is,closed,return,closed
YarnHighAvailabilityServices -> void exit();1482522867;To be called at the end of every method that creates an HA service. Releases the lock.;void exit() {_		lock.unlock()__	};to,be,called,at,the,end,of,every,method,that,creates,an,ha,service,releases,the,lock;void,exit,lock,unlock
YarnHighAvailabilityServices -> void exit();1493975155;To be called at the end of every method that creates an HA service. Releases the lock.;void exit() {_		lock.unlock()__	};to,be,called,at,the,end,of,every,method,that,creates,an,ha,service,releases,the,lock;void,exit,lock,unlock
YarnHighAvailabilityServices -> void exit();1495001929;To be called at the end of every method that creates an HA service. Releases the lock.;void exit() {_		lock.unlock()__	};to,be,called,at,the,end,of,every,method,that,creates,an,ha,service,releases,the,lock;void,exit,lock,unlock
YarnHighAvailabilityServices -> void exit();1495819079;To be called at the end of every method that creates an HA service. Releases the lock.;void exit() {_		lock.unlock()__	};to,be,called,at,the,end,of,every,method,that,creates,an,ha,service,releases,the,lock;void,exit,lock,unlock
YarnHighAvailabilityServices -> void exit();1507281370;To be called at the end of every method that creates an HA service. Releases the lock.;void exit() {_		lock.unlock()__	};to,be,called,at,the,end,of,every,method,that,creates,an,ha,service,releases,the,lock;void,exit,lock,unlock
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forSingleJobAppMaster( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1482522867;Creates the high-availability services for a single-job Flink YARN application, to be_used in the Application Master that runs both ResourceManager and JobManager.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forSingleJobAppMaster(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,a,single,job,flink,yarn,application,to,be,used,in,the,application,master,that,runs,both,resource,manager,and,job,manager,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,single,job,app,master,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,intra,non,ha,master,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forSingleJobAppMaster( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1493975155;Creates the high-availability services for a single-job Flink YARN application, to be_used in the Application Master that runs both ResourceManager and JobManager.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forSingleJobAppMaster(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,a,single,job,flink,yarn,application,to,be,used,in,the,application,master,that,runs,both,resource,manager,and,job,manager,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,single,job,app,master,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,intra,non,ha,master,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forSingleJobAppMaster( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1495001929;Creates the high-availability services for a single-job Flink YARN application, to be_used in the Application Master that runs both ResourceManager and JobManager.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forSingleJobAppMaster(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,a,single,job,flink,yarn,application,to,be,used,in,the,application,master,that,runs,both,resource,manager,and,job,manager,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,single,job,app,master,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,intra,non,ha,master,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forSingleJobAppMaster( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1495819079;Creates the high-availability services for a single-job Flink YARN application, to be_used in the Application Master that runs both ResourceManager and JobManager.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forSingleJobAppMaster(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,a,single,job,flink,yarn,application,to,be,used,in,the,application,master,that,runs,both,resource,manager,and,job,manager,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,single,job,app,master,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,intra,non,ha,master,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forSingleJobAppMaster( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1507281370;Creates the high-availability services for a single-job Flink YARN application, to be_used in the Application Master that runs both ResourceManager and JobManager.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forSingleJobAppMaster(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnIntraNonHaMasterServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,a,single,job,flink,yarn,application,to,be,used,in,the,application,master,that,runs,both,resource,manager,and,job,manager,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,single,job,app,master,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,intra,non,ha,master,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> void enter();1482522867;To be called at the beginning of every method that creates an HA service. Acquires the lock_and check whether this HighAvailabilityServices instance is shut down.;void enter() {_		if (!enterUnlessClosed()) {_			throw new IllegalStateException("closed")__		}_	};to,be,called,at,the,beginning,of,every,method,that,creates,an,ha,service,acquires,the,lock,and,check,whether,this,high,availability,services,instance,is,shut,down;void,enter,if,enter,unless,closed,throw,new,illegal,state,exception,closed
YarnHighAvailabilityServices -> void enter();1493975155;To be called at the beginning of every method that creates an HA service. Acquires the lock_and check whether this HighAvailabilityServices instance is shut down.;void enter() {_		if (!enterUnlessClosed()) {_			throw new IllegalStateException("closed")__		}_	};to,be,called,at,the,beginning,of,every,method,that,creates,an,ha,service,acquires,the,lock,and,check,whether,this,high,availability,services,instance,is,shut,down;void,enter,if,enter,unless,closed,throw,new,illegal,state,exception,closed
YarnHighAvailabilityServices -> void enter();1495001929;To be called at the beginning of every method that creates an HA service. Acquires the lock_and check whether this HighAvailabilityServices instance is shut down.;void enter() {_		if (!enterUnlessClosed()) {_			throw new IllegalStateException("closed")__		}_	};to,be,called,at,the,beginning,of,every,method,that,creates,an,ha,service,acquires,the,lock,and,check,whether,this,high,availability,services,instance,is,shut,down;void,enter,if,enter,unless,closed,throw,new,illegal,state,exception,closed
YarnHighAvailabilityServices -> void enter();1495819079;To be called at the beginning of every method that creates an HA service. Acquires the lock_and check whether this HighAvailabilityServices instance is shut down.;void enter() {_		if (!enterUnlessClosed()) {_			throw new IllegalStateException("closed")__		}_	};to,be,called,at,the,beginning,of,every,method,that,creates,an,ha,service,acquires,the,lock,and,check,whether,this,high,availability,services,instance,is,shut,down;void,enter,if,enter,unless,closed,throw,new,illegal,state,exception,closed
YarnHighAvailabilityServices -> void enter();1507281370;To be called at the beginning of every method that creates an HA service. Acquires the lock_and check whether this HighAvailabilityServices instance is shut down.;void enter() {_		if (!enterUnlessClosed()) {_			throw new IllegalStateException("closed")__		}_	};to,be,called,at,the,beginning,of,every,method,that,creates,an,ha,service,acquires,the,lock,and,check,whether,this,high,availability,services,instance,is,shut,down;void,enter,if,enter,unless,closed,throw,new,illegal,state,exception,closed
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forYarnTaskManager( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1482522867;Creates the high-availability services for the TaskManagers participating in_a Flink YARN application.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forYarnTaskManager(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnPreConfiguredMasterNonHaServices(flinkConfig, hadoopConfig)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,the,task,managers,participating,in,a,flink,yarn,application,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,yarn,task,manager,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,pre,configured,master,non,ha,services,flink,config,hadoop,config,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forYarnTaskManager( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1493975155;Creates the high-availability services for the TaskManagers participating in_a Flink YARN application.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forYarnTaskManager(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnPreConfiguredMasterNonHaServices(_					flinkConfig,_					hadoopConfig,_					HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,the,task,managers,participating,in,a,flink,yarn,application,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,yarn,task,manager,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,pre,configured,master,non,ha,services,flink,config,hadoop,config,high,availability,services,utils,address,resolution,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forYarnTaskManager( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1495001929;Creates the high-availability services for the TaskManagers participating in_a Flink YARN application.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forYarnTaskManager(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnPreConfiguredMasterNonHaServices(_					flinkConfig,_					hadoopConfig,_					HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,the,task,managers,participating,in,a,flink,yarn,application,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,yarn,task,manager,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,pre,configured,master,non,ha,services,flink,config,hadoop,config,high,availability,services,utils,address,resolution,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forYarnTaskManager( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1495819079;Creates the high-availability services for the TaskManagers participating in_a Flink YARN application.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forYarnTaskManager(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnPreConfiguredMasterNonHaServices(_					flinkConfig,_					hadoopConfig,_					HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,the,task,managers,participating,in,a,flink,yarn,application,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,yarn,task,manager,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,pre,configured,master,non,ha,services,flink,config,hadoop,config,high,availability,services,utils,address,resolution,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> public static YarnHighAvailabilityServices forYarnTaskManager( 			Configuration flinkConfig, 			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException;1507281370;Creates the high-availability services for the TaskManagers participating in_a Flink YARN application.__@param flinkConfig  The Flink configuration._@param hadoopConfig The Hadoop configuration for the YARN cluster.__@return The created high-availability services.__@throws IOException Thrown, if the high-availability services could not be initialized.;public static YarnHighAvailabilityServices forYarnTaskManager(_			Configuration flinkConfig,_			org.apache.hadoop.conf.Configuration hadoopConfig) throws IOException {__		checkNotNull(flinkConfig, "flinkConfig")__		checkNotNull(hadoopConfig, "hadoopConfig")___		final HighAvailabilityMode mode = HighAvailabilityMode.fromConfig(flinkConfig)__		switch (mode) {_			case NONE:_				return new YarnPreConfiguredMasterNonHaServices(_					flinkConfig,_					hadoopConfig,_					HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			case ZOOKEEPER:_				throw  new UnsupportedOperationException("to be implemented")___			default:_				throw new IllegalConfigurationException("Unrecognized high availability mode: " + mode)__		}_	};creates,the,high,availability,services,for,the,task,managers,participating,in,a,flink,yarn,application,param,flink,config,the,flink,configuration,param,hadoop,config,the,hadoop,configuration,for,the,yarn,cluster,return,the,created,high,availability,services,throws,ioexception,thrown,if,the,high,availability,services,could,not,be,initialized;public,static,yarn,high,availability,services,for,yarn,task,manager,configuration,flink,config,org,apache,hadoop,conf,configuration,hadoop,config,throws,ioexception,check,not,null,flink,config,flink,config,check,not,null,hadoop,config,hadoop,config,final,high,availability,mode,mode,high,availability,mode,from,config,flink,config,switch,mode,case,none,return,new,yarn,pre,configured,master,non,ha,services,flink,config,hadoop,config,high,availability,services,utils,address,resolution,case,zookeeper,throw,new,unsupported,operation,exception,to,be,implemented,default,throw,new,illegal,configuration,exception,unrecognized,high,availability,mode,mode
YarnHighAvailabilityServices -> protected YarnHighAvailabilityServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1482522867;Creates new YARN high-availability services, configuring the file system and recovery_data directory based on the working directory in the given Hadoop configuration.__<p>This class requires that the default Hadoop file system configured in the given_Hadoop configuration is an HDFS.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException Thrown, if the initialization of the Hadoop file system used by YARN fails.;protected YarnHighAvailabilityServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		checkNotNull(config)__		checkNotNull(hadoopConf)___		this.lock = new ReentrantLock()___		_		final URI fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConf)__		if (fsUri.getScheme() == null || !"hdfs".equals(fsUri.getScheme().toLowerCase())) {_			throw new IOException("Invalid file system found for YarnHighAvailabilityServices: " +_					"Expected 'hdfs', but found '" + fsUri.getScheme() + "'.")__		}__		_		_		_		try {_			final Class<? extends org.apache.hadoop.fs.FileSystem> fsClass =_					org.apache.hadoop.fs.FileSystem.getFileSystemClass(fsUri.getScheme(), hadoopConf)___			this.hadoopFileSystem = InstantiationUtil.instantiate(fsClass)__			this.hadoopFileSystem.initialize(fsUri, hadoopConf)__		}_		catch (Exception e) {_			throw new IOException("Cannot instantiate YARN's Hadoop file system for " + fsUri, e)__		}__		this.flinkFileSystem = new HadoopFileSystem(hadoopConf, hadoopFileSystem)___		this.workingDirectory = new Path(hadoopFileSystem.getWorkingDirectory().toUri())__		this.haDataDirectory = new Path(workingDirectory, FLINK_RECOVERY_DATA_DIR)___		_		try {_			flinkFileSystem.mkdirs(haDataDirectory)__		}_		catch (Exception e) {_			throw new IOException("Could not create the directory for recovery data in YARN's file system at '"_					+ haDataDirectory + "'.", e)__		}__		LOG.info("Flink YARN application will store recovery data at {}", haDataDirectory)__	};creates,new,yarn,high,availability,services,configuring,the,file,system,and,recovery,data,directory,based,on,the,working,directory,in,the,given,hadoop,configuration,p,this,class,requires,that,the,default,hadoop,file,system,configured,in,the,given,hadoop,configuration,is,an,hdfs,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails;protected,yarn,high,availability,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,check,not,null,config,check,not,null,hadoop,conf,this,lock,new,reentrant,lock,final,uri,fs,uri,org,apache,hadoop,fs,file,system,get,default,uri,hadoop,conf,if,fs,uri,get,scheme,null,hdfs,equals,fs,uri,get,scheme,to,lower,case,throw,new,ioexception,invalid,file,system,found,for,yarn,high,availability,services,expected,hdfs,but,found,fs,uri,get,scheme,try,final,class,extends,org,apache,hadoop,fs,file,system,fs,class,org,apache,hadoop,fs,file,system,get,file,system,class,fs,uri,get,scheme,hadoop,conf,this,hadoop,file,system,instantiation,util,instantiate,fs,class,this,hadoop,file,system,initialize,fs,uri,hadoop,conf,catch,exception,e,throw,new,ioexception,cannot,instantiate,yarn,s,hadoop,file,system,for,fs,uri,e,this,flink,file,system,new,hadoop,file,system,hadoop,conf,hadoop,file,system,this,working,directory,new,path,hadoop,file,system,get,working,directory,to,uri,this,ha,data,directory,new,path,working,directory,try,flink,file,system,mkdirs,ha,data,directory,catch,exception,e,throw,new,ioexception,could,not,create,the,directory,for,recovery,data,in,yarn,s,file,system,at,ha,data,directory,e,log,info,flink,yarn,application,will,store,recovery,data,at,ha,data,directory
YarnHighAvailabilityServices -> protected YarnHighAvailabilityServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1493975155;Creates new YARN high-availability services, configuring the file system and recovery_data directory based on the working directory in the given Hadoop configuration.__<p>This class requires that the default Hadoop file system configured in the given_Hadoop configuration is an HDFS.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException Thrown, if the initialization of the Hadoop file system used by YARN fails.;protected YarnHighAvailabilityServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		checkNotNull(config)__		checkNotNull(hadoopConf)___		this.lock = new ReentrantLock()___		_		final URI fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConf)__		if (fsUri.getScheme() == null || !"hdfs".equals(fsUri.getScheme().toLowerCase())) {_			throw new IOException("Invalid file system found for YarnHighAvailabilityServices: " +_					"Expected 'hdfs', but found '" + fsUri.getScheme() + "'.")__		}__		_		_		_		try {_			final Class<? extends org.apache.hadoop.fs.FileSystem> fsClass =_					org.apache.hadoop.fs.FileSystem.getFileSystemClass(fsUri.getScheme(), hadoopConf)___			this.hadoopFileSystem = InstantiationUtil.instantiate(fsClass)__			this.hadoopFileSystem.initialize(fsUri, hadoopConf)__		}_		catch (Exception e) {_			throw new IOException("Cannot instantiate YARN's Hadoop file system for " + fsUri, e)__		}__		this.flinkFileSystem = new HadoopFileSystem(hadoopConf, hadoopFileSystem)___		this.workingDirectory = new Path(hadoopFileSystem.getWorkingDirectory().toUri())__		this.haDataDirectory = new Path(workingDirectory, FLINK_RECOVERY_DATA_DIR)___		_		try {_			flinkFileSystem.mkdirs(haDataDirectory)__		}_		catch (Exception e) {_			throw new IOException("Could not create the directory for recovery data in YARN's file system at '"_					+ haDataDirectory + "'.", e)__		}__		LOG.info("Flink YARN application will store recovery data at {}", haDataDirectory)__	};creates,new,yarn,high,availability,services,configuring,the,file,system,and,recovery,data,directory,based,on,the,working,directory,in,the,given,hadoop,configuration,p,this,class,requires,that,the,default,hadoop,file,system,configured,in,the,given,hadoop,configuration,is,an,hdfs,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails;protected,yarn,high,availability,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,check,not,null,config,check,not,null,hadoop,conf,this,lock,new,reentrant,lock,final,uri,fs,uri,org,apache,hadoop,fs,file,system,get,default,uri,hadoop,conf,if,fs,uri,get,scheme,null,hdfs,equals,fs,uri,get,scheme,to,lower,case,throw,new,ioexception,invalid,file,system,found,for,yarn,high,availability,services,expected,hdfs,but,found,fs,uri,get,scheme,try,final,class,extends,org,apache,hadoop,fs,file,system,fs,class,org,apache,hadoop,fs,file,system,get,file,system,class,fs,uri,get,scheme,hadoop,conf,this,hadoop,file,system,instantiation,util,instantiate,fs,class,this,hadoop,file,system,initialize,fs,uri,hadoop,conf,catch,exception,e,throw,new,ioexception,cannot,instantiate,yarn,s,hadoop,file,system,for,fs,uri,e,this,flink,file,system,new,hadoop,file,system,hadoop,conf,hadoop,file,system,this,working,directory,new,path,hadoop,file,system,get,working,directory,to,uri,this,ha,data,directory,new,path,working,directory,try,flink,file,system,mkdirs,ha,data,directory,catch,exception,e,throw,new,ioexception,could,not,create,the,directory,for,recovery,data,in,yarn,s,file,system,at,ha,data,directory,e,log,info,flink,yarn,application,will,store,recovery,data,at,ha,data,directory
YarnHighAvailabilityServices -> protected YarnHighAvailabilityServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1495001929;Creates new YARN high-availability services, configuring the file system and recovery_data directory based on the working directory in the given Hadoop configuration.__<p>This class requires that the default Hadoop file system configured in the given_Hadoop configuration is an HDFS.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException Thrown, if the initialization of the Hadoop file system used by YARN fails.;protected YarnHighAvailabilityServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		checkNotNull(config)__		checkNotNull(hadoopConf)___		this.lock = new ReentrantLock()___		_		final URI fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConf)__		if (fsUri.getScheme() == null || !"hdfs".equals(fsUri.getScheme().toLowerCase())) {_			throw new IOException("Invalid file system found for YarnHighAvailabilityServices: " +_					"Expected 'hdfs', but found '" + fsUri.getScheme() + "'.")__		}__		_		_		_		try {_			final Class<? extends org.apache.hadoop.fs.FileSystem> fsClass =_					org.apache.hadoop.fs.FileSystem.getFileSystemClass(fsUri.getScheme(), hadoopConf)___			this.hadoopFileSystem = InstantiationUtil.instantiate(fsClass)__			this.hadoopFileSystem.initialize(fsUri, hadoopConf)__		}_		catch (Exception e) {_			throw new IOException("Cannot instantiate YARN's Hadoop file system for " + fsUri, e)__		}__		this.flinkFileSystem = new HadoopFileSystem(hadoopConf, hadoopFileSystem)___		this.workingDirectory = new Path(hadoopFileSystem.getWorkingDirectory().toUri())__		this.haDataDirectory = new Path(workingDirectory, FLINK_RECOVERY_DATA_DIR)___		_		try {_			flinkFileSystem.mkdirs(haDataDirectory)__		}_		catch (Exception e) {_			throw new IOException("Could not create the directory for recovery data in YARN's file system at '"_					+ haDataDirectory + "'.", e)__		}__		LOG.info("Flink YARN application will store recovery data at {}", haDataDirectory)___		blobStoreService = new FileSystemBlobStore(flinkFileSystem, haDataDirectory.toString())__	};creates,new,yarn,high,availability,services,configuring,the,file,system,and,recovery,data,directory,based,on,the,working,directory,in,the,given,hadoop,configuration,p,this,class,requires,that,the,default,hadoop,file,system,configured,in,the,given,hadoop,configuration,is,an,hdfs,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails;protected,yarn,high,availability,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,check,not,null,config,check,not,null,hadoop,conf,this,lock,new,reentrant,lock,final,uri,fs,uri,org,apache,hadoop,fs,file,system,get,default,uri,hadoop,conf,if,fs,uri,get,scheme,null,hdfs,equals,fs,uri,get,scheme,to,lower,case,throw,new,ioexception,invalid,file,system,found,for,yarn,high,availability,services,expected,hdfs,but,found,fs,uri,get,scheme,try,final,class,extends,org,apache,hadoop,fs,file,system,fs,class,org,apache,hadoop,fs,file,system,get,file,system,class,fs,uri,get,scheme,hadoop,conf,this,hadoop,file,system,instantiation,util,instantiate,fs,class,this,hadoop,file,system,initialize,fs,uri,hadoop,conf,catch,exception,e,throw,new,ioexception,cannot,instantiate,yarn,s,hadoop,file,system,for,fs,uri,e,this,flink,file,system,new,hadoop,file,system,hadoop,conf,hadoop,file,system,this,working,directory,new,path,hadoop,file,system,get,working,directory,to,uri,this,ha,data,directory,new,path,working,directory,try,flink,file,system,mkdirs,ha,data,directory,catch,exception,e,throw,new,ioexception,could,not,create,the,directory,for,recovery,data,in,yarn,s,file,system,at,ha,data,directory,e,log,info,flink,yarn,application,will,store,recovery,data,at,ha,data,directory,blob,store,service,new,file,system,blob,store,flink,file,system,ha,data,directory,to,string
YarnHighAvailabilityServices -> protected YarnHighAvailabilityServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1495819079;Creates new YARN high-availability services, configuring the file system and recovery_data directory based on the working directory in the given Hadoop configuration.__<p>This class requires that the default Hadoop file system configured in the given_Hadoop configuration is an HDFS.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException Thrown, if the initialization of the Hadoop file system used by YARN fails.;protected YarnHighAvailabilityServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		checkNotNull(config)__		checkNotNull(hadoopConf)___		this.lock = new ReentrantLock()___		_		final URI fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConf)__		if (fsUri.getScheme() == null || !"hdfs".equals(fsUri.getScheme().toLowerCase())) {_			throw new IOException("Invalid file system found for YarnHighAvailabilityServices: " +_					"Expected 'hdfs', but found '" + fsUri.getScheme() + "'.")__		}__		_		_		_		try {_			final Class<? extends org.apache.hadoop.fs.FileSystem> fsClass =_					org.apache.hadoop.fs.FileSystem.getFileSystemClass(fsUri.getScheme(), hadoopConf)___			this.hadoopFileSystem = InstantiationUtil.instantiate(fsClass)__			this.hadoopFileSystem.initialize(fsUri, hadoopConf)__		}_		catch (Exception e) {_			throw new IOException("Cannot instantiate YARN's Hadoop file system for " + fsUri, e)__		}__		this.flinkFileSystem = new HadoopFileSystem(hadoopConf, hadoopFileSystem)___		this.workingDirectory = new Path(hadoopFileSystem.getWorkingDirectory().toUri())__		this.haDataDirectory = new Path(workingDirectory, FLINK_RECOVERY_DATA_DIR)___		_		try {_			flinkFileSystem.mkdirs(haDataDirectory)__		}_		catch (Exception e) {_			throw new IOException("Could not create the directory for recovery data in YARN's file system at '"_					+ haDataDirectory + "'.", e)__		}__		LOG.info("Flink YARN application will store recovery data at {}", haDataDirectory)___		blobStoreService = new FileSystemBlobStore(flinkFileSystem, haDataDirectory.toString())__	};creates,new,yarn,high,availability,services,configuring,the,file,system,and,recovery,data,directory,based,on,the,working,directory,in,the,given,hadoop,configuration,p,this,class,requires,that,the,default,hadoop,file,system,configured,in,the,given,hadoop,configuration,is,an,hdfs,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails;protected,yarn,high,availability,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,check,not,null,config,check,not,null,hadoop,conf,this,lock,new,reentrant,lock,final,uri,fs,uri,org,apache,hadoop,fs,file,system,get,default,uri,hadoop,conf,if,fs,uri,get,scheme,null,hdfs,equals,fs,uri,get,scheme,to,lower,case,throw,new,ioexception,invalid,file,system,found,for,yarn,high,availability,services,expected,hdfs,but,found,fs,uri,get,scheme,try,final,class,extends,org,apache,hadoop,fs,file,system,fs,class,org,apache,hadoop,fs,file,system,get,file,system,class,fs,uri,get,scheme,hadoop,conf,this,hadoop,file,system,instantiation,util,instantiate,fs,class,this,hadoop,file,system,initialize,fs,uri,hadoop,conf,catch,exception,e,throw,new,ioexception,cannot,instantiate,yarn,s,hadoop,file,system,for,fs,uri,e,this,flink,file,system,new,hadoop,file,system,hadoop,conf,hadoop,file,system,this,working,directory,new,path,hadoop,file,system,get,working,directory,to,uri,this,ha,data,directory,new,path,working,directory,try,flink,file,system,mkdirs,ha,data,directory,catch,exception,e,throw,new,ioexception,could,not,create,the,directory,for,recovery,data,in,yarn,s,file,system,at,ha,data,directory,e,log,info,flink,yarn,application,will,store,recovery,data,at,ha,data,directory,blob,store,service,new,file,system,blob,store,flink,file,system,ha,data,directory,to,string
YarnHighAvailabilityServices -> protected YarnHighAvailabilityServices( 			Configuration config, 			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException;1507281370;Creates new YARN high-availability services, configuring the file system and recovery_data directory based on the working directory in the given Hadoop configuration.__<p>This class requires that the default Hadoop file system configured in the given_Hadoop configuration is an HDFS.__@param config     The Flink configuration of this component / process._@param hadoopConf The Hadoop configuration for the YARN cluster.__@throws IOException Thrown, if the initialization of the Hadoop file system used by YARN fails.;protected YarnHighAvailabilityServices(_			Configuration config,_			org.apache.hadoop.conf.Configuration hadoopConf) throws IOException {__		checkNotNull(config)__		checkNotNull(hadoopConf)___		this.lock = new ReentrantLock()___		_		final URI fsUri = org.apache.hadoop.fs.FileSystem.getDefaultUri(hadoopConf)__		if (fsUri.getScheme() == null || !"hdfs".equals(fsUri.getScheme().toLowerCase())) {_			throw new IOException("Invalid file system found for YarnHighAvailabilityServices: " +_					"Expected 'hdfs', but found '" + fsUri.getScheme() + "'.")__		}__		_		_		_		try {_			final Class<? extends org.apache.hadoop.fs.FileSystem> fsClass =_					org.apache.hadoop.fs.FileSystem.getFileSystemClass(fsUri.getScheme(), hadoopConf)___			this.hadoopFileSystem = InstantiationUtil.instantiate(fsClass)__			this.hadoopFileSystem.initialize(fsUri, hadoopConf)__		}_		catch (Exception e) {_			throw new IOException("Cannot instantiate YARN's Hadoop file system for " + fsUri, e)__		}__		this.flinkFileSystem = new HadoopFileSystem(hadoopFileSystem)___		this.workingDirectory = new Path(hadoopFileSystem.getWorkingDirectory().toUri())__		this.haDataDirectory = new Path(workingDirectory, FLINK_RECOVERY_DATA_DIR)___		_		try {_			flinkFileSystem.mkdirs(haDataDirectory)__		}_		catch (Exception e) {_			throw new IOException("Could not create the directory for recovery data in YARN's file system at '"_					+ haDataDirectory + "'.", e)__		}__		LOG.info("Flink YARN application will store recovery data at {}", haDataDirectory)___		blobStoreService = new FileSystemBlobStore(flinkFileSystem, haDataDirectory.toString())__	};creates,new,yarn,high,availability,services,configuring,the,file,system,and,recovery,data,directory,based,on,the,working,directory,in,the,given,hadoop,configuration,p,this,class,requires,that,the,default,hadoop,file,system,configured,in,the,given,hadoop,configuration,is,an,hdfs,param,config,the,flink,configuration,of,this,component,process,param,hadoop,conf,the,hadoop,configuration,for,the,yarn,cluster,throws,ioexception,thrown,if,the,initialization,of,the,hadoop,file,system,used,by,yarn,fails;protected,yarn,high,availability,services,configuration,config,org,apache,hadoop,conf,configuration,hadoop,conf,throws,ioexception,check,not,null,config,check,not,null,hadoop,conf,this,lock,new,reentrant,lock,final,uri,fs,uri,org,apache,hadoop,fs,file,system,get,default,uri,hadoop,conf,if,fs,uri,get,scheme,null,hdfs,equals,fs,uri,get,scheme,to,lower,case,throw,new,ioexception,invalid,file,system,found,for,yarn,high,availability,services,expected,hdfs,but,found,fs,uri,get,scheme,try,final,class,extends,org,apache,hadoop,fs,file,system,fs,class,org,apache,hadoop,fs,file,system,get,file,system,class,fs,uri,get,scheme,hadoop,conf,this,hadoop,file,system,instantiation,util,instantiate,fs,class,this,hadoop,file,system,initialize,fs,uri,hadoop,conf,catch,exception,e,throw,new,ioexception,cannot,instantiate,yarn,s,hadoop,file,system,for,fs,uri,e,this,flink,file,system,new,hadoop,file,system,hadoop,file,system,this,working,directory,new,path,hadoop,file,system,get,working,directory,to,uri,this,ha,data,directory,new,path,working,directory,try,flink,file,system,mkdirs,ha,data,directory,catch,exception,e,throw,new,ioexception,could,not,create,the,directory,for,recovery,data,in,yarn,s,file,system,at,ha,data,directory,e,log,info,flink,yarn,application,will,store,recovery,data,at,ha,data,directory,blob,store,service,new,file,system,blob,store,flink,file,system,ha,data,directory,to,string
