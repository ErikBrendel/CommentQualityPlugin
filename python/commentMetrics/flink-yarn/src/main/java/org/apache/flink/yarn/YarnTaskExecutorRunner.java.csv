# id;timestamp;commentText;codeText;commentWords;codeWords
YarnTaskExecutorRunner -> public static void main(String[] args);1482522867;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1482522867;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1484162264;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1489766405;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1493975155;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1495477702;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1495819079;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		_		int returnCode = new YarnTaskExecutorRunner().run(args)__		System.exit(returnCode)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,int,return,code,new,yarn,task,executor,runner,run,args,system,exit,return,code
YarnTaskExecutorRunner -> public static void main(String[] args);1499254138;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1506499511;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1506499511;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1507281370;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1516265159;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1525773090;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1525779587;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1531993383;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1537436047;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1540376774;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1548947871;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> public static void main(String[] args);1548947871;The entry point for the YARN task executor runner.__@param args The command line arguments.;public static void main(String[] args) {_		EnvironmentInformation.logEnvironmentInfo(LOG, "YARN TaskExecutor runner", args)__		SignalHandler.register(LOG)__		JvmShutdownSafeguard.installAsShutdownHook(LOG)___		run(args)__	};the,entry,point,for,the,yarn,task,executor,runner,param,args,the,command,line,arguments;public,static,void,main,string,args,environment,information,log,environment,info,log,yarn,task,executor,runner,args,signal,handler,register,log,jvm,shutdown,safeguard,install,as,shutdown,hook,log,run,args
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1482522867;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			haServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(config)__			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)__			taskManagerRunner = new TaskManagerRunner(config, resourceID, taskExecutorRpcService, haServices, metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,ha,services,high,availability,services,utils,create,available,or,embedded,services,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1482522867;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			haServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(config)__			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)__			taskManagerRunner = new TaskManagerRunner(config, resourceID, taskExecutorRpcService, haServices, metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,ha,services,high,availability,services,utils,create,available,or,embedded,services,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1484162264;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			haServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(config)__			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)__			taskManagerRunner = new TaskManagerRunner(config, resourceID, taskExecutorRpcService, haServices, metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,ha,services,high,availability,services,utils,create,available,or,embedded,services,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1489766405;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			haServices = HighAvailabilityServicesUtils.createAvailableOrEmbeddedServices(config)__			HeartbeatServices heartbeatServices = HeartbeatServices.fromConfiguration(config)___			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)__			taskManagerRunner = new TaskManagerRunner(_				config,_				resourceID,_				taskExecutorRpcService,_				haServices,_				heartbeatServices,_				metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,ha,services,high,availability,services,utils,create,available,or,embedded,services,config,heartbeat,services,heartbeat,services,heartbeat,services,from,configuration,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,heartbeat,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1493975155;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)___			haServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				config,_				taskExecutorRpcService.getExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			HeartbeatServices heartbeatServices = HeartbeatServices.fromConfiguration(config)___			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskManagerRunner = new TaskManagerRunner(_				config,_				resourceID,_				taskExecutorRpcService,_				haServices,_				heartbeatServices,_				metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,ha,services,high,availability,services,utils,create,high,availability,services,config,task,executor,rpc,service,get,executor,high,availability,services,utils,address,resolution,heartbeat,services,heartbeat,services,heartbeat,services,from,configuration,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,heartbeat,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1495477702;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)___			haServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				config,_				taskExecutorRpcService.getExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			HeartbeatServices heartbeatServices = HeartbeatServices.fromConfiguration(config)___			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskManagerRunner = new TaskManagerRunner(_				config,_				resourceID,_				taskExecutorRpcService,_				haServices,_				heartbeatServices,_				metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,ha,services,high,availability,services,utils,create,high,availability,services,config,task,executor,rpc,service,get,executor,high,availability,services,utils,address,resolution,heartbeat,services,heartbeat,services,heartbeat,services,from,configuration,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,heartbeat,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> protected int runTaskExecutor(Configuration config);1495819079;The main work method, must run as a privileged action.__@return The return code for the Java process.;protected int runTaskExecutor(Configuration config) {__		try {_			_			_			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_					"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				config.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			ResourceID resourceID = new ResourceID(containerId)__			LOG.info("YARN assigned resource id {} for the task executor.", resourceID.toString())___			taskExecutorRpcService = TaskManagerRunner.createRpcService(config, haServices)___			haServices = HighAvailabilityServicesUtils.createHighAvailabilityServices(_				config,_				taskExecutorRpcService.getExecutor(),_				HighAvailabilityServicesUtils.AddressResolution.TRY_ADDRESS_RESOLUTION)___			HeartbeatServices heartbeatServices = HeartbeatServices.fromConfiguration(config)___			metricRegistry = new MetricRegistry(MetricRegistryConfiguration.fromConfiguration(config))___			_			taskManagerRunner = new TaskManagerRunner(_				config,_				resourceID,_				taskExecutorRpcService,_				haServices,_				heartbeatServices,_				metricRegistry)___			_			taskManagerRunner.start()__			LOG.debug("YARN task executor started")___			taskManagerRunner.getTerminationFuture().get()__			_			LOG.info("YARN task manager runner finished")__			shutdown()__		}_		catch (Throwable t) {_			_			LOG.error("YARN task executor initialization failed", t)__			shutdown()__			return INIT_ERROR_EXIT_CODE__		}__		return 0__	};the,main,work,method,must,run,as,a,privileged,action,return,the,return,code,for,the,java,process;protected,int,run,task,executor,configuration,config,try,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,config,set,string,config,constants,task,executor,hostname,resource,id,resource,id,new,resource,id,container,id,log,info,yarn,assigned,resource,id,for,the,task,executor,resource,id,to,string,task,executor,rpc,service,task,manager,runner,create,rpc,service,config,ha,services,ha,services,high,availability,services,utils,create,high,availability,services,config,task,executor,rpc,service,get,executor,high,availability,services,utils,address,resolution,heartbeat,services,heartbeat,services,heartbeat,services,from,configuration,config,metric,registry,new,metric,registry,metric,registry,configuration,from,configuration,config,task,manager,runner,new,task,manager,runner,config,resource,id,task,executor,rpc,service,ha,services,heartbeat,services,metric,registry,task,manager,runner,start,log,debug,yarn,task,executor,started,task,manager,runner,get,termination,future,get,log,info,yarn,task,manager,runner,finished,shutdown,catch,throwable,t,log,error,yarn,task,executor,initialization,failed,t,shutdown,return,return,0
YarnTaskExecutorRunner -> private static void run(String[] args);1499254138;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1506499511;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityUtils.SecurityConfiguration sc___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")___				sc = new SecurityUtils.SecurityConfiguration(configuration,_					Collections.singletonList(securityConfig -> new HadoopModule(securityConfig, hadoopConfiguration)))___			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,utils,security,configuration,sc,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,sc,new,security,utils,security,configuration,configuration,collections,singleton,list,security,config,new,hadoop,module,security,config,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1506499511;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityConfiguration sc___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")___				sc = new SecurityConfiguration(configuration,_					Collections.singletonList(securityConfig -> new HadoopModule(securityConfig, hadoopConfiguration)))___			} else {_				sc = new SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,configuration,sc,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,sc,new,security,configuration,configuration,collections,singleton,list,security,config,new,hadoop,module,security,config,hadoop,configuration,else,sc,new,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1507281370;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityConfiguration sc___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")___				sc = new SecurityConfiguration(configuration,_					Collections.singletonList(securityConfig -> new HadoopModule(securityConfig, hadoopConfiguration)))___			} else {_				sc = new SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,configuration,sc,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,sc,new,security,configuration,configuration,collections,singleton,list,security,config,new,hadoop,module,security,config,hadoop,configuration,else,sc,new,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1516265159;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			_			if (configuration.contains(CoreOptions.TMP_DIRS)) {_				LOG.info("Overriding YARN's temporary file directories with those " +_					"specified in the Flink config: " + configuration.getValue(CoreOptions.TMP_DIRS))__			}_			else {_				LOG.info("Setting directories for temporary files to: {}", localDirs)__				configuration.setString(CoreOptions.TMP_DIRS, localDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityConfiguration sc___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")___				sc = new SecurityConfiguration(configuration,_					Collections.singletonList(securityConfig -> new HadoopModule(securityConfig, hadoopConfiguration)))___			} else {_				sc = new SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,if,configuration,contains,core,options,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,log,info,setting,directories,for,temporary,files,to,local,dirs,configuration,set,string,core,options,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,configuration,sc,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,sc,new,security,configuration,configuration,collections,singleton,list,security,config,new,hadoop,module,security,config,hadoop,configuration,else,sc,new,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1525773090;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			_			if (configuration.contains(CoreOptions.TMP_DIRS)) {_				LOG.info("Overriding YARN's temporary file directories with those " +_					"specified in the Flink config: " + configuration.getValue(CoreOptions.TMP_DIRS))__			}_			else {_				LOG.info("Setting directories for temporary files to: {}", localDirs)__				configuration.setString(CoreOptions.TMP_DIRS, localDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,if,configuration,contains,core,options,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,log,info,setting,directories,for,temporary,files,to,local,dirs,configuration,set,string,core,options,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,configuration,sc,new,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1525779587;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			_			if (configuration.contains(CoreOptions.TMP_DIRS)) {_				LOG.info("Overriding YARN's temporary file directories with those " +_					"specified in the Flink config: " + configuration.getValue(CoreOptions.TMP_DIRS))__			}_			else {_				LOG.info("Setting directories for temporary files to: {}", localDirs)__				configuration.setString(CoreOptions.TMP_DIRS, localDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,if,configuration,contains,core,options,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,log,info,setting,directories,for,temporary,files,to,local,dirs,configuration,set,string,core,options,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,configuration,sc,new,security,configuration,configuration,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1531993383;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs)___			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured(new Callable<Void>() {_				@Override_				public Void call() throws Exception {_					TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__					return null__				}_			})__		}_		catch (Throwable t) {_			_			LOG.error("YARN TaskManager initialization failed.", t)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,bootstrap,tools,update,tmp,directories,in,configuration,configuration,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,configuration,sc,new,security,configuration,configuration,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,new,callable,void,override,public,void,call,throws,exception,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,log,error,yarn,task,manager,initialization,failed,t,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1537436047;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs)___			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured((Callable<Void>) () -> {_				TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__				return null__			})__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			_			LOG.error("YARN TaskManager initialization failed.", strippedThrowable)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,bootstrap,tools,update,tmp,directories,in,configuration,configuration,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,configuration,sc,new,security,configuration,configuration,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,config,constants,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,callable,void,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,yarn,task,manager,initialization,failed,stripped,throwable,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1540376774;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs)___			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			final String containerId = ENV.get(YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnFlinkResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(TaskManagerOptions.HOST, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured((Callable<Void>) () -> {_				TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__				return null__			})__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			_			LOG.error("YARN TaskManager initialization failed.", strippedThrowable)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,bootstrap,tools,update,tmp,directories,in,configuration,configuration,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,configuration,sc,new,security,configuration,configuration,final,string,container,id,env,get,yarn,flink,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,flink,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,task,manager,options,host,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,callable,void,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,yarn,task,manager,initialization,failed,stripped,throwable,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1548947871;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, localDirs)___			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityConfiguration sc = new SecurityConfiguration(configuration)___			final String containerId = ENV.get(YarnResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnResourceManager.ENV_FLINK_CONTAINER_ID)___			_			final String taskExecutorHostname = ENV.get(YarnResourceManager.ENV_FLINK_NODE_ID)__			if (taskExecutorHostname != null) {_				configuration.setString(TaskManagerOptions.HOST, taskExecutorHostname)__			}__			SecurityUtils.install(sc)___			SecurityUtils.getInstalledContext().runSecured((Callable<Void>) () -> {_				TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__				return null__			})__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			_			LOG.error("YARN TaskManager initialization failed.", strippedThrowable)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,bootstrap,tools,update,tmp,directories,in,configuration,configuration,local,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,configuration,sc,new,security,configuration,configuration,final,string,container,id,env,get,yarn,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,resource,manager,final,string,task,executor,hostname,env,get,yarn,resource,manager,if,task,executor,hostname,null,configuration,set,string,task,manager,options,host,task,executor,hostname,security,utils,install,sc,security,utils,get,installed,context,run,secured,callable,void,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,yarn,task,manager,initialization,failed,stripped,throwable,system,exit
YarnTaskExecutorRunner -> private static void run(String[] args);1548947871;The instance entry point for the YARN task executor. Obtains user group information and calls_the main work method {@link TaskManagerRunner#runTaskManager(Configuration, ResourceID)}  as a_privileged action.__@param args The command line arguments.;private static void run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.initialize(configuration)___			setupConfigurationAndInstallSecurityContext(configuration, currDir, ENV)___			final String containerId = ENV.get(YarnResourceManager.ENV_FLINK_CONTAINER_ID)__			Preconditions.checkArgument(containerId != null,_				"ContainerId variable %s not set", YarnResourceManager.ENV_FLINK_CONTAINER_ID)___			SecurityUtils.getInstalledContext().runSecured((Callable<Void>) () -> {_				TaskManagerRunner.runTaskManager(configuration, new ResourceID(containerId))__				return null__			})__		}_		catch (Throwable t) {_			final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class)__			_			LOG.error("YARN TaskManager initialization failed.", strippedThrowable)__			System.exit(INIT_ERROR_EXIT_CODE)__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,task,manager,runner,run,task,manager,configuration,resource,id,as,a,privileged,action,param,args,the,command,line,arguments;private,static,void,run,string,args,try,log,debug,all,environment,variables,env,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,initialize,configuration,setup,configuration,and,install,security,context,configuration,curr,dir,env,final,string,container,id,env,get,yarn,resource,manager,preconditions,check,argument,container,id,null,container,id,variable,s,not,set,yarn,resource,manager,security,utils,get,installed,context,run,secured,callable,void,task,manager,runner,run,task,manager,configuration,new,resource,id,container,id,return,null,catch,throwable,t,final,throwable,stripped,throwable,exception,utils,strip,exception,t,undeclared,throwable,exception,class,log,error,yarn,task,manager,initialization,failed,stripped,throwable,system,exit
YarnTaskExecutorRunner -> protected int run(String[] args);1482522867;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityContext.SecurityConfiguration sc = new SecurityContext.SecurityConfiguration()___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if(krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration()__				conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__				sc.setHadoopConfiguration(conf)__			}__			if(keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(ConfigConstants.SECURITY_KEYTAB_KEY, keytabPath)__				configuration.setString(ConfigConstants.SECURITY_PRINCIPAL_KEY, remoteKeytabPrincipal)__			}__			SecurityContext.install(sc.setFlinkConfiguration(configuration))___			return SecurityContext.getInstalled().runSecured(new SecurityContext.FlinkSecuredRunner<Integer>() {_				@Override_				public Integer run() {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,config,constants,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,context,security,configuration,sc,new,security,context,security,configuration,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,conf,new,org,apache,hadoop,conf,configuration,conf,set,common,configuration,keys,public,kerberos,conf,set,common,configuration,keys,public,true,sc,set,hadoop,configuration,conf,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,config,constants,keytab,path,configuration,set,string,config,constants,remote,keytab,principal,security,context,install,sc,set,flink,configuration,configuration,return,security,context,get,installed,run,secured,new,security,context,flink,secured,runner,integer,override,public,integer,run,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1482522867;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			SecurityUtils.SecurityConfiguration sc = new SecurityUtils.SecurityConfiguration(configuration)___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if(krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration()__				conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__				sc.setHadoopConfiguration(conf)__			}__			if(keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(ConfigConstants.SECURITY_KEYTAB_KEY, keytabPath)__				configuration.setString(ConfigConstants.SECURITY_PRINCIPAL_KEY, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,config,constants,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,security,utils,security,configuration,sc,new,security,utils,security,configuration,configuration,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,org,apache,hadoop,conf,configuration,conf,new,org,apache,hadoop,conf,configuration,conf,set,common,configuration,keys,public,kerberos,conf,set,common,configuration,keys,public,true,sc,set,hadoop,configuration,conf,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,config,constants,keytab,path,configuration,set,string,config,constants,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1484162264;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,config,constants,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1489766405;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,config,constants,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1493975155;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(ConfigConstants.AKKA_JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,config,constants,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1495477702;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if(remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
YarnTaskExecutorRunner -> protected int run(String[] args);1495819079;The instance entry point for the YARN task executor. Obtains user group_information and calls the main work method {@link #runTaskExecutor(org.apache.flink.configuration.Configuration)} as a_privileged action.__@param args The command line arguments._@return The process exit code.;protected int run(String[] args) {_		try {_			LOG.debug("All environment variables: {}", ENV)___			final String yarnClientUsername = ENV.get(YarnConfigKeys.ENV_HADOOP_USER_NAME)__			final String localDirs = ENV.get(Environment.LOCAL_DIRS.key())__			LOG.info("Current working/local Directory: {}", localDirs)___			final String currDir = ENV.get(Environment.PWD.key())__			LOG.info("Current working Directory: {}", currDir)___			final String remoteKeytabPath = ENV.get(YarnConfigKeys.KEYTAB_PATH)__			LOG.info("TM: remote keytab path obtained {}", remoteKeytabPath)___			final String remoteKeytabPrincipal = ENV.get(YarnConfigKeys.KEYTAB_PRINCIPAL)__			LOG.info("TM: remote keytab principal obtained {}", remoteKeytabPrincipal)___			final Configuration configuration = GlobalConfiguration.loadConfiguration(currDir)__			FileSystem.setDefaultScheme(configuration)___			_			String flinkTempDirs = configuration.getString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, null)__			if (flinkTempDirs == null) {_				LOG.info("Setting directories for temporary file " + localDirs)__				configuration.setString(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, localDirs)__			}_			else {_				LOG.info("Overriding YARN's temporary file directories with those " +_						"specified in the Flink config: " + flinkTempDirs)__			}__			_			configuration.setBoolean(AkkaOptions.JVM_EXIT_ON_FATAL_ERROR, true)___			String keytabPath = null__			if (remoteKeytabPath != null) {_				File f = new File(currDir, Utils.KEYTAB_FILE_NAME)__				keytabPath = f.getAbsolutePath()__				LOG.info("keytab path: {}", keytabPath)__			}__			UserGroupInformation currentUser = UserGroupInformation.getCurrentUser()___			LOG.info("YARN daemon is running as: {} Yarn client user obtainer: {}",_					currentUser.getShortUserName(), yarnClientUsername)___			org.apache.hadoop.conf.Configuration hadoopConfiguration = null___			_			File krb5Conf = new File(currDir, Utils.KRB5_FILE_NAME)__			if (krb5Conf.exists() && krb5Conf.canRead()) {_				String krb5Path = krb5Conf.getAbsolutePath()__				LOG.info("KRB5 Conf: {}", krb5Path)__				hadoopConfiguration = new org.apache.hadoop.conf.Configuration()__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, "kerberos")__				hadoopConfiguration.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, "true")__			}__			SecurityUtils.SecurityConfiguration sc__			if (hadoopConfiguration != null) {_				sc = new SecurityUtils.SecurityConfiguration(configuration, hadoopConfiguration)__			} else {_				sc = new SecurityUtils.SecurityConfiguration(configuration)__			}__			if (keytabPath != null && remoteKeytabPrincipal != null) {_				configuration.setString(SecurityOptions.KERBEROS_LOGIN_KEYTAB, keytabPath)__				configuration.setString(SecurityOptions.KERBEROS_LOGIN_PRINCIPAL, remoteKeytabPrincipal)__			}__			SecurityUtils.install(sc)___			return SecurityUtils.getInstalledContext().runSecured(new Callable<Integer>() {_				@Override_				public Integer call() throws Exception {_					return runTaskExecutor(configuration)__				}_			})___		}_		catch (Throwable t) {_			_			LOG.error("YARN Application Master initialization failed", t)__			return INIT_ERROR_EXIT_CODE__		}_	};the,instance,entry,point,for,the,yarn,task,executor,obtains,user,group,information,and,calls,the,main,work,method,link,run,task,executor,org,apache,flink,configuration,configuration,as,a,privileged,action,param,args,the,command,line,arguments,return,the,process,exit,code;protected,int,run,string,args,try,log,debug,all,environment,variables,env,final,string,yarn,client,username,env,get,yarn,config,keys,final,string,local,dirs,env,get,environment,key,log,info,current,working,local,directory,local,dirs,final,string,curr,dir,env,get,environment,pwd,key,log,info,current,working,directory,curr,dir,final,string,remote,keytab,path,env,get,yarn,config,keys,log,info,tm,remote,keytab,path,obtained,remote,keytab,path,final,string,remote,keytab,principal,env,get,yarn,config,keys,log,info,tm,remote,keytab,principal,obtained,remote,keytab,principal,final,configuration,configuration,global,configuration,load,configuration,curr,dir,file,system,set,default,scheme,configuration,string,flink,temp,dirs,configuration,get,string,config,constants,null,if,flink,temp,dirs,null,log,info,setting,directories,for,temporary,file,local,dirs,configuration,set,string,config,constants,local,dirs,else,log,info,overriding,yarn,s,temporary,file,directories,with,those,specified,in,the,flink,config,flink,temp,dirs,configuration,set,boolean,akka,options,true,string,keytab,path,null,if,remote,keytab,path,null,file,f,new,file,curr,dir,utils,keytab,path,f,get,absolute,path,log,info,keytab,path,keytab,path,user,group,information,current,user,user,group,information,get,current,user,log,info,yarn,daemon,is,running,as,yarn,client,user,obtainer,current,user,get,short,user,name,yarn,client,username,org,apache,hadoop,conf,configuration,hadoop,configuration,null,file,krb5conf,new,file,curr,dir,utils,if,krb5conf,exists,krb5conf,can,read,string,krb5path,krb5conf,get,absolute,path,log,info,krb5,conf,krb5path,hadoop,configuration,new,org,apache,hadoop,conf,configuration,hadoop,configuration,set,common,configuration,keys,public,kerberos,hadoop,configuration,set,common,configuration,keys,public,true,security,utils,security,configuration,sc,if,hadoop,configuration,null,sc,new,security,utils,security,configuration,configuration,hadoop,configuration,else,sc,new,security,utils,security,configuration,configuration,if,keytab,path,null,remote,keytab,principal,null,configuration,set,string,security,options,keytab,path,configuration,set,string,security,options,remote,keytab,principal,security,utils,install,sc,return,security,utils,get,installed,context,run,secured,new,callable,integer,override,public,integer,call,throws,exception,return,run,task,executor,configuration,catch,throwable,t,log,error,yarn,application,master,initialization,failed,t,return
