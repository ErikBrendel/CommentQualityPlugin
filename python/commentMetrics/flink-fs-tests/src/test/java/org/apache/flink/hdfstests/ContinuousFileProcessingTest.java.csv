# id;timestamp;commentText;codeText;commentWords;codeWords
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1485338611;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1486742859;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1487783998;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1489060855;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1495813291;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx + ": " + sampleLine + " " + i + "\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1498894422;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx + ": " + sampleLine + " " + i + "\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1519567828;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx + ": " + sampleLine + " " + i + "\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1531679887;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private static Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		final String fileRandSuffix = UUID.randomUUID().toString()___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileRandSuffix)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileRandSuffix)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx + ": " + sampleLine + " " + i + "\n"__			str.append(line)__			stream.write(line.getBytes(ConfigConstants.DEFAULT_CHARSET))__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,static,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,final,string,file,rand,suffix,uuid,random,uuid,to,string,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,rand,suffix,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,config,constants,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1477570922;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1478784006;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1478869558;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1481632698;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
ContinuousFileProcessingTest -> private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData( 				String base, String fileName, int fileIdx, String sampleLine) throws IOException;1484866639;Create a file with pre-determined String format of the form:_{@code fileIdx +": "+ sampleLine +" "+ lineNo}.;private Tuple2<org.apache.hadoop.fs.Path, String> createFileAndFillWithData(_				String base, String fileName, int fileIdx, String sampleLine) throws IOException {__		assert (hdfs != null)___		org.apache.hadoop.fs.Path file = new org.apache.hadoop.fs.Path(base + "/" + fileName + fileIdx)__		Assert.assertFalse(hdfs.exists(file))___		org.apache.hadoop.fs.Path tmp = new org.apache.hadoop.fs.Path(base + "/." + fileName + fileIdx)__		FSDataOutputStream stream = hdfs.create(tmp)__		StringBuilder str = new StringBuilder()__		for (int i = 0_ i < LINES_PER_FILE_ i++) {_			String line = fileIdx +": "+ sampleLine + " " + i +"\n"__			str.append(line)__			stream.write(line.getBytes())__		}_		stream.close()___		hdfs.rename(tmp, file)___		Assert.assertTrue("No result file present", hdfs.exists(file))__		return new Tuple2<>(file, str.toString())__	};create,a,file,with,pre,determined,string,format,of,the,form,code,file,idx,sample,line,line,no;private,tuple2,org,apache,hadoop,fs,path,string,create,file,and,fill,with,data,string,base,string,file,name,int,file,idx,string,sample,line,throws,ioexception,assert,hdfs,null,org,apache,hadoop,fs,path,file,new,org,apache,hadoop,fs,path,base,file,name,file,idx,assert,assert,false,hdfs,exists,file,org,apache,hadoop,fs,path,tmp,new,org,apache,hadoop,fs,path,base,file,name,file,idx,fsdata,output,stream,stream,hdfs,create,tmp,string,builder,str,new,string,builder,for,int,i,0,i,i,string,line,file,idx,sample,line,i,n,str,append,line,stream,write,line,get,bytes,stream,close,hdfs,rename,tmp,file,assert,assert,true,no,result,file,present,hdfs,exists,file,return,new,tuple2,file,str,to,string
